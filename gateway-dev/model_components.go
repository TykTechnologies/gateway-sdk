/*
Tyk Gateway API

The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.  **Warning: Under no circumstances should outside parties be granted access to this API.**  The Tyk Gateway API is capable of:  * Managing session objects (key generation) * Managing and listing policies * Managing and listing API Definitions (only when not using the Dashboard) * Hot reloads / reloading a cluster configuration * OAuth client creation (only when not using the Dashboard)   In order to use the Gateway API, you'll need to set the `secret` parameter in your tyk.conf file.  The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:  ``` x-tyk-authorization: <your-secret> ``` <br/> <b>The Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.</b>

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gate

import (
	"encoding/json"
)

// Components struct for Components
type Components struct {
	Schemas map[string]interface{} `json:"schemas,omitempty"`
	Responses map[string]interface{} `json:"responses,omitempty"`
	Parameters map[string]interface{} `json:"parameters,omitempty"`
	Examples map[string]interface{} `json:"examples,omitempty"`
	RequestBodies map[string]interface{} `json:"requestBodies,omitempty"`
	Headers map[string]interface{} `json:"headers,omitempty"`
	SecuritySchemes map[string]interface{} `json:"securitySchemes,omitempty"`
	Links map[string]interface{} `json:"links,omitempty"`
	Callbacks map[string]interface{} `json:"callbacks,omitempty"`
}

// NewComponents instantiates a new Components object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComponents() *Components {
	this := Components{}
	return &this
}

// NewComponentsWithDefaults instantiates a new Components object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComponentsWithDefaults() *Components {
	this := Components{}
	return &this
}

// GetSchemas returns the Schemas field value if set, zero value otherwise.
func (o *Components) GetSchemas() map[string]interface{} {
	if o == nil || o.Schemas == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Components) GetSchemasOk() (map[string]interface{}, bool) {
	if o == nil || o.Schemas == nil {
		return nil, false
	}
	return o.Schemas, true
}

// HasSchemas returns a boolean if a field has been set.
func (o *Components) HasSchemas() bool {
	if o != nil && o.Schemas != nil {
		return true
	}

	return false
}

// SetSchemas gets a reference to the given map[string]interface{} and assigns it to the Schemas field.
func (o *Components) SetSchemas(v map[string]interface{}) {
	o.Schemas = v
}

// GetResponses returns the Responses field value if set, zero value otherwise.
func (o *Components) GetResponses() map[string]interface{} {
	if o == nil || o.Responses == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Responses
}

// GetResponsesOk returns a tuple with the Responses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Components) GetResponsesOk() (map[string]interface{}, bool) {
	if o == nil || o.Responses == nil {
		return nil, false
	}
	return o.Responses, true
}

// HasResponses returns a boolean if a field has been set.
func (o *Components) HasResponses() bool {
	if o != nil && o.Responses != nil {
		return true
	}

	return false
}

// SetResponses gets a reference to the given map[string]interface{} and assigns it to the Responses field.
func (o *Components) SetResponses(v map[string]interface{}) {
	o.Responses = v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *Components) GetParameters() map[string]interface{} {
	if o == nil || o.Parameters == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Components) GetParametersOk() (map[string]interface{}, bool) {
	if o == nil || o.Parameters == nil {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *Components) HasParameters() bool {
	if o != nil && o.Parameters != nil {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string]interface{} and assigns it to the Parameters field.
func (o *Components) SetParameters(v map[string]interface{}) {
	o.Parameters = v
}

// GetExamples returns the Examples field value if set, zero value otherwise.
func (o *Components) GetExamples() map[string]interface{} {
	if o == nil || o.Examples == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Examples
}

// GetExamplesOk returns a tuple with the Examples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Components) GetExamplesOk() (map[string]interface{}, bool) {
	if o == nil || o.Examples == nil {
		return nil, false
	}
	return o.Examples, true
}

// HasExamples returns a boolean if a field has been set.
func (o *Components) HasExamples() bool {
	if o != nil && o.Examples != nil {
		return true
	}

	return false
}

// SetExamples gets a reference to the given map[string]interface{} and assigns it to the Examples field.
func (o *Components) SetExamples(v map[string]interface{}) {
	o.Examples = v
}

// GetRequestBodies returns the RequestBodies field value if set, zero value otherwise.
func (o *Components) GetRequestBodies() map[string]interface{} {
	if o == nil || o.RequestBodies == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.RequestBodies
}

// GetRequestBodiesOk returns a tuple with the RequestBodies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Components) GetRequestBodiesOk() (map[string]interface{}, bool) {
	if o == nil || o.RequestBodies == nil {
		return nil, false
	}
	return o.RequestBodies, true
}

// HasRequestBodies returns a boolean if a field has been set.
func (o *Components) HasRequestBodies() bool {
	if o != nil && o.RequestBodies != nil {
		return true
	}

	return false
}

// SetRequestBodies gets a reference to the given map[string]interface{} and assigns it to the RequestBodies field.
func (o *Components) SetRequestBodies(v map[string]interface{}) {
	o.RequestBodies = v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *Components) GetHeaders() map[string]interface{} {
	if o == nil || o.Headers == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Components) GetHeadersOk() (map[string]interface{}, bool) {
	if o == nil || o.Headers == nil {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *Components) HasHeaders() bool {
	if o != nil && o.Headers != nil {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given map[string]interface{} and assigns it to the Headers field.
func (o *Components) SetHeaders(v map[string]interface{}) {
	o.Headers = v
}

// GetSecuritySchemes returns the SecuritySchemes field value if set, zero value otherwise.
func (o *Components) GetSecuritySchemes() map[string]interface{} {
	if o == nil || o.SecuritySchemes == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.SecuritySchemes
}

// GetSecuritySchemesOk returns a tuple with the SecuritySchemes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Components) GetSecuritySchemesOk() (map[string]interface{}, bool) {
	if o == nil || o.SecuritySchemes == nil {
		return nil, false
	}
	return o.SecuritySchemes, true
}

// HasSecuritySchemes returns a boolean if a field has been set.
func (o *Components) HasSecuritySchemes() bool {
	if o != nil && o.SecuritySchemes != nil {
		return true
	}

	return false
}

// SetSecuritySchemes gets a reference to the given map[string]interface{} and assigns it to the SecuritySchemes field.
func (o *Components) SetSecuritySchemes(v map[string]interface{}) {
	o.SecuritySchemes = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *Components) GetLinks() map[string]interface{} {
	if o == nil || o.Links == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Components) GetLinksOk() (map[string]interface{}, bool) {
	if o == nil || o.Links == nil {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *Components) HasLinks() bool {
	if o != nil && o.Links != nil {
		return true
	}

	return false
}

// SetLinks gets a reference to the given map[string]interface{} and assigns it to the Links field.
func (o *Components) SetLinks(v map[string]interface{}) {
	o.Links = v
}

// GetCallbacks returns the Callbacks field value if set, zero value otherwise.
func (o *Components) GetCallbacks() map[string]interface{} {
	if o == nil || o.Callbacks == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Callbacks
}

// GetCallbacksOk returns a tuple with the Callbacks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Components) GetCallbacksOk() (map[string]interface{}, bool) {
	if o == nil || o.Callbacks == nil {
		return nil, false
	}
	return o.Callbacks, true
}

// HasCallbacks returns a boolean if a field has been set.
func (o *Components) HasCallbacks() bool {
	if o != nil && o.Callbacks != nil {
		return true
	}

	return false
}

// SetCallbacks gets a reference to the given map[string]interface{} and assigns it to the Callbacks field.
func (o *Components) SetCallbacks(v map[string]interface{}) {
	o.Callbacks = v
}

func (o Components) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Schemas != nil {
		toSerialize["schemas"] = o.Schemas
	}
	if o.Responses != nil {
		toSerialize["responses"] = o.Responses
	}
	if o.Parameters != nil {
		toSerialize["parameters"] = o.Parameters
	}
	if o.Examples != nil {
		toSerialize["examples"] = o.Examples
	}
	if o.RequestBodies != nil {
		toSerialize["requestBodies"] = o.RequestBodies
	}
	if o.Headers != nil {
		toSerialize["headers"] = o.Headers
	}
	if o.SecuritySchemes != nil {
		toSerialize["securitySchemes"] = o.SecuritySchemes
	}
	if o.Links != nil {
		toSerialize["links"] = o.Links
	}
	if o.Callbacks != nil {
		toSerialize["callbacks"] = o.Callbacks
	}
	return json.Marshal(toSerialize)
}

type NullableComponents struct {
	value *Components
	isSet bool
}

func (v NullableComponents) Get() *Components {
	return v.value
}

func (v *NullableComponents) Set(val *Components) {
	v.value = val
	v.isSet = true
}

func (v NullableComponents) IsSet() bool {
	return v.isSet
}

func (v *NullableComponents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComponents(val *Components) *NullableComponents {
	return &NullableComponents{value: val, isSet: true}
}

func (v NullableComponents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComponents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


