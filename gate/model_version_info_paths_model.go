/*
Tyk Gateway API

The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.  **Warning: Under no circumstances should outside parties be granted access to this API.**  The Tyk Gateway API is capable of:  * Managing session objects (key generation) * Managing and listing policies * Managing and listing API Definitions (only when not using the Dashboard) * Hot reloads / reloading a cluster configuration * OAuth client creation (only when not using the Dashboard)   In order to use the Gateway API, you'll need to set the `secret` parameter in your tyk.conf file.  The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:  ``` x-tyk-authorization: <your-secret> ``` <br/> <b>The Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.</b>

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gate

import (
	"encoding/json"
)

// VersionInfoPathsModel struct for VersionInfoPathsModel
type VersionInfoPathsModel struct {
	BlackList []string `json:"black_list,omitempty"`
	Ignored []string `json:"ignored,omitempty"`
	WhiteList []string `json:"white_list,omitempty"`
}

// NewVersionInfoPathsModel instantiates a new VersionInfoPathsModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionInfoPathsModel() *VersionInfoPathsModel {
	this := VersionInfoPathsModel{}
	return &this
}

// NewVersionInfoPathsModelWithDefaults instantiates a new VersionInfoPathsModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionInfoPathsModelWithDefaults() *VersionInfoPathsModel {
	this := VersionInfoPathsModel{}
	return &this
}

// GetBlackList returns the BlackList field value if set, zero value otherwise.
func (o *VersionInfoPathsModel) GetBlackList() []string {
	if o == nil || o.BlackList == nil {
		var ret []string
		return ret
	}
	return o.BlackList
}

// GetBlackListOk returns a tuple with the BlackList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionInfoPathsModel) GetBlackListOk() ([]string, bool) {
	if o == nil || o.BlackList == nil {
		return nil, false
	}
	return o.BlackList, true
}

// HasBlackList returns a boolean if a field has been set.
func (o *VersionInfoPathsModel) HasBlackList() bool {
	if o != nil && o.BlackList != nil {
		return true
	}

	return false
}

// SetBlackList gets a reference to the given []string and assigns it to the BlackList field.
func (o *VersionInfoPathsModel) SetBlackList(v []string) {
	o.BlackList = v
}

// GetIgnored returns the Ignored field value if set, zero value otherwise.
func (o *VersionInfoPathsModel) GetIgnored() []string {
	if o == nil || o.Ignored == nil {
		var ret []string
		return ret
	}
	return o.Ignored
}

// GetIgnoredOk returns a tuple with the Ignored field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionInfoPathsModel) GetIgnoredOk() ([]string, bool) {
	if o == nil || o.Ignored == nil {
		return nil, false
	}
	return o.Ignored, true
}

// HasIgnored returns a boolean if a field has been set.
func (o *VersionInfoPathsModel) HasIgnored() bool {
	if o != nil && o.Ignored != nil {
		return true
	}

	return false
}

// SetIgnored gets a reference to the given []string and assigns it to the Ignored field.
func (o *VersionInfoPathsModel) SetIgnored(v []string) {
	o.Ignored = v
}

// GetWhiteList returns the WhiteList field value if set, zero value otherwise.
func (o *VersionInfoPathsModel) GetWhiteList() []string {
	if o == nil || o.WhiteList == nil {
		var ret []string
		return ret
	}
	return o.WhiteList
}

// GetWhiteListOk returns a tuple with the WhiteList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionInfoPathsModel) GetWhiteListOk() ([]string, bool) {
	if o == nil || o.WhiteList == nil {
		return nil, false
	}
	return o.WhiteList, true
}

// HasWhiteList returns a boolean if a field has been set.
func (o *VersionInfoPathsModel) HasWhiteList() bool {
	if o != nil && o.WhiteList != nil {
		return true
	}

	return false
}

// SetWhiteList gets a reference to the given []string and assigns it to the WhiteList field.
func (o *VersionInfoPathsModel) SetWhiteList(v []string) {
	o.WhiteList = v
}

func (o VersionInfoPathsModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BlackList != nil {
		toSerialize["black_list"] = o.BlackList
	}
	if o.Ignored != nil {
		toSerialize["ignored"] = o.Ignored
	}
	if o.WhiteList != nil {
		toSerialize["white_list"] = o.WhiteList
	}
	return json.Marshal(toSerialize)
}

type NullableVersionInfoPathsModel struct {
	value *VersionInfoPathsModel
	isSet bool
}

func (v NullableVersionInfoPathsModel) Get() *VersionInfoPathsModel {
	return v.value
}

func (v *NullableVersionInfoPathsModel) Set(val *VersionInfoPathsModel) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionInfoPathsModel) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionInfoPathsModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionInfoPathsModel(val *VersionInfoPathsModel) *NullableVersionInfoPathsModel {
	return &NullableVersionInfoPathsModel{value: val, isSet: true}
}

func (v NullableVersionInfoPathsModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionInfoPathsModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


