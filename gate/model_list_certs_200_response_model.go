/*
Tyk Gateway API

The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.  **Warning: Under no circumstances should outside parties be granted access to this API.**  The Tyk Gateway API is capable of:  * Managing session objects (key generation) * Managing and listing policies * Managing and listing API Definitions (only when not using the Dashboard) * Hot reloads / reloading a cluster configuration * OAuth client creation (only when not using the Dashboard)   In order to use the Gateway API, you'll need to set the `secret` parameter in your tyk.conf file.  The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:  ``` x-tyk-authorization: <your-secret> ``` <br/> <b>The Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.</b>

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gate

import (
	"encoding/json"
	"fmt"
)

// ListCerts200ResponseModel - struct for ListCerts200ResponseModel
type ListCerts200ResponseModel struct {
	APIAllCertificateBasicsModel *APIAllCertificateBasicsModel
	APIAllCertificatesModel *APIAllCertificatesModel
	ArrayOfCertificateMetaModelModel *[]CertificateMetaModelModel
}

// APIAllCertificateBasicsModelAsListCerts200ResponseModel is a convenience function that returns APIAllCertificateBasicsModel wrapped in ListCerts200ResponseModel
func APIAllCertificateBasicsModelAsListCerts200ResponseModel(v *APIAllCertificateBasicsModel) ListCerts200ResponseModel {
	return ListCerts200ResponseModel{
		APIAllCertificateBasicsModel: v,
	}
}

// APIAllCertificatesModelAsListCerts200ResponseModel is a convenience function that returns APIAllCertificatesModel wrapped in ListCerts200ResponseModel
func APIAllCertificatesModelAsListCerts200ResponseModel(v *APIAllCertificatesModel) ListCerts200ResponseModel {
	return ListCerts200ResponseModel{
		APIAllCertificatesModel: v,
	}
}

// []CertificateMetaModelModelAsListCerts200ResponseModel is a convenience function that returns []CertificateMetaModelModel wrapped in ListCerts200ResponseModel
func ArrayOfCertificateMetaModelModelAsListCerts200ResponseModel(v *[]CertificateMetaModelModel) ListCerts200ResponseModel {
	return ListCerts200ResponseModel{
		ArrayOfCertificateMetaModelModel: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListCerts200ResponseModel) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into APIAllCertificateBasicsModel
	err = newStrictDecoder(data).Decode(&dst.APIAllCertificateBasicsModel)
	if err == nil {
		jsonAPIAllCertificateBasicsModel, _ := json.Marshal(dst.APIAllCertificateBasicsModel)
		if string(jsonAPIAllCertificateBasicsModel) == "{}" { // empty struct
			dst.APIAllCertificateBasicsModel = nil
		} else {
			match++
		}
	} else {
		dst.APIAllCertificateBasicsModel = nil
	}

	// try to unmarshal data into APIAllCertificatesModel
	err = newStrictDecoder(data).Decode(&dst.APIAllCertificatesModel)
	if err == nil {
		jsonAPIAllCertificatesModel, _ := json.Marshal(dst.APIAllCertificatesModel)
		if string(jsonAPIAllCertificatesModel) == "{}" { // empty struct
			dst.APIAllCertificatesModel = nil
		} else {
			match++
		}
	} else {
		dst.APIAllCertificatesModel = nil
	}

	// try to unmarshal data into ArrayOfCertificateMetaModelModel
	err = newStrictDecoder(data).Decode(&dst.ArrayOfCertificateMetaModelModel)
	if err == nil {
		jsonArrayOfCertificateMetaModelModel, _ := json.Marshal(dst.ArrayOfCertificateMetaModelModel)
		if string(jsonArrayOfCertificateMetaModelModel) == "{}" { // empty struct
			dst.ArrayOfCertificateMetaModelModel = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfCertificateMetaModelModel = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.APIAllCertificateBasicsModel = nil
		dst.APIAllCertificatesModel = nil
		dst.ArrayOfCertificateMetaModelModel = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(ListCerts200ResponseModel)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(ListCerts200ResponseModel)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListCerts200ResponseModel) MarshalJSON() ([]byte, error) {
	if src.APIAllCertificateBasicsModel != nil {
		return json.Marshal(&src.APIAllCertificateBasicsModel)
	}

	if src.APIAllCertificatesModel != nil {
		return json.Marshal(&src.APIAllCertificatesModel)
	}

	if src.ArrayOfCertificateMetaModelModel != nil {
		return json.Marshal(&src.ArrayOfCertificateMetaModelModel)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListCerts200ResponseModel) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.APIAllCertificateBasicsModel != nil {
		return obj.APIAllCertificateBasicsModel
	}

	if obj.APIAllCertificatesModel != nil {
		return obj.APIAllCertificatesModel
	}

	if obj.ArrayOfCertificateMetaModelModel != nil {
		return obj.ArrayOfCertificateMetaModelModel
	}

	// all schemas are nil
	return nil
}

type NullableListCerts200ResponseModel struct {
	value *ListCerts200ResponseModel
	isSet bool
}

func (v NullableListCerts200ResponseModel) Get() *ListCerts200ResponseModel {
	return v.value
}

func (v *NullableListCerts200ResponseModel) Set(val *ListCerts200ResponseModel) {
	v.value = val
	v.isSet = true
}

func (v NullableListCerts200ResponseModel) IsSet() bool {
	return v.isSet
}

func (v *NullableListCerts200ResponseModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListCerts200ResponseModel(val *ListCerts200ResponseModel) *NullableListCerts200ResponseModel {
	return &NullableListCerts200ResponseModel{value: val, isSet: true}
}

func (v NullableListCerts200ResponseModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListCerts200ResponseModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


