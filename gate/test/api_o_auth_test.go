/*
Tyk Gateway API

Testing OAuthApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package gate

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_gate_OAuthApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test OAuthApiService AuthorizeClient", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.OAuthApi.AuthorizeClient(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test OAuthApiService CreateOAuthClient", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.OAuthApi.CreateOAuthClient(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test OAuthApiService DeleteOAuthClient", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var apiID string
        var keyName string

        resp, httpRes, err := apiClient.OAuthApi.DeleteOAuthClient(context.Background(), apiID, keyName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test OAuthApiService GetOAuthClient", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var apiID string
        var keyName string

        resp, httpRes, err := apiClient.OAuthApi.GetOAuthClient(context.Background(), apiID, keyName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test OAuthApiService GetOAuthClientTokens", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var apiID string
        var keyName string

        resp, httpRes, err := apiClient.OAuthApi.GetOAuthClientTokens(context.Background(), apiID, keyName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test OAuthApiService InvalidateOAuthRefresh", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var keyName string

        resp, httpRes, err := apiClient.OAuthApi.InvalidateOAuthRefresh(context.Background(), keyName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test OAuthApiService ListOAuthClients", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var apiID string

        resp, httpRes, err := apiClient.OAuthApi.ListOAuthClients(context.Background(), apiID).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test OAuthApiService RevokeAllTokens", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.OAuthApi.RevokeAllTokens(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test OAuthApiService RevokeSingleToken", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.OAuthApi.RevokeSingleToken(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test OAuthApiService UpdateoAuthClient", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var apiID string

        resp, httpRes, err := apiClient.OAuthApi.UpdateoAuthClient(context.Background(), apiID).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
