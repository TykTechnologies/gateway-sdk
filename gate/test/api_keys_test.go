/*
Tyk Gateway API

Testing KeysApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package gate

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_gate_KeysApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test KeysApiService AddKey", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.KeysApi.AddKey(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test KeysApiService CreateCustomKey", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var keyID string

        resp, httpRes, err := apiClient.KeysApi.CreateCustomKey(context.Background(), keyID).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test KeysApiService DeleteKey", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var keyID string

        resp, httpRes, err := apiClient.KeysApi.DeleteKey(context.Background(), keyID).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test KeysApiService GetKey", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var keyID string

        resp, httpRes, err := apiClient.KeysApi.GetKey(context.Background(), keyID).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test KeysApiService ListKeys", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.KeysApi.ListKeys(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test KeysApiService UpdateKey", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var keyID string

        resp, httpRes, err := apiClient.KeysApi.UpdateKey(context.Background(), keyID).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
