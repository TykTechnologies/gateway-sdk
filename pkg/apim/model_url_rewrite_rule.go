/*
Tyk Gateway API

The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.  **Warning: Under no circumstances should outside parties be granted access to this API.**  The Tyk Gateway API is capable of:  * Managing session objects (key generation). * Managing and listing policies. * Managing and listing API Definitions (only when not using the Tyk Dashboard). * Hot reloads / reloading a cluster configuration. * OAuth client creation (only when not using the Tyk Dashboard).  In order to use the Gateway API, you'll need to set the **secret** parameter in your tyk.conf file.  The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:  **x-tyk-authorization: <your-secret>*** <br/>  <b>The Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.</b>

API version: 5.7.1
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the URLRewriteRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &URLRewriteRule{}

// URLRewriteRule struct for URLRewriteRule
type URLRewriteRule struct {
	In      *string `json:"in,omitempty"`
	Name    *string `json:"name,omitempty"`
	Negate  *bool   `json:"negate,omitempty"`
	Pattern *string `json:"pattern,omitempty"`
}

// NewURLRewriteRule instantiates a new URLRewriteRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewURLRewriteRule() *URLRewriteRule {
	this := URLRewriteRule{}
	return &this
}

// NewURLRewriteRuleWithDefaults instantiates a new URLRewriteRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewURLRewriteRuleWithDefaults() *URLRewriteRule {
	this := URLRewriteRule{}
	return &this
}

// GetIn returns the In field value if set, zero value otherwise.
func (o *URLRewriteRule) GetIn() string {
	if o == nil || IsNil(o.In) {
		var ret string
		return ret
	}
	return *o.In
}

// GetInOk returns a tuple with the In field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *URLRewriteRule) GetInOk() (*string, bool) {
	if o == nil || IsNil(o.In) {
		return nil, false
	}
	return o.In, true
}

// HasIn returns a boolean if a field has been set.
func (o *URLRewriteRule) HasIn() bool {
	if o != nil && !IsNil(o.In) {
		return true
	}

	return false
}

// SetIn gets a reference to the given string and assigns it to the In field.
func (o *URLRewriteRule) SetIn(v string) {
	o.In = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *URLRewriteRule) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *URLRewriteRule) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *URLRewriteRule) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *URLRewriteRule) SetName(v string) {
	o.Name = &v
}

// GetNegate returns the Negate field value if set, zero value otherwise.
func (o *URLRewriteRule) GetNegate() bool {
	if o == nil || IsNil(o.Negate) {
		var ret bool
		return ret
	}
	return *o.Negate
}

// GetNegateOk returns a tuple with the Negate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *URLRewriteRule) GetNegateOk() (*bool, bool) {
	if o == nil || IsNil(o.Negate) {
		return nil, false
	}
	return o.Negate, true
}

// HasNegate returns a boolean if a field has been set.
func (o *URLRewriteRule) HasNegate() bool {
	if o != nil && !IsNil(o.Negate) {
		return true
	}

	return false
}

// SetNegate gets a reference to the given bool and assigns it to the Negate field.
func (o *URLRewriteRule) SetNegate(v bool) {
	o.Negate = &v
}

// GetPattern returns the Pattern field value if set, zero value otherwise.
func (o *URLRewriteRule) GetPattern() string {
	if o == nil || IsNil(o.Pattern) {
		var ret string
		return ret
	}
	return *o.Pattern
}

// GetPatternOk returns a tuple with the Pattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *URLRewriteRule) GetPatternOk() (*string, bool) {
	if o == nil || IsNil(o.Pattern) {
		return nil, false
	}
	return o.Pattern, true
}

// HasPattern returns a boolean if a field has been set.
func (o *URLRewriteRule) HasPattern() bool {
	if o != nil && !IsNil(o.Pattern) {
		return true
	}

	return false
}

// SetPattern gets a reference to the given string and assigns it to the Pattern field.
func (o *URLRewriteRule) SetPattern(v string) {
	o.Pattern = &v
}

func (o URLRewriteRule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o URLRewriteRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.In) {
		toSerialize["in"] = o.In
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Negate) {
		toSerialize["negate"] = o.Negate
	}
	if !IsNil(o.Pattern) {
		toSerialize["pattern"] = o.Pattern
	}
	return toSerialize, nil
}

type NullableURLRewriteRule struct {
	value *URLRewriteRule
	isSet bool
}

func (v NullableURLRewriteRule) Get() *URLRewriteRule {
	return v.value
}

func (v *NullableURLRewriteRule) Set(val *URLRewriteRule) {
	v.value = val
	v.isSet = true
}

func (v NullableURLRewriteRule) IsSet() bool {
	return v.isSet
}

func (v *NullableURLRewriteRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableURLRewriteRule(val *URLRewriteRule) *NullableURLRewriteRule {
	return &NullableURLRewriteRule{value: val, isSet: true}
}

func (v NullableURLRewriteRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableURLRewriteRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
