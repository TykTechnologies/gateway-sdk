/*
Tyk Gateway API

The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.  **Warning: Under no circumstances should outside parties be granted access to this API.**  The Tyk Gateway API is capable of:  * Managing session objects (key generation). * Managing and listing policies. * Managing and listing API Definitions (only when not using the Tyk Dashboard). * Hot reloads / reloading a cluster configuration. * OAuth client creation (only when not using the Tyk Dashboard).  In order to use the Gateway API, you'll need to set the **secret** parameter in your tyk.conf file.  The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:  **x-tyk-authorization: <your-secret>*** <br/>  <b>The Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.</b>

API version: 5.7.1
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the CircuitBreaker type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CircuitBreaker{}

// CircuitBreaker struct for CircuitBreaker
type CircuitBreaker struct {
	CoolDownPeriod       *int32   `json:"coolDownPeriod,omitempty"`
	Enabled              *bool    `json:"enabled,omitempty"`
	HalfOpenStateEnabled *bool    `json:"halfOpenStateEnabled,omitempty"`
	SampleSize           *int32   `json:"sampleSize,omitempty"`
	Threshold            *float32 `json:"threshold,omitempty"`
}

// NewCircuitBreaker instantiates a new CircuitBreaker object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCircuitBreaker() *CircuitBreaker {
	this := CircuitBreaker{}
	return &this
}

// NewCircuitBreakerWithDefaults instantiates a new CircuitBreaker object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCircuitBreakerWithDefaults() *CircuitBreaker {
	this := CircuitBreaker{}
	return &this
}

// GetCoolDownPeriod returns the CoolDownPeriod field value if set, zero value otherwise.
func (o *CircuitBreaker) GetCoolDownPeriod() int32 {
	if o == nil || IsNil(o.CoolDownPeriod) {
		var ret int32
		return ret
	}
	return *o.CoolDownPeriod
}

// GetCoolDownPeriodOk returns a tuple with the CoolDownPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CircuitBreaker) GetCoolDownPeriodOk() (*int32, bool) {
	if o == nil || IsNil(o.CoolDownPeriod) {
		return nil, false
	}
	return o.CoolDownPeriod, true
}

// HasCoolDownPeriod returns a boolean if a field has been set.
func (o *CircuitBreaker) HasCoolDownPeriod() bool {
	if o != nil && !IsNil(o.CoolDownPeriod) {
		return true
	}

	return false
}

// SetCoolDownPeriod gets a reference to the given int32 and assigns it to the CoolDownPeriod field.
func (o *CircuitBreaker) SetCoolDownPeriod(v int32) {
	o.CoolDownPeriod = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CircuitBreaker) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CircuitBreaker) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CircuitBreaker) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *CircuitBreaker) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetHalfOpenStateEnabled returns the HalfOpenStateEnabled field value if set, zero value otherwise.
func (o *CircuitBreaker) GetHalfOpenStateEnabled() bool {
	if o == nil || IsNil(o.HalfOpenStateEnabled) {
		var ret bool
		return ret
	}
	return *o.HalfOpenStateEnabled
}

// GetHalfOpenStateEnabledOk returns a tuple with the HalfOpenStateEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CircuitBreaker) GetHalfOpenStateEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.HalfOpenStateEnabled) {
		return nil, false
	}
	return o.HalfOpenStateEnabled, true
}

// HasHalfOpenStateEnabled returns a boolean if a field has been set.
func (o *CircuitBreaker) HasHalfOpenStateEnabled() bool {
	if o != nil && !IsNil(o.HalfOpenStateEnabled) {
		return true
	}

	return false
}

// SetHalfOpenStateEnabled gets a reference to the given bool and assigns it to the HalfOpenStateEnabled field.
func (o *CircuitBreaker) SetHalfOpenStateEnabled(v bool) {
	o.HalfOpenStateEnabled = &v
}

// GetSampleSize returns the SampleSize field value if set, zero value otherwise.
func (o *CircuitBreaker) GetSampleSize() int32 {
	if o == nil || IsNil(o.SampleSize) {
		var ret int32
		return ret
	}
	return *o.SampleSize
}

// GetSampleSizeOk returns a tuple with the SampleSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CircuitBreaker) GetSampleSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.SampleSize) {
		return nil, false
	}
	return o.SampleSize, true
}

// HasSampleSize returns a boolean if a field has been set.
func (o *CircuitBreaker) HasSampleSize() bool {
	if o != nil && !IsNil(o.SampleSize) {
		return true
	}

	return false
}

// SetSampleSize gets a reference to the given int32 and assigns it to the SampleSize field.
func (o *CircuitBreaker) SetSampleSize(v int32) {
	o.SampleSize = &v
}

// GetThreshold returns the Threshold field value if set, zero value otherwise.
func (o *CircuitBreaker) GetThreshold() float32 {
	if o == nil || IsNil(o.Threshold) {
		var ret float32
		return ret
	}
	return *o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CircuitBreaker) GetThresholdOk() (*float32, bool) {
	if o == nil || IsNil(o.Threshold) {
		return nil, false
	}
	return o.Threshold, true
}

// HasThreshold returns a boolean if a field has been set.
func (o *CircuitBreaker) HasThreshold() bool {
	if o != nil && !IsNil(o.Threshold) {
		return true
	}

	return false
}

// SetThreshold gets a reference to the given float32 and assigns it to the Threshold field.
func (o *CircuitBreaker) SetThreshold(v float32) {
	o.Threshold = &v
}

func (o CircuitBreaker) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CircuitBreaker) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CoolDownPeriod) {
		toSerialize["coolDownPeriod"] = o.CoolDownPeriod
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.HalfOpenStateEnabled) {
		toSerialize["halfOpenStateEnabled"] = o.HalfOpenStateEnabled
	}
	if !IsNil(o.SampleSize) {
		toSerialize["sampleSize"] = o.SampleSize
	}
	if !IsNil(o.Threshold) {
		toSerialize["threshold"] = o.Threshold
	}
	return toSerialize, nil
}

type NullableCircuitBreaker struct {
	value *CircuitBreaker
	isSet bool
}

func (v NullableCircuitBreaker) Get() *CircuitBreaker {
	return v.value
}

func (v *NullableCircuitBreaker) Set(val *CircuitBreaker) {
	v.value = val
	v.isSet = true
}

func (v NullableCircuitBreaker) IsSet() bool {
	return v.isSet
}

func (v *NullableCircuitBreaker) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCircuitBreaker(val *CircuitBreaker) *NullableCircuitBreaker {
	return &NullableCircuitBreaker{value: val, isSet: true}
}

func (v NullableCircuitBreaker) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCircuitBreaker) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
