/*
Tyk Gateway API

The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.  **Warning: Under no circumstances should outside parties be granted access to this API.**  The Tyk Gateway API is capable of:  * Managing session objects (key generation). * Managing and listing policies. * Managing and listing API Definitions (only when not using the Tyk Dashboard). * Hot reloads / reloading a cluster configuration. * OAuth client creation (only when not using the Tyk Dashboard).  In order to use the Gateway API, you'll need to set the **secret** parameter in your tyk.conf file.  The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:  **x-tyk-authorization: <your-secret>*** <br/>  <b>The Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.</b>

API version: 5.7.1
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the RateLimitSmoothing type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RateLimitSmoothing{}

// RateLimitSmoothing struct for RateLimitSmoothing
type RateLimitSmoothing struct {
	Delay     *int32   `json:"delay,omitempty"`
	Enabled   *bool    `json:"enabled,omitempty"`
	Step      *int32   `json:"step,omitempty"`
	Threshold *int32   `json:"threshold,omitempty"`
	Trigger   *float32 `json:"trigger,omitempty"`
}

// NewRateLimitSmoothing instantiates a new RateLimitSmoothing object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRateLimitSmoothing() *RateLimitSmoothing {
	this := RateLimitSmoothing{}
	return &this
}

// NewRateLimitSmoothingWithDefaults instantiates a new RateLimitSmoothing object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRateLimitSmoothingWithDefaults() *RateLimitSmoothing {
	this := RateLimitSmoothing{}
	return &this
}

// GetDelay returns the Delay field value if set, zero value otherwise.
func (o *RateLimitSmoothing) GetDelay() int32 {
	if o == nil || IsNil(o.Delay) {
		var ret int32
		return ret
	}
	return *o.Delay
}

// GetDelayOk returns a tuple with the Delay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateLimitSmoothing) GetDelayOk() (*int32, bool) {
	if o == nil || IsNil(o.Delay) {
		return nil, false
	}
	return o.Delay, true
}

// HasDelay returns a boolean if a field has been set.
func (o *RateLimitSmoothing) HasDelay() bool {
	if o != nil && !IsNil(o.Delay) {
		return true
	}

	return false
}

// SetDelay gets a reference to the given int32 and assigns it to the Delay field.
func (o *RateLimitSmoothing) SetDelay(v int32) {
	o.Delay = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *RateLimitSmoothing) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateLimitSmoothing) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *RateLimitSmoothing) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *RateLimitSmoothing) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetStep returns the Step field value if set, zero value otherwise.
func (o *RateLimitSmoothing) GetStep() int32 {
	if o == nil || IsNil(o.Step) {
		var ret int32
		return ret
	}
	return *o.Step
}

// GetStepOk returns a tuple with the Step field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateLimitSmoothing) GetStepOk() (*int32, bool) {
	if o == nil || IsNil(o.Step) {
		return nil, false
	}
	return o.Step, true
}

// HasStep returns a boolean if a field has been set.
func (o *RateLimitSmoothing) HasStep() bool {
	if o != nil && !IsNil(o.Step) {
		return true
	}

	return false
}

// SetStep gets a reference to the given int32 and assigns it to the Step field.
func (o *RateLimitSmoothing) SetStep(v int32) {
	o.Step = &v
}

// GetThreshold returns the Threshold field value if set, zero value otherwise.
func (o *RateLimitSmoothing) GetThreshold() int32 {
	if o == nil || IsNil(o.Threshold) {
		var ret int32
		return ret
	}
	return *o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateLimitSmoothing) GetThresholdOk() (*int32, bool) {
	if o == nil || IsNil(o.Threshold) {
		return nil, false
	}
	return o.Threshold, true
}

// HasThreshold returns a boolean if a field has been set.
func (o *RateLimitSmoothing) HasThreshold() bool {
	if o != nil && !IsNil(o.Threshold) {
		return true
	}

	return false
}

// SetThreshold gets a reference to the given int32 and assigns it to the Threshold field.
func (o *RateLimitSmoothing) SetThreshold(v int32) {
	o.Threshold = &v
}

// GetTrigger returns the Trigger field value if set, zero value otherwise.
func (o *RateLimitSmoothing) GetTrigger() float32 {
	if o == nil || IsNil(o.Trigger) {
		var ret float32
		return ret
	}
	return *o.Trigger
}

// GetTriggerOk returns a tuple with the Trigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateLimitSmoothing) GetTriggerOk() (*float32, bool) {
	if o == nil || IsNil(o.Trigger) {
		return nil, false
	}
	return o.Trigger, true
}

// HasTrigger returns a boolean if a field has been set.
func (o *RateLimitSmoothing) HasTrigger() bool {
	if o != nil && !IsNil(o.Trigger) {
		return true
	}

	return false
}

// SetTrigger gets a reference to the given float32 and assigns it to the Trigger field.
func (o *RateLimitSmoothing) SetTrigger(v float32) {
	o.Trigger = &v
}

func (o RateLimitSmoothing) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RateLimitSmoothing) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Delay) {
		toSerialize["delay"] = o.Delay
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Step) {
		toSerialize["step"] = o.Step
	}
	if !IsNil(o.Threshold) {
		toSerialize["threshold"] = o.Threshold
	}
	if !IsNil(o.Trigger) {
		toSerialize["trigger"] = o.Trigger
	}
	return toSerialize, nil
}

type NullableRateLimitSmoothing struct {
	value *RateLimitSmoothing
	isSet bool
}

func (v NullableRateLimitSmoothing) Get() *RateLimitSmoothing {
	return v.value
}

func (v *NullableRateLimitSmoothing) Set(val *RateLimitSmoothing) {
	v.value = val
	v.isSet = true
}

func (v NullableRateLimitSmoothing) IsSet() bool {
	return v.isSet
}

func (v *NullableRateLimitSmoothing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRateLimitSmoothing(val *RateLimitSmoothing) *NullableRateLimitSmoothing {
	return &NullableRateLimitSmoothing{value: val, isSet: true}
}

func (v NullableRateLimitSmoothing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRateLimitSmoothing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
