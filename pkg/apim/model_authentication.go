/*
Tyk Gateway API

The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.  **Warning: Under no circumstances should outside parties be granted access to this API.**  The Tyk Gateway API is capable of:  * Managing session objects (key generation). * Managing and listing policies. * Managing and listing API Definitions (only when not using the Tyk Dashboard). * Hot reloads / reloading a cluster configuration. * OAuth client creation (only when not using the Tyk Dashboard).  In order to use the Gateway API, you'll need to set the **secret** parameter in your tyk.conf file.  The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:  **x-tyk-authorization: <your-secret>*** <br/>  <b>The Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.</b>

API version: 5.7.1
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the Authentication type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Authentication{}

// Authentication struct for Authentication
type Authentication struct {
	BaseIdentityProvider   *string                     `json:"baseIdentityProvider,omitempty"`
	Custom                 *CustomPluginAuthentication `json:"custom,omitempty"`
	Enabled                *bool                       `json:"enabled,omitempty"`
	Hmac                   *HMAC                       `json:"hmac,omitempty"`
	Oidc                   *OIDC                       `json:"oidc,omitempty"`
	SecuritySchemes        map[string]interface{}      `json:"securitySchemes,omitempty"`
	StripAuthorizationData *bool                       `json:"stripAuthorizationData,omitempty"`
}

// NewAuthentication instantiates a new Authentication object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthentication() *Authentication {
	this := Authentication{}
	return &this
}

// NewAuthenticationWithDefaults instantiates a new Authentication object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthenticationWithDefaults() *Authentication {
	this := Authentication{}
	return &this
}

// GetBaseIdentityProvider returns the BaseIdentityProvider field value if set, zero value otherwise.
func (o *Authentication) GetBaseIdentityProvider() string {
	if o == nil || IsNil(o.BaseIdentityProvider) {
		var ret string
		return ret
	}
	return *o.BaseIdentityProvider
}

// GetBaseIdentityProviderOk returns a tuple with the BaseIdentityProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Authentication) GetBaseIdentityProviderOk() (*string, bool) {
	if o == nil || IsNil(o.BaseIdentityProvider) {
		return nil, false
	}
	return o.BaseIdentityProvider, true
}

// HasBaseIdentityProvider returns a boolean if a field has been set.
func (o *Authentication) HasBaseIdentityProvider() bool {
	if o != nil && !IsNil(o.BaseIdentityProvider) {
		return true
	}

	return false
}

// SetBaseIdentityProvider gets a reference to the given string and assigns it to the BaseIdentityProvider field.
func (o *Authentication) SetBaseIdentityProvider(v string) {
	o.BaseIdentityProvider = &v
}

// GetCustom returns the Custom field value if set, zero value otherwise.
func (o *Authentication) GetCustom() CustomPluginAuthentication {
	if o == nil || IsNil(o.Custom) {
		var ret CustomPluginAuthentication
		return ret
	}
	return *o.Custom
}

// GetCustomOk returns a tuple with the Custom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Authentication) GetCustomOk() (*CustomPluginAuthentication, bool) {
	if o == nil || IsNil(o.Custom) {
		return nil, false
	}
	return o.Custom, true
}

// HasCustom returns a boolean if a field has been set.
func (o *Authentication) HasCustom() bool {
	if o != nil && !IsNil(o.Custom) {
		return true
	}

	return false
}

// SetCustom gets a reference to the given CustomPluginAuthentication and assigns it to the Custom field.
func (o *Authentication) SetCustom(v CustomPluginAuthentication) {
	o.Custom = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *Authentication) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Authentication) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *Authentication) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *Authentication) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetHmac returns the Hmac field value if set, zero value otherwise.
func (o *Authentication) GetHmac() HMAC {
	if o == nil || IsNil(o.Hmac) {
		var ret HMAC
		return ret
	}
	return *o.Hmac
}

// GetHmacOk returns a tuple with the Hmac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Authentication) GetHmacOk() (*HMAC, bool) {
	if o == nil || IsNil(o.Hmac) {
		return nil, false
	}
	return o.Hmac, true
}

// HasHmac returns a boolean if a field has been set.
func (o *Authentication) HasHmac() bool {
	if o != nil && !IsNil(o.Hmac) {
		return true
	}

	return false
}

// SetHmac gets a reference to the given HMAC and assigns it to the Hmac field.
func (o *Authentication) SetHmac(v HMAC) {
	o.Hmac = &v
}

// GetOidc returns the Oidc field value if set, zero value otherwise.
func (o *Authentication) GetOidc() OIDC {
	if o == nil || IsNil(o.Oidc) {
		var ret OIDC
		return ret
	}
	return *o.Oidc
}

// GetOidcOk returns a tuple with the Oidc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Authentication) GetOidcOk() (*OIDC, bool) {
	if o == nil || IsNil(o.Oidc) {
		return nil, false
	}
	return o.Oidc, true
}

// HasOidc returns a boolean if a field has been set.
func (o *Authentication) HasOidc() bool {
	if o != nil && !IsNil(o.Oidc) {
		return true
	}

	return false
}

// SetOidc gets a reference to the given OIDC and assigns it to the Oidc field.
func (o *Authentication) SetOidc(v OIDC) {
	o.Oidc = &v
}

// GetSecuritySchemes returns the SecuritySchemes field value if set, zero value otherwise.
func (o *Authentication) GetSecuritySchemes() map[string]interface{} {
	if o == nil || IsNil(o.SecuritySchemes) {
		var ret map[string]interface{}
		return ret
	}
	return o.SecuritySchemes
}

// GetSecuritySchemesOk returns a tuple with the SecuritySchemes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Authentication) GetSecuritySchemesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.SecuritySchemes) {
		return map[string]interface{}{}, false
	}
	return o.SecuritySchemes, true
}

// HasSecuritySchemes returns a boolean if a field has been set.
func (o *Authentication) HasSecuritySchemes() bool {
	if o != nil && !IsNil(o.SecuritySchemes) {
		return true
	}

	return false
}

// SetSecuritySchemes gets a reference to the given map[string]interface{} and assigns it to the SecuritySchemes field.
func (o *Authentication) SetSecuritySchemes(v map[string]interface{}) {
	o.SecuritySchemes = v
}

// GetStripAuthorizationData returns the StripAuthorizationData field value if set, zero value otherwise.
func (o *Authentication) GetStripAuthorizationData() bool {
	if o == nil || IsNil(o.StripAuthorizationData) {
		var ret bool
		return ret
	}
	return *o.StripAuthorizationData
}

// GetStripAuthorizationDataOk returns a tuple with the StripAuthorizationData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Authentication) GetStripAuthorizationDataOk() (*bool, bool) {
	if o == nil || IsNil(o.StripAuthorizationData) {
		return nil, false
	}
	return o.StripAuthorizationData, true
}

// HasStripAuthorizationData returns a boolean if a field has been set.
func (o *Authentication) HasStripAuthorizationData() bool {
	if o != nil && !IsNil(o.StripAuthorizationData) {
		return true
	}

	return false
}

// SetStripAuthorizationData gets a reference to the given bool and assigns it to the StripAuthorizationData field.
func (o *Authentication) SetStripAuthorizationData(v bool) {
	o.StripAuthorizationData = &v
}

func (o Authentication) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Authentication) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BaseIdentityProvider) {
		toSerialize["baseIdentityProvider"] = o.BaseIdentityProvider
	}
	if !IsNil(o.Custom) {
		toSerialize["custom"] = o.Custom
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Hmac) {
		toSerialize["hmac"] = o.Hmac
	}
	if !IsNil(o.Oidc) {
		toSerialize["oidc"] = o.Oidc
	}
	if !IsNil(o.SecuritySchemes) {
		toSerialize["securitySchemes"] = o.SecuritySchemes
	}
	if !IsNil(o.StripAuthorizationData) {
		toSerialize["stripAuthorizationData"] = o.StripAuthorizationData
	}
	return toSerialize, nil
}

type NullableAuthentication struct {
	value *Authentication
	isSet bool
}

func (v NullableAuthentication) Get() *Authentication {
	return v.value
}

func (v *NullableAuthentication) Set(val *Authentication) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthentication) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthentication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthentication(val *Authentication) *NullableAuthentication {
	return &NullableAuthentication{value: val, isSet: true}
}

func (v NullableAuthentication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthentication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
