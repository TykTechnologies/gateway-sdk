/*
Tyk Gateway API

 The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway

API version: 5.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
	"time"
)

// checks if the GraphQLSupergraphConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GraphQLSupergraphConfig{}

// GraphQLSupergraphConfig struct for GraphQLSupergraphConfig
type GraphQLSupergraphConfig struct {
	DisableQueryBatching *bool `json:"disable_query_batching,omitempty"`
	GlobalHeaders map[string]string `json:"global_headers,omitempty"`
	MergedSdl *string `json:"merged_sdl,omitempty"`
	Subgraphs []GraphQLSubgraphEntity `json:"subgraphs,omitempty"`
	UpdatedAt NullableTime `json:"updated_at,omitempty"`
}

// NewGraphQLSupergraphConfig instantiates a new GraphQLSupergraphConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGraphQLSupergraphConfig() *GraphQLSupergraphConfig {
	this := GraphQLSupergraphConfig{}
	return &this
}

// NewGraphQLSupergraphConfigWithDefaults instantiates a new GraphQLSupergraphConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGraphQLSupergraphConfigWithDefaults() *GraphQLSupergraphConfig {
	this := GraphQLSupergraphConfig{}
	return &this
}

// GetDisableQueryBatching returns the DisableQueryBatching field value if set, zero value otherwise.
func (o *GraphQLSupergraphConfig) GetDisableQueryBatching() bool {
	if o == nil || IsNil(o.DisableQueryBatching) {
		var ret bool
		return ret
	}
	return *o.DisableQueryBatching
}

// GetDisableQueryBatchingOk returns a tuple with the DisableQueryBatching field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphQLSupergraphConfig) GetDisableQueryBatchingOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableQueryBatching) {
		return nil, false
	}
	return o.DisableQueryBatching, true
}

// HasDisableQueryBatching returns a boolean if a field has been set.
func (o *GraphQLSupergraphConfig) HasDisableQueryBatching() bool {
	if o != nil && !IsNil(o.DisableQueryBatching) {
		return true
	}

	return false
}

// SetDisableQueryBatching gets a reference to the given bool and assigns it to the DisableQueryBatching field.
func (o *GraphQLSupergraphConfig) SetDisableQueryBatching(v bool) {
	o.DisableQueryBatching = &v
}

// GetGlobalHeaders returns the GlobalHeaders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GraphQLSupergraphConfig) GetGlobalHeaders() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.GlobalHeaders
}

// GetGlobalHeadersOk returns a tuple with the GlobalHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GraphQLSupergraphConfig) GetGlobalHeadersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.GlobalHeaders) {
		return nil, false
	}
	return &o.GlobalHeaders, true
}

// HasGlobalHeaders returns a boolean if a field has been set.
func (o *GraphQLSupergraphConfig) HasGlobalHeaders() bool {
	if o != nil && !IsNil(o.GlobalHeaders) {
		return true
	}

	return false
}

// SetGlobalHeaders gets a reference to the given map[string]string and assigns it to the GlobalHeaders field.
func (o *GraphQLSupergraphConfig) SetGlobalHeaders(v map[string]string) {
	o.GlobalHeaders = v
}

// GetMergedSdl returns the MergedSdl field value if set, zero value otherwise.
func (o *GraphQLSupergraphConfig) GetMergedSdl() string {
	if o == nil || IsNil(o.MergedSdl) {
		var ret string
		return ret
	}
	return *o.MergedSdl
}

// GetMergedSdlOk returns a tuple with the MergedSdl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphQLSupergraphConfig) GetMergedSdlOk() (*string, bool) {
	if o == nil || IsNil(o.MergedSdl) {
		return nil, false
	}
	return o.MergedSdl, true
}

// HasMergedSdl returns a boolean if a field has been set.
func (o *GraphQLSupergraphConfig) HasMergedSdl() bool {
	if o != nil && !IsNil(o.MergedSdl) {
		return true
	}

	return false
}

// SetMergedSdl gets a reference to the given string and assigns it to the MergedSdl field.
func (o *GraphQLSupergraphConfig) SetMergedSdl(v string) {
	o.MergedSdl = &v
}

// GetSubgraphs returns the Subgraphs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GraphQLSupergraphConfig) GetSubgraphs() []GraphQLSubgraphEntity {
	if o == nil {
		var ret []GraphQLSubgraphEntity
		return ret
	}
	return o.Subgraphs
}

// GetSubgraphsOk returns a tuple with the Subgraphs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GraphQLSupergraphConfig) GetSubgraphsOk() ([]GraphQLSubgraphEntity, bool) {
	if o == nil || IsNil(o.Subgraphs) {
		return nil, false
	}
	return o.Subgraphs, true
}

// HasSubgraphs returns a boolean if a field has been set.
func (o *GraphQLSupergraphConfig) HasSubgraphs() bool {
	if o != nil && !IsNil(o.Subgraphs) {
		return true
	}

	return false
}

// SetSubgraphs gets a reference to the given []GraphQLSubgraphEntity and assigns it to the Subgraphs field.
func (o *GraphQLSupergraphConfig) SetSubgraphs(v []GraphQLSubgraphEntity) {
	o.Subgraphs = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GraphQLSupergraphConfig) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt.Get()
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GraphQLSupergraphConfig) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedAt.Get(), o.UpdatedAt.IsSet()
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *GraphQLSupergraphConfig) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt.IsSet() {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given NullableTime and assigns it to the UpdatedAt field.
func (o *GraphQLSupergraphConfig) SetUpdatedAt(v time.Time) {
	o.UpdatedAt.Set(&v)
}
// SetUpdatedAtNil sets the value for UpdatedAt to be an explicit nil
func (o *GraphQLSupergraphConfig) SetUpdatedAtNil() {
	o.UpdatedAt.Set(nil)
}

// UnsetUpdatedAt ensures that no value is present for UpdatedAt, not even an explicit nil
func (o *GraphQLSupergraphConfig) UnsetUpdatedAt() {
	o.UpdatedAt.Unset()
}

func (o GraphQLSupergraphConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GraphQLSupergraphConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisableQueryBatching) {
		toSerialize["disable_query_batching"] = o.DisableQueryBatching
	}
	if o.GlobalHeaders != nil {
		toSerialize["global_headers"] = o.GlobalHeaders
	}
	if !IsNil(o.MergedSdl) {
		toSerialize["merged_sdl"] = o.MergedSdl
	}
	if o.Subgraphs != nil {
		toSerialize["subgraphs"] = o.Subgraphs
	}
	if o.UpdatedAt.IsSet() {
		toSerialize["updated_at"] = o.UpdatedAt.Get()
	}
	return toSerialize, nil
}

type NullableGraphQLSupergraphConfig struct {
	value *GraphQLSupergraphConfig
	isSet bool
}

func (v NullableGraphQLSupergraphConfig) Get() *GraphQLSupergraphConfig {
	return v.value
}

func (v *NullableGraphQLSupergraphConfig) Set(val *GraphQLSupergraphConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableGraphQLSupergraphConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableGraphQLSupergraphConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGraphQLSupergraphConfig(val *GraphQLSupergraphConfig) *NullableGraphQLSupergraphConfig {
	return &NullableGraphQLSupergraphConfig{value: val, isSet: true}
}

func (v NullableGraphQLSupergraphConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGraphQLSupergraphConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


