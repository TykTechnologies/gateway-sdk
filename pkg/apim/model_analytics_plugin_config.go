/*
Tyk Gateway API

 The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway

API version: 5.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the AnalyticsPluginConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnalyticsPluginConfig{}

// AnalyticsPluginConfig struct for AnalyticsPluginConfig
type AnalyticsPluginConfig struct {
	Enable *bool `json:"enable,omitempty"`
	FuncName *string `json:"func_name,omitempty"`
	PluginPath *string `json:"plugin_path,omitempty"`
}

// NewAnalyticsPluginConfig instantiates a new AnalyticsPluginConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnalyticsPluginConfig() *AnalyticsPluginConfig {
	this := AnalyticsPluginConfig{}
	return &this
}

// NewAnalyticsPluginConfigWithDefaults instantiates a new AnalyticsPluginConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnalyticsPluginConfigWithDefaults() *AnalyticsPluginConfig {
	this := AnalyticsPluginConfig{}
	return &this
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *AnalyticsPluginConfig) GetEnable() bool {
	if o == nil || IsNil(o.Enable) {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsPluginConfig) GetEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.Enable) {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *AnalyticsPluginConfig) HasEnable() bool {
	if o != nil && !IsNil(o.Enable) {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *AnalyticsPluginConfig) SetEnable(v bool) {
	o.Enable = &v
}

// GetFuncName returns the FuncName field value if set, zero value otherwise.
func (o *AnalyticsPluginConfig) GetFuncName() string {
	if o == nil || IsNil(o.FuncName) {
		var ret string
		return ret
	}
	return *o.FuncName
}

// GetFuncNameOk returns a tuple with the FuncName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsPluginConfig) GetFuncNameOk() (*string, bool) {
	if o == nil || IsNil(o.FuncName) {
		return nil, false
	}
	return o.FuncName, true
}

// HasFuncName returns a boolean if a field has been set.
func (o *AnalyticsPluginConfig) HasFuncName() bool {
	if o != nil && !IsNil(o.FuncName) {
		return true
	}

	return false
}

// SetFuncName gets a reference to the given string and assigns it to the FuncName field.
func (o *AnalyticsPluginConfig) SetFuncName(v string) {
	o.FuncName = &v
}

// GetPluginPath returns the PluginPath field value if set, zero value otherwise.
func (o *AnalyticsPluginConfig) GetPluginPath() string {
	if o == nil || IsNil(o.PluginPath) {
		var ret string
		return ret
	}
	return *o.PluginPath
}

// GetPluginPathOk returns a tuple with the PluginPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsPluginConfig) GetPluginPathOk() (*string, bool) {
	if o == nil || IsNil(o.PluginPath) {
		return nil, false
	}
	return o.PluginPath, true
}

// HasPluginPath returns a boolean if a field has been set.
func (o *AnalyticsPluginConfig) HasPluginPath() bool {
	if o != nil && !IsNil(o.PluginPath) {
		return true
	}

	return false
}

// SetPluginPath gets a reference to the given string and assigns it to the PluginPath field.
func (o *AnalyticsPluginConfig) SetPluginPath(v string) {
	o.PluginPath = &v
}

func (o AnalyticsPluginConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnalyticsPluginConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enable) {
		toSerialize["enable"] = o.Enable
	}
	if !IsNil(o.FuncName) {
		toSerialize["func_name"] = o.FuncName
	}
	if !IsNil(o.PluginPath) {
		toSerialize["plugin_path"] = o.PluginPath
	}
	return toSerialize, nil
}

type NullableAnalyticsPluginConfig struct {
	value *AnalyticsPluginConfig
	isSet bool
}

func (v NullableAnalyticsPluginConfig) Get() *AnalyticsPluginConfig {
	return v.value
}

func (v *NullableAnalyticsPluginConfig) Set(val *AnalyticsPluginConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyticsPluginConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyticsPluginConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyticsPluginConfig(val *AnalyticsPluginConfig) *NullableAnalyticsPluginConfig {
	return &NullableAnalyticsPluginConfig{value: val, isSet: true}
}

func (v NullableAnalyticsPluginConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyticsPluginConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


