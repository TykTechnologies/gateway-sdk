/*
Tyk Gateway API

 The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway

API version: 5.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the URLRewriteMeta type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &URLRewriteMeta{}

// URLRewriteMeta struct for URLRewriteMeta
type URLRewriteMeta struct {
	Disabled *bool `json:"disabled,omitempty"`
	MatchPattern *string `json:"match_pattern,omitempty"`
	Method *string `json:"method,omitempty"`
	Path *string `json:"path,omitempty"`
	RewriteTo *string `json:"rewrite_to,omitempty"`
	Triggers []RoutingTrigger `json:"triggers,omitempty"`
}

// NewURLRewriteMeta instantiates a new URLRewriteMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewURLRewriteMeta() *URLRewriteMeta {
	this := URLRewriteMeta{}
	return &this
}

// NewURLRewriteMetaWithDefaults instantiates a new URLRewriteMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewURLRewriteMetaWithDefaults() *URLRewriteMeta {
	this := URLRewriteMeta{}
	return &this
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *URLRewriteMeta) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *URLRewriteMeta) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *URLRewriteMeta) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *URLRewriteMeta) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetMatchPattern returns the MatchPattern field value if set, zero value otherwise.
func (o *URLRewriteMeta) GetMatchPattern() string {
	if o == nil || IsNil(o.MatchPattern) {
		var ret string
		return ret
	}
	return *o.MatchPattern
}

// GetMatchPatternOk returns a tuple with the MatchPattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *URLRewriteMeta) GetMatchPatternOk() (*string, bool) {
	if o == nil || IsNil(o.MatchPattern) {
		return nil, false
	}
	return o.MatchPattern, true
}

// HasMatchPattern returns a boolean if a field has been set.
func (o *URLRewriteMeta) HasMatchPattern() bool {
	if o != nil && !IsNil(o.MatchPattern) {
		return true
	}

	return false
}

// SetMatchPattern gets a reference to the given string and assigns it to the MatchPattern field.
func (o *URLRewriteMeta) SetMatchPattern(v string) {
	o.MatchPattern = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *URLRewriteMeta) GetMethod() string {
	if o == nil || IsNil(o.Method) {
		var ret string
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *URLRewriteMeta) GetMethodOk() (*string, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *URLRewriteMeta) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given string and assigns it to the Method field.
func (o *URLRewriteMeta) SetMethod(v string) {
	o.Method = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *URLRewriteMeta) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *URLRewriteMeta) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *URLRewriteMeta) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *URLRewriteMeta) SetPath(v string) {
	o.Path = &v
}

// GetRewriteTo returns the RewriteTo field value if set, zero value otherwise.
func (o *URLRewriteMeta) GetRewriteTo() string {
	if o == nil || IsNil(o.RewriteTo) {
		var ret string
		return ret
	}
	return *o.RewriteTo
}

// GetRewriteToOk returns a tuple with the RewriteTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *URLRewriteMeta) GetRewriteToOk() (*string, bool) {
	if o == nil || IsNil(o.RewriteTo) {
		return nil, false
	}
	return o.RewriteTo, true
}

// HasRewriteTo returns a boolean if a field has been set.
func (o *URLRewriteMeta) HasRewriteTo() bool {
	if o != nil && !IsNil(o.RewriteTo) {
		return true
	}

	return false
}

// SetRewriteTo gets a reference to the given string and assigns it to the RewriteTo field.
func (o *URLRewriteMeta) SetRewriteTo(v string) {
	o.RewriteTo = &v
}

// GetTriggers returns the Triggers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *URLRewriteMeta) GetTriggers() []RoutingTrigger {
	if o == nil {
		var ret []RoutingTrigger
		return ret
	}
	return o.Triggers
}

// GetTriggersOk returns a tuple with the Triggers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *URLRewriteMeta) GetTriggersOk() ([]RoutingTrigger, bool) {
	if o == nil || IsNil(o.Triggers) {
		return nil, false
	}
	return o.Triggers, true
}

// HasTriggers returns a boolean if a field has been set.
func (o *URLRewriteMeta) HasTriggers() bool {
	if o != nil && !IsNil(o.Triggers) {
		return true
	}

	return false
}

// SetTriggers gets a reference to the given []RoutingTrigger and assigns it to the Triggers field.
func (o *URLRewriteMeta) SetTriggers(v []RoutingTrigger) {
	o.Triggers = v
}

func (o URLRewriteMeta) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o URLRewriteMeta) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.MatchPattern) {
		toSerialize["match_pattern"] = o.MatchPattern
	}
	if !IsNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.RewriteTo) {
		toSerialize["rewrite_to"] = o.RewriteTo
	}
	if o.Triggers != nil {
		toSerialize["triggers"] = o.Triggers
	}
	return toSerialize, nil
}

type NullableURLRewriteMeta struct {
	value *URLRewriteMeta
	isSet bool
}

func (v NullableURLRewriteMeta) Get() *URLRewriteMeta {
	return v.value
}

func (v *NullableURLRewriteMeta) Set(val *URLRewriteMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableURLRewriteMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableURLRewriteMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableURLRewriteMeta(val *URLRewriteMeta) *NullableURLRewriteMeta {
	return &NullableURLRewriteMeta{value: val, isSet: true}
}

func (v NullableURLRewriteMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableURLRewriteMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


