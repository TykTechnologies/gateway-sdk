/*
Tyk Gateway API

The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.  **Warning: Under no circumstances should outside parties be granted access to this API.**  The Tyk Gateway API is capable of:  * Managing session objects (key generation). * Managing and listing policies. * Managing and listing API Definitions (only when not using the Tyk Dashboard). * Hot reloads / reloading a cluster configuration. * OAuth client creation (only when not using the Tyk Dashboard).  In order to use the Gateway API, you'll need to set the **secret** parameter in your tyk.conf file.  The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:  **x-tyk-authorization: <your-secret>*** <br/>  <b>The Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.</b>

API version: 5.7.1
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the RateLimitEndpoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RateLimitEndpoint{}

// RateLimitEndpoint struct for RateLimitEndpoint
type RateLimitEndpoint struct {
	Enabled *bool  `json:"enabled,omitempty"`
	Per     *int32 `json:"per,omitempty"`
	Rate    *int32 `json:"rate,omitempty"`
}

// NewRateLimitEndpoint instantiates a new RateLimitEndpoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRateLimitEndpoint() *RateLimitEndpoint {
	this := RateLimitEndpoint{}
	return &this
}

// NewRateLimitEndpointWithDefaults instantiates a new RateLimitEndpoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRateLimitEndpointWithDefaults() *RateLimitEndpoint {
	this := RateLimitEndpoint{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *RateLimitEndpoint) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateLimitEndpoint) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *RateLimitEndpoint) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *RateLimitEndpoint) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetPer returns the Per field value if set, zero value otherwise.
func (o *RateLimitEndpoint) GetPer() int32 {
	if o == nil || IsNil(o.Per) {
		var ret int32
		return ret
	}
	return *o.Per
}

// GetPerOk returns a tuple with the Per field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateLimitEndpoint) GetPerOk() (*int32, bool) {
	if o == nil || IsNil(o.Per) {
		return nil, false
	}
	return o.Per, true
}

// HasPer returns a boolean if a field has been set.
func (o *RateLimitEndpoint) HasPer() bool {
	if o != nil && !IsNil(o.Per) {
		return true
	}

	return false
}

// SetPer gets a reference to the given int32 and assigns it to the Per field.
func (o *RateLimitEndpoint) SetPer(v int32) {
	o.Per = &v
}

// GetRate returns the Rate field value if set, zero value otherwise.
func (o *RateLimitEndpoint) GetRate() int32 {
	if o == nil || IsNil(o.Rate) {
		var ret int32
		return ret
	}
	return *o.Rate
}

// GetRateOk returns a tuple with the Rate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateLimitEndpoint) GetRateOk() (*int32, bool) {
	if o == nil || IsNil(o.Rate) {
		return nil, false
	}
	return o.Rate, true
}

// HasRate returns a boolean if a field has been set.
func (o *RateLimitEndpoint) HasRate() bool {
	if o != nil && !IsNil(o.Rate) {
		return true
	}

	return false
}

// SetRate gets a reference to the given int32 and assigns it to the Rate field.
func (o *RateLimitEndpoint) SetRate(v int32) {
	o.Rate = &v
}

func (o RateLimitEndpoint) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RateLimitEndpoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Per) {
		toSerialize["per"] = o.Per
	}
	if !IsNil(o.Rate) {
		toSerialize["rate"] = o.Rate
	}
	return toSerialize, nil
}

type NullableRateLimitEndpoint struct {
	value *RateLimitEndpoint
	isSet bool
}

func (v NullableRateLimitEndpoint) Get() *RateLimitEndpoint {
	return v.value
}

func (v *NullableRateLimitEndpoint) Set(val *RateLimitEndpoint) {
	v.value = val
	v.isSet = true
}

func (v NullableRateLimitEndpoint) IsSet() bool {
	return v.isSet
}

func (v *NullableRateLimitEndpoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRateLimitEndpoint(val *RateLimitEndpoint) *NullableRateLimitEndpoint {
	return &NullableRateLimitEndpoint{value: val, isSet: true}
}

func (v NullableRateLimitEndpoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRateLimitEndpoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
