/*
Tyk Gateway API

The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.  **Warning: Under no circumstances should outside parties be granted access to this API.**  The Tyk Gateway API is capable of:  * Managing session objects (key generation). * Managing and listing policies. * Managing and listing API Definitions (only when not using the Tyk Dashboard). * Hot reloads / reloading a cluster configuration. * OAuth client creation (only when not using the Tyk Dashboard).  In order to use the Gateway API, you'll need to set the **secret** parameter in your tyk.conf file.  The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:  **x-tyk-authorization: <your-secret>*** <br/>  <b>The Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.</b>

API version: 5.7.1
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the PaginationStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaginationStatus{}

// PaginationStatus struct for PaginationStatus
type PaginationStatus struct {
	PageNum   *int32 `json:"page_num,omitempty"`
	PageSize  *int32 `json:"page_size,omitempty"`
	PageTotal *int32 `json:"page_total,omitempty"`
}

// NewPaginationStatus instantiates a new PaginationStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaginationStatus() *PaginationStatus {
	this := PaginationStatus{}
	return &this
}

// NewPaginationStatusWithDefaults instantiates a new PaginationStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaginationStatusWithDefaults() *PaginationStatus {
	this := PaginationStatus{}
	return &this
}

// GetPageNum returns the PageNum field value if set, zero value otherwise.
func (o *PaginationStatus) GetPageNum() int32 {
	if o == nil || IsNil(o.PageNum) {
		var ret int32
		return ret
	}
	return *o.PageNum
}

// GetPageNumOk returns a tuple with the PageNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginationStatus) GetPageNumOk() (*int32, bool) {
	if o == nil || IsNil(o.PageNum) {
		return nil, false
	}
	return o.PageNum, true
}

// HasPageNum returns a boolean if a field has been set.
func (o *PaginationStatus) HasPageNum() bool {
	if o != nil && !IsNil(o.PageNum) {
		return true
	}

	return false
}

// SetPageNum gets a reference to the given int32 and assigns it to the PageNum field.
func (o *PaginationStatus) SetPageNum(v int32) {
	o.PageNum = &v
}

// GetPageSize returns the PageSize field value if set, zero value otherwise.
func (o *PaginationStatus) GetPageSize() int32 {
	if o == nil || IsNil(o.PageSize) {
		var ret int32
		return ret
	}
	return *o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginationStatus) GetPageSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.PageSize) {
		return nil, false
	}
	return o.PageSize, true
}

// HasPageSize returns a boolean if a field has been set.
func (o *PaginationStatus) HasPageSize() bool {
	if o != nil && !IsNil(o.PageSize) {
		return true
	}

	return false
}

// SetPageSize gets a reference to the given int32 and assigns it to the PageSize field.
func (o *PaginationStatus) SetPageSize(v int32) {
	o.PageSize = &v
}

// GetPageTotal returns the PageTotal field value if set, zero value otherwise.
func (o *PaginationStatus) GetPageTotal() int32 {
	if o == nil || IsNil(o.PageTotal) {
		var ret int32
		return ret
	}
	return *o.PageTotal
}

// GetPageTotalOk returns a tuple with the PageTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginationStatus) GetPageTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.PageTotal) {
		return nil, false
	}
	return o.PageTotal, true
}

// HasPageTotal returns a boolean if a field has been set.
func (o *PaginationStatus) HasPageTotal() bool {
	if o != nil && !IsNil(o.PageTotal) {
		return true
	}

	return false
}

// SetPageTotal gets a reference to the given int32 and assigns it to the PageTotal field.
func (o *PaginationStatus) SetPageTotal(v int32) {
	o.PageTotal = &v
}

func (o PaginationStatus) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaginationStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PageNum) {
		toSerialize["page_num"] = o.PageNum
	}
	if !IsNil(o.PageSize) {
		toSerialize["page_size"] = o.PageSize
	}
	if !IsNil(o.PageTotal) {
		toSerialize["page_total"] = o.PageTotal
	}
	return toSerialize, nil
}

type NullablePaginationStatus struct {
	value *PaginationStatus
	isSet bool
}

func (v NullablePaginationStatus) Get() *PaginationStatus {
	return v.value
}

func (v *NullablePaginationStatus) Set(val *PaginationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePaginationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePaginationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaginationStatus(val *PaginationStatus) *NullablePaginationStatus {
	return &NullablePaginationStatus{value: val, isSet: true}
}

func (v NullablePaginationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaginationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
