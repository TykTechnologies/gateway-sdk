/*
Tyk Gateway API

The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.  **Warning: Under no circumstances should outside parties be granted access to this API.**  The Tyk Gateway API is capable of:  * Managing session objects (key generation). * Managing and listing policies. * Managing and listing API Definitions (only when not using the Tyk Dashboard). * Hot reloads / reloading a cluster configuration. * OAuth client creation (only when not using the Tyk Dashboard).  In order to use the Gateway API, you'll need to set the **secret** parameter in your tyk.conf file.  The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:  **x-tyk-authorization: <your-secret>*** <br/>  <b>The Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.</b>

API version: 5.7.1
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the DatasourceSourceConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatasourceSourceConfig{}

// DatasourceSourceConfig struct for DatasourceSourceConfig
type DatasourceSourceConfig struct {
	DataSourceConfig interface{} `json:"data_source_config,omitempty"`
	Kind             *string     `json:"kind,omitempty"`
}

// NewDatasourceSourceConfig instantiates a new DatasourceSourceConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatasourceSourceConfig() *DatasourceSourceConfig {
	this := DatasourceSourceConfig{}
	return &this
}

// NewDatasourceSourceConfigWithDefaults instantiates a new DatasourceSourceConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatasourceSourceConfigWithDefaults() *DatasourceSourceConfig {
	this := DatasourceSourceConfig{}
	return &this
}

// GetDataSourceConfig returns the DataSourceConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DatasourceSourceConfig) GetDataSourceConfig() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.DataSourceConfig
}

// GetDataSourceConfigOk returns a tuple with the DataSourceConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DatasourceSourceConfig) GetDataSourceConfigOk() (*interface{}, bool) {
	if o == nil || IsNil(o.DataSourceConfig) {
		return nil, false
	}
	return &o.DataSourceConfig, true
}

// HasDataSourceConfig returns a boolean if a field has been set.
func (o *DatasourceSourceConfig) HasDataSourceConfig() bool {
	if o != nil && !IsNil(o.DataSourceConfig) {
		return true
	}

	return false
}

// SetDataSourceConfig gets a reference to the given interface{} and assigns it to the DataSourceConfig field.
func (o *DatasourceSourceConfig) SetDataSourceConfig(v interface{}) {
	o.DataSourceConfig = v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *DatasourceSourceConfig) GetKind() string {
	if o == nil || IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSourceConfig) GetKindOk() (*string, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *DatasourceSourceConfig) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *DatasourceSourceConfig) SetKind(v string) {
	o.Kind = &v
}

func (o DatasourceSourceConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatasourceSourceConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DataSourceConfig != nil {
		toSerialize["data_source_config"] = o.DataSourceConfig
	}
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	return toSerialize, nil
}

type NullableDatasourceSourceConfig struct {
	value *DatasourceSourceConfig
	isSet bool
}

func (v NullableDatasourceSourceConfig) Get() *DatasourceSourceConfig {
	return v.value
}

func (v *NullableDatasourceSourceConfig) Set(val *DatasourceSourceConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableDatasourceSourceConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableDatasourceSourceConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatasourceSourceConfig(val *DatasourceSourceConfig) *NullableDatasourceSourceConfig {
	return &NullableDatasourceSourceConfig{value: val, isSet: true}
}

func (v NullableDatasourceSourceConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatasourceSourceConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
