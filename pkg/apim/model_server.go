/*
Tyk Gateway API

The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.  **Warning: Under no circumstances should outside parties be granted access to this API.**  The Tyk Gateway API is capable of:  * Managing session objects (key generation). * Managing and listing policies. * Managing and listing API Definitions (only when not using the Tyk Dashboard). * Hot reloads / reloading a cluster configuration. * OAuth client creation (only when not using the Tyk Dashboard).  In order to use the Gateway API, you'll need to set the **secret** parameter in your tyk.conf file.  The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:  **x-tyk-authorization: <your-secret>*** <br/>  <b>The Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.</b>

API version: 5.7.1
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the Server type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Server{}

// Server struct for Server
type Server struct {
	Authentication       *Authentication       `json:"authentication,omitempty"`
	ClientCertificates   *ClientCertificates   `json:"clientCertificates,omitempty"`
	CustomDomain         *Domain               `json:"customDomain,omitempty"`
	DetailedActivityLogs *DetailedActivityLogs `json:"detailedActivityLogs,omitempty"`
	DetailedTracing      *DetailedTracing      `json:"detailedTracing,omitempty"`
	EventHandlers        []EventHandler        `json:"eventHandlers,omitempty"`
	GatewayTags          *GatewayTags          `json:"gatewayTags,omitempty"`
	ListenPath           *ListenPath           `json:"listenPath,omitempty"`
}

// NewServer instantiates a new Server object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServer() *Server {
	this := Server{}
	return &this
}

// NewServerWithDefaults instantiates a new Server object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerWithDefaults() *Server {
	this := Server{}
	return &this
}

// GetAuthentication returns the Authentication field value if set, zero value otherwise.
func (o *Server) GetAuthentication() Authentication {
	if o == nil || IsNil(o.Authentication) {
		var ret Authentication
		return ret
	}
	return *o.Authentication
}

// GetAuthenticationOk returns a tuple with the Authentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetAuthenticationOk() (*Authentication, bool) {
	if o == nil || IsNil(o.Authentication) {
		return nil, false
	}
	return o.Authentication, true
}

// HasAuthentication returns a boolean if a field has been set.
func (o *Server) HasAuthentication() bool {
	if o != nil && !IsNil(o.Authentication) {
		return true
	}

	return false
}

// SetAuthentication gets a reference to the given Authentication and assigns it to the Authentication field.
func (o *Server) SetAuthentication(v Authentication) {
	o.Authentication = &v
}

// GetClientCertificates returns the ClientCertificates field value if set, zero value otherwise.
func (o *Server) GetClientCertificates() ClientCertificates {
	if o == nil || IsNil(o.ClientCertificates) {
		var ret ClientCertificates
		return ret
	}
	return *o.ClientCertificates
}

// GetClientCertificatesOk returns a tuple with the ClientCertificates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetClientCertificatesOk() (*ClientCertificates, bool) {
	if o == nil || IsNil(o.ClientCertificates) {
		return nil, false
	}
	return o.ClientCertificates, true
}

// HasClientCertificates returns a boolean if a field has been set.
func (o *Server) HasClientCertificates() bool {
	if o != nil && !IsNil(o.ClientCertificates) {
		return true
	}

	return false
}

// SetClientCertificates gets a reference to the given ClientCertificates and assigns it to the ClientCertificates field.
func (o *Server) SetClientCertificates(v ClientCertificates) {
	o.ClientCertificates = &v
}

// GetCustomDomain returns the CustomDomain field value if set, zero value otherwise.
func (o *Server) GetCustomDomain() Domain {
	if o == nil || IsNil(o.CustomDomain) {
		var ret Domain
		return ret
	}
	return *o.CustomDomain
}

// GetCustomDomainOk returns a tuple with the CustomDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetCustomDomainOk() (*Domain, bool) {
	if o == nil || IsNil(o.CustomDomain) {
		return nil, false
	}
	return o.CustomDomain, true
}

// HasCustomDomain returns a boolean if a field has been set.
func (o *Server) HasCustomDomain() bool {
	if o != nil && !IsNil(o.CustomDomain) {
		return true
	}

	return false
}

// SetCustomDomain gets a reference to the given Domain and assigns it to the CustomDomain field.
func (o *Server) SetCustomDomain(v Domain) {
	o.CustomDomain = &v
}

// GetDetailedActivityLogs returns the DetailedActivityLogs field value if set, zero value otherwise.
func (o *Server) GetDetailedActivityLogs() DetailedActivityLogs {
	if o == nil || IsNil(o.DetailedActivityLogs) {
		var ret DetailedActivityLogs
		return ret
	}
	return *o.DetailedActivityLogs
}

// GetDetailedActivityLogsOk returns a tuple with the DetailedActivityLogs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetDetailedActivityLogsOk() (*DetailedActivityLogs, bool) {
	if o == nil || IsNil(o.DetailedActivityLogs) {
		return nil, false
	}
	return o.DetailedActivityLogs, true
}

// HasDetailedActivityLogs returns a boolean if a field has been set.
func (o *Server) HasDetailedActivityLogs() bool {
	if o != nil && !IsNil(o.DetailedActivityLogs) {
		return true
	}

	return false
}

// SetDetailedActivityLogs gets a reference to the given DetailedActivityLogs and assigns it to the DetailedActivityLogs field.
func (o *Server) SetDetailedActivityLogs(v DetailedActivityLogs) {
	o.DetailedActivityLogs = &v
}

// GetDetailedTracing returns the DetailedTracing field value if set, zero value otherwise.
func (o *Server) GetDetailedTracing() DetailedTracing {
	if o == nil || IsNil(o.DetailedTracing) {
		var ret DetailedTracing
		return ret
	}
	return *o.DetailedTracing
}

// GetDetailedTracingOk returns a tuple with the DetailedTracing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetDetailedTracingOk() (*DetailedTracing, bool) {
	if o == nil || IsNil(o.DetailedTracing) {
		return nil, false
	}
	return o.DetailedTracing, true
}

// HasDetailedTracing returns a boolean if a field has been set.
func (o *Server) HasDetailedTracing() bool {
	if o != nil && !IsNil(o.DetailedTracing) {
		return true
	}

	return false
}

// SetDetailedTracing gets a reference to the given DetailedTracing and assigns it to the DetailedTracing field.
func (o *Server) SetDetailedTracing(v DetailedTracing) {
	o.DetailedTracing = &v
}

// GetEventHandlers returns the EventHandlers field value if set, zero value otherwise.
func (o *Server) GetEventHandlers() []EventHandler {
	if o == nil || IsNil(o.EventHandlers) {
		var ret []EventHandler
		return ret
	}
	return o.EventHandlers
}

// GetEventHandlersOk returns a tuple with the EventHandlers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetEventHandlersOk() ([]EventHandler, bool) {
	if o == nil || IsNil(o.EventHandlers) {
		return nil, false
	}
	return o.EventHandlers, true
}

// HasEventHandlers returns a boolean if a field has been set.
func (o *Server) HasEventHandlers() bool {
	if o != nil && !IsNil(o.EventHandlers) {
		return true
	}

	return false
}

// SetEventHandlers gets a reference to the given []EventHandler and assigns it to the EventHandlers field.
func (o *Server) SetEventHandlers(v []EventHandler) {
	o.EventHandlers = v
}

// GetGatewayTags returns the GatewayTags field value if set, zero value otherwise.
func (o *Server) GetGatewayTags() GatewayTags {
	if o == nil || IsNil(o.GatewayTags) {
		var ret GatewayTags
		return ret
	}
	return *o.GatewayTags
}

// GetGatewayTagsOk returns a tuple with the GatewayTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetGatewayTagsOk() (*GatewayTags, bool) {
	if o == nil || IsNil(o.GatewayTags) {
		return nil, false
	}
	return o.GatewayTags, true
}

// HasGatewayTags returns a boolean if a field has been set.
func (o *Server) HasGatewayTags() bool {
	if o != nil && !IsNil(o.GatewayTags) {
		return true
	}

	return false
}

// SetGatewayTags gets a reference to the given GatewayTags and assigns it to the GatewayTags field.
func (o *Server) SetGatewayTags(v GatewayTags) {
	o.GatewayTags = &v
}

// GetListenPath returns the ListenPath field value if set, zero value otherwise.
func (o *Server) GetListenPath() ListenPath {
	if o == nil || IsNil(o.ListenPath) {
		var ret ListenPath
		return ret
	}
	return *o.ListenPath
}

// GetListenPathOk returns a tuple with the ListenPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetListenPathOk() (*ListenPath, bool) {
	if o == nil || IsNil(o.ListenPath) {
		return nil, false
	}
	return o.ListenPath, true
}

// HasListenPath returns a boolean if a field has been set.
func (o *Server) HasListenPath() bool {
	if o != nil && !IsNil(o.ListenPath) {
		return true
	}

	return false
}

// SetListenPath gets a reference to the given ListenPath and assigns it to the ListenPath field.
func (o *Server) SetListenPath(v ListenPath) {
	o.ListenPath = &v
}

func (o Server) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Server) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Authentication) {
		toSerialize["authentication"] = o.Authentication
	}
	if !IsNil(o.ClientCertificates) {
		toSerialize["clientCertificates"] = o.ClientCertificates
	}
	if !IsNil(o.CustomDomain) {
		toSerialize["customDomain"] = o.CustomDomain
	}
	if !IsNil(o.DetailedActivityLogs) {
		toSerialize["detailedActivityLogs"] = o.DetailedActivityLogs
	}
	if !IsNil(o.DetailedTracing) {
		toSerialize["detailedTracing"] = o.DetailedTracing
	}
	if !IsNil(o.EventHandlers) {
		toSerialize["eventHandlers"] = o.EventHandlers
	}
	if !IsNil(o.GatewayTags) {
		toSerialize["gatewayTags"] = o.GatewayTags
	}
	if !IsNil(o.ListenPath) {
		toSerialize["listenPath"] = o.ListenPath
	}
	return toSerialize, nil
}

type NullableServer struct {
	value *Server
	isSet bool
}

func (v NullableServer) Get() *Server {
	return v.value
}

func (v *NullableServer) Set(val *Server) {
	v.value = val
	v.isSet = true
}

func (v NullableServer) IsSet() bool {
	return v.isSet
}

func (v *NullableServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServer(val *Server) *NullableServer {
	return &NullableServer{value: val, isSet: true}
}

func (v NullableServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
