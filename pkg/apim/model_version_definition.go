/*
Tyk Gateway API

 The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway

API version: 5.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the VersionDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VersionDefinition{}

// VersionDefinition struct for VersionDefinition
type VersionDefinition struct {
	Default *string `json:"default,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	FallbackToDefault *bool `json:"fallback_to_default,omitempty"`
	Key *string `json:"key,omitempty"`
	Location *string `json:"location,omitempty"`
	Name *string `json:"name,omitempty"`
	StripPath *bool `json:"strip_path,omitempty"`
	StripVersioningData *bool `json:"strip_versioning_data,omitempty"`
	Versions map[string]string `json:"versions,omitempty"`
}

// NewVersionDefinition instantiates a new VersionDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionDefinition() *VersionDefinition {
	this := VersionDefinition{}
	return &this
}

// NewVersionDefinitionWithDefaults instantiates a new VersionDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionDefinitionWithDefaults() *VersionDefinition {
	this := VersionDefinition{}
	return &this
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *VersionDefinition) GetDefault() string {
	if o == nil || IsNil(o.Default) {
		var ret string
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionDefinition) GetDefaultOk() (*string, bool) {
	if o == nil || IsNil(o.Default) {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *VersionDefinition) HasDefault() bool {
	if o != nil && !IsNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given string and assigns it to the Default field.
func (o *VersionDefinition) SetDefault(v string) {
	o.Default = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *VersionDefinition) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionDefinition) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *VersionDefinition) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *VersionDefinition) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetFallbackToDefault returns the FallbackToDefault field value if set, zero value otherwise.
func (o *VersionDefinition) GetFallbackToDefault() bool {
	if o == nil || IsNil(o.FallbackToDefault) {
		var ret bool
		return ret
	}
	return *o.FallbackToDefault
}

// GetFallbackToDefaultOk returns a tuple with the FallbackToDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionDefinition) GetFallbackToDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.FallbackToDefault) {
		return nil, false
	}
	return o.FallbackToDefault, true
}

// HasFallbackToDefault returns a boolean if a field has been set.
func (o *VersionDefinition) HasFallbackToDefault() bool {
	if o != nil && !IsNil(o.FallbackToDefault) {
		return true
	}

	return false
}

// SetFallbackToDefault gets a reference to the given bool and assigns it to the FallbackToDefault field.
func (o *VersionDefinition) SetFallbackToDefault(v bool) {
	o.FallbackToDefault = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *VersionDefinition) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionDefinition) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *VersionDefinition) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *VersionDefinition) SetKey(v string) {
	o.Key = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *VersionDefinition) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionDefinition) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *VersionDefinition) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *VersionDefinition) SetLocation(v string) {
	o.Location = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VersionDefinition) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionDefinition) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VersionDefinition) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VersionDefinition) SetName(v string) {
	o.Name = &v
}

// GetStripPath returns the StripPath field value if set, zero value otherwise.
func (o *VersionDefinition) GetStripPath() bool {
	if o == nil || IsNil(o.StripPath) {
		var ret bool
		return ret
	}
	return *o.StripPath
}

// GetStripPathOk returns a tuple with the StripPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionDefinition) GetStripPathOk() (*bool, bool) {
	if o == nil || IsNil(o.StripPath) {
		return nil, false
	}
	return o.StripPath, true
}

// HasStripPath returns a boolean if a field has been set.
func (o *VersionDefinition) HasStripPath() bool {
	if o != nil && !IsNil(o.StripPath) {
		return true
	}

	return false
}

// SetStripPath gets a reference to the given bool and assigns it to the StripPath field.
func (o *VersionDefinition) SetStripPath(v bool) {
	o.StripPath = &v
}

// GetStripVersioningData returns the StripVersioningData field value if set, zero value otherwise.
func (o *VersionDefinition) GetStripVersioningData() bool {
	if o == nil || IsNil(o.StripVersioningData) {
		var ret bool
		return ret
	}
	return *o.StripVersioningData
}

// GetStripVersioningDataOk returns a tuple with the StripVersioningData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionDefinition) GetStripVersioningDataOk() (*bool, bool) {
	if o == nil || IsNil(o.StripVersioningData) {
		return nil, false
	}
	return o.StripVersioningData, true
}

// HasStripVersioningData returns a boolean if a field has been set.
func (o *VersionDefinition) HasStripVersioningData() bool {
	if o != nil && !IsNil(o.StripVersioningData) {
		return true
	}

	return false
}

// SetStripVersioningData gets a reference to the given bool and assigns it to the StripVersioningData field.
func (o *VersionDefinition) SetStripVersioningData(v bool) {
	o.StripVersioningData = &v
}

// GetVersions returns the Versions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VersionDefinition) GetVersions() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VersionDefinition) GetVersionsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Versions) {
		return nil, false
	}
	return &o.Versions, true
}

// HasVersions returns a boolean if a field has been set.
func (o *VersionDefinition) HasVersions() bool {
	if o != nil && !IsNil(o.Versions) {
		return true
	}

	return false
}

// SetVersions gets a reference to the given map[string]string and assigns it to the Versions field.
func (o *VersionDefinition) SetVersions(v map[string]string) {
	o.Versions = v
}

func (o VersionDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VersionDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Default) {
		toSerialize["default"] = o.Default
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.FallbackToDefault) {
		toSerialize["fallback_to_default"] = o.FallbackToDefault
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.StripPath) {
		toSerialize["strip_path"] = o.StripPath
	}
	if !IsNil(o.StripVersioningData) {
		toSerialize["strip_versioning_data"] = o.StripVersioningData
	}
	if o.Versions != nil {
		toSerialize["versions"] = o.Versions
	}
	return toSerialize, nil
}

type NullableVersionDefinition struct {
	value *VersionDefinition
	isSet bool
}

func (v NullableVersionDefinition) Get() *VersionDefinition {
	return v.value
}

func (v *NullableVersionDefinition) Set(val *VersionDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionDefinition(val *VersionDefinition) *NullableVersionDefinition {
	return &NullableVersionDefinition{value: val, isSet: true}
}

func (v NullableVersionDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


