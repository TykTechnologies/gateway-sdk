/*
Tyk Gateway API

The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.  **Warning: Under no circumstances should outside parties be granted access to this API.**  The Tyk Gateway API is capable of:  * Managing session objects (key generation) * Managing and listing policies * Managing and listing API Definitions (only when not using the Dashboard) * Hot reloads / reloading a cluster configuration * OAuth client creation (only when not using the Dashboard)   In order to use the Gateway API, you'll need to set the `secret` parameter in your tyk.conf file.  The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:  ``` x-tyk-authorization: <your-secret> ``` <br/> <b>The Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.</b>

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the APIVersionMeta type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &APIVersionMeta{}

// APIVersionMeta API version meta
type APIVersionMeta struct {
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	VersionName *string `json:"versionName,omitempty"`
	Internal *bool `json:"internal,omitempty"`
	ExpirationDate *string `json:"expirationDate,omitempty"`
	IsDefaultVersion *bool `json:"isDefaultVersion,omitempty"`
}

// NewAPIVersionMeta instantiates a new APIVersionMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAPIVersionMeta() *APIVersionMeta {
	this := APIVersionMeta{}
	return &this
}

// NewAPIVersionMetaWithDefaults instantiates a new APIVersionMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAPIVersionMetaWithDefaults() *APIVersionMeta {
	this := APIVersionMeta{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *APIVersionMeta) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIVersionMeta) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *APIVersionMeta) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *APIVersionMeta) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *APIVersionMeta) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIVersionMeta) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *APIVersionMeta) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *APIVersionMeta) SetName(v string) {
	o.Name = &v
}

// GetVersionName returns the VersionName field value if set, zero value otherwise.
func (o *APIVersionMeta) GetVersionName() string {
	if o == nil || IsNil(o.VersionName) {
		var ret string
		return ret
	}
	return *o.VersionName
}

// GetVersionNameOk returns a tuple with the VersionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIVersionMeta) GetVersionNameOk() (*string, bool) {
	if o == nil || IsNil(o.VersionName) {
		return nil, false
	}
	return o.VersionName, true
}

// HasVersionName returns a boolean if a field has been set.
func (o *APIVersionMeta) HasVersionName() bool {
	if o != nil && !IsNil(o.VersionName) {
		return true
	}

	return false
}

// SetVersionName gets a reference to the given string and assigns it to the VersionName field.
func (o *APIVersionMeta) SetVersionName(v string) {
	o.VersionName = &v
}

// GetInternal returns the Internal field value if set, zero value otherwise.
func (o *APIVersionMeta) GetInternal() bool {
	if o == nil || IsNil(o.Internal) {
		var ret bool
		return ret
	}
	return *o.Internal
}

// GetInternalOk returns a tuple with the Internal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIVersionMeta) GetInternalOk() (*bool, bool) {
	if o == nil || IsNil(o.Internal) {
		return nil, false
	}
	return o.Internal, true
}

// HasInternal returns a boolean if a field has been set.
func (o *APIVersionMeta) HasInternal() bool {
	if o != nil && !IsNil(o.Internal) {
		return true
	}

	return false
}

// SetInternal gets a reference to the given bool and assigns it to the Internal field.
func (o *APIVersionMeta) SetInternal(v bool) {
	o.Internal = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *APIVersionMeta) GetExpirationDate() string {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret string
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIVersionMeta) GetExpirationDateOk() (*string, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *APIVersionMeta) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given string and assigns it to the ExpirationDate field.
func (o *APIVersionMeta) SetExpirationDate(v string) {
	o.ExpirationDate = &v
}

// GetIsDefaultVersion returns the IsDefaultVersion field value if set, zero value otherwise.
func (o *APIVersionMeta) GetIsDefaultVersion() bool {
	if o == nil || IsNil(o.IsDefaultVersion) {
		var ret bool
		return ret
	}
	return *o.IsDefaultVersion
}

// GetIsDefaultVersionOk returns a tuple with the IsDefaultVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIVersionMeta) GetIsDefaultVersionOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDefaultVersion) {
		return nil, false
	}
	return o.IsDefaultVersion, true
}

// HasIsDefaultVersion returns a boolean if a field has been set.
func (o *APIVersionMeta) HasIsDefaultVersion() bool {
	if o != nil && !IsNil(o.IsDefaultVersion) {
		return true
	}

	return false
}

// SetIsDefaultVersion gets a reference to the given bool and assigns it to the IsDefaultVersion field.
func (o *APIVersionMeta) SetIsDefaultVersion(v bool) {
	o.IsDefaultVersion = &v
}

func (o APIVersionMeta) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o APIVersionMeta) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.VersionName) {
		toSerialize["versionName"] = o.VersionName
	}
	if !IsNil(o.Internal) {
		toSerialize["internal"] = o.Internal
	}
	if !IsNil(o.ExpirationDate) {
		toSerialize["expirationDate"] = o.ExpirationDate
	}
	if !IsNil(o.IsDefaultVersion) {
		toSerialize["isDefaultVersion"] = o.IsDefaultVersion
	}
	return toSerialize, nil
}

type NullableAPIVersionMeta struct {
	value *APIVersionMeta
	isSet bool
}

func (v NullableAPIVersionMeta) Get() *APIVersionMeta {
	return v.value
}

func (v *NullableAPIVersionMeta) Set(val *APIVersionMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableAPIVersionMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableAPIVersionMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAPIVersionMeta(val *APIVersionMeta) *NullableAPIVersionMeta {
	return &NullableAPIVersionMeta{value: val, isSet: true}
}

func (v NullableAPIVersionMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAPIVersionMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


