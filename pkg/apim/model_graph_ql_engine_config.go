/*
Tyk Gateway API

The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.  **Warning: Under no circumstances should outside parties be granted access to this API.**  The Tyk Gateway API is capable of:  * Managing session objects (key generation). * Managing and listing policies. * Managing and listing API Definitions (only when not using the Tyk Dashboard). * Hot reloads / reloading a cluster configuration. * OAuth client creation (only when not using the Tyk Dashboard).  In order to use the Gateway API, you'll need to set the **secret** parameter in your tyk.conf file.  The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:  **x-tyk-authorization: <your-secret>*** <br/>  <b>The Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.</b>

API version: 5.7.1
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the GraphQLEngineConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GraphQLEngineConfig{}

// GraphQLEngineConfig struct for GraphQLEngineConfig
type GraphQLEngineConfig struct {
	DataSources   []GraphQLEngineDataSource `json:"data_sources,omitempty"`
	FieldConfigs  []GraphQLFieldConfig      `json:"field_configs,omitempty"`
	GlobalHeaders []UDGGlobalHeader         `json:"global_headers,omitempty"`
}

// NewGraphQLEngineConfig instantiates a new GraphQLEngineConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGraphQLEngineConfig() *GraphQLEngineConfig {
	this := GraphQLEngineConfig{}
	return &this
}

// NewGraphQLEngineConfigWithDefaults instantiates a new GraphQLEngineConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGraphQLEngineConfigWithDefaults() *GraphQLEngineConfig {
	this := GraphQLEngineConfig{}
	return &this
}

// GetDataSources returns the DataSources field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GraphQLEngineConfig) GetDataSources() []GraphQLEngineDataSource {
	if o == nil {
		var ret []GraphQLEngineDataSource
		return ret
	}
	return o.DataSources
}

// GetDataSourcesOk returns a tuple with the DataSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GraphQLEngineConfig) GetDataSourcesOk() ([]GraphQLEngineDataSource, bool) {
	if o == nil || IsNil(o.DataSources) {
		return nil, false
	}
	return o.DataSources, true
}

// HasDataSources returns a boolean if a field has been set.
func (o *GraphQLEngineConfig) HasDataSources() bool {
	if o != nil && !IsNil(o.DataSources) {
		return true
	}

	return false
}

// SetDataSources gets a reference to the given []GraphQLEngineDataSource and assigns it to the DataSources field.
func (o *GraphQLEngineConfig) SetDataSources(v []GraphQLEngineDataSource) {
	o.DataSources = v
}

// GetFieldConfigs returns the FieldConfigs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GraphQLEngineConfig) GetFieldConfigs() []GraphQLFieldConfig {
	if o == nil {
		var ret []GraphQLFieldConfig
		return ret
	}
	return o.FieldConfigs
}

// GetFieldConfigsOk returns a tuple with the FieldConfigs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GraphQLEngineConfig) GetFieldConfigsOk() ([]GraphQLFieldConfig, bool) {
	if o == nil || IsNil(o.FieldConfigs) {
		return nil, false
	}
	return o.FieldConfigs, true
}

// HasFieldConfigs returns a boolean if a field has been set.
func (o *GraphQLEngineConfig) HasFieldConfigs() bool {
	if o != nil && !IsNil(o.FieldConfigs) {
		return true
	}

	return false
}

// SetFieldConfigs gets a reference to the given []GraphQLFieldConfig and assigns it to the FieldConfigs field.
func (o *GraphQLEngineConfig) SetFieldConfigs(v []GraphQLFieldConfig) {
	o.FieldConfigs = v
}

// GetGlobalHeaders returns the GlobalHeaders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GraphQLEngineConfig) GetGlobalHeaders() []UDGGlobalHeader {
	if o == nil {
		var ret []UDGGlobalHeader
		return ret
	}
	return o.GlobalHeaders
}

// GetGlobalHeadersOk returns a tuple with the GlobalHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GraphQLEngineConfig) GetGlobalHeadersOk() ([]UDGGlobalHeader, bool) {
	if o == nil || IsNil(o.GlobalHeaders) {
		return nil, false
	}
	return o.GlobalHeaders, true
}

// HasGlobalHeaders returns a boolean if a field has been set.
func (o *GraphQLEngineConfig) HasGlobalHeaders() bool {
	if o != nil && !IsNil(o.GlobalHeaders) {
		return true
	}

	return false
}

// SetGlobalHeaders gets a reference to the given []UDGGlobalHeader and assigns it to the GlobalHeaders field.
func (o *GraphQLEngineConfig) SetGlobalHeaders(v []UDGGlobalHeader) {
	o.GlobalHeaders = v
}

func (o GraphQLEngineConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GraphQLEngineConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DataSources != nil {
		toSerialize["data_sources"] = o.DataSources
	}
	if o.FieldConfigs != nil {
		toSerialize["field_configs"] = o.FieldConfigs
	}
	if o.GlobalHeaders != nil {
		toSerialize["global_headers"] = o.GlobalHeaders
	}
	return toSerialize, nil
}

type NullableGraphQLEngineConfig struct {
	value *GraphQLEngineConfig
	isSet bool
}

func (v NullableGraphQLEngineConfig) Get() *GraphQLEngineConfig {
	return v.value
}

func (v *NullableGraphQLEngineConfig) Set(val *GraphQLEngineConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableGraphQLEngineConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableGraphQLEngineConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGraphQLEngineConfig(val *GraphQLEngineConfig) *NullableGraphQLEngineConfig {
	return &NullableGraphQLEngineConfig{value: val, isSet: true}
}

func (v NullableGraphQLEngineConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGraphQLEngineConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
