/*
Tyk Gateway API

 The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway

API version: 5.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the NotificationsManager type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationsManager{}

// NotificationsManager struct for NotificationsManager
type NotificationsManager struct {
	OauthOnKeychangeUrl *string `json:"oauth_on_keychange_url,omitempty"`
	SharedSecret *string `json:"shared_secret,omitempty"`
}

// NewNotificationsManager instantiates a new NotificationsManager object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationsManager() *NotificationsManager {
	this := NotificationsManager{}
	return &this
}

// NewNotificationsManagerWithDefaults instantiates a new NotificationsManager object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationsManagerWithDefaults() *NotificationsManager {
	this := NotificationsManager{}
	return &this
}

// GetOauthOnKeychangeUrl returns the OauthOnKeychangeUrl field value if set, zero value otherwise.
func (o *NotificationsManager) GetOauthOnKeychangeUrl() string {
	if o == nil || IsNil(o.OauthOnKeychangeUrl) {
		var ret string
		return ret
	}
	return *o.OauthOnKeychangeUrl
}

// GetOauthOnKeychangeUrlOk returns a tuple with the OauthOnKeychangeUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationsManager) GetOauthOnKeychangeUrlOk() (*string, bool) {
	if o == nil || IsNil(o.OauthOnKeychangeUrl) {
		return nil, false
	}
	return o.OauthOnKeychangeUrl, true
}

// HasOauthOnKeychangeUrl returns a boolean if a field has been set.
func (o *NotificationsManager) HasOauthOnKeychangeUrl() bool {
	if o != nil && !IsNil(o.OauthOnKeychangeUrl) {
		return true
	}

	return false
}

// SetOauthOnKeychangeUrl gets a reference to the given string and assigns it to the OauthOnKeychangeUrl field.
func (o *NotificationsManager) SetOauthOnKeychangeUrl(v string) {
	o.OauthOnKeychangeUrl = &v
}

// GetSharedSecret returns the SharedSecret field value if set, zero value otherwise.
func (o *NotificationsManager) GetSharedSecret() string {
	if o == nil || IsNil(o.SharedSecret) {
		var ret string
		return ret
	}
	return *o.SharedSecret
}

// GetSharedSecretOk returns a tuple with the SharedSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationsManager) GetSharedSecretOk() (*string, bool) {
	if o == nil || IsNil(o.SharedSecret) {
		return nil, false
	}
	return o.SharedSecret, true
}

// HasSharedSecret returns a boolean if a field has been set.
func (o *NotificationsManager) HasSharedSecret() bool {
	if o != nil && !IsNil(o.SharedSecret) {
		return true
	}

	return false
}

// SetSharedSecret gets a reference to the given string and assigns it to the SharedSecret field.
func (o *NotificationsManager) SetSharedSecret(v string) {
	o.SharedSecret = &v
}

func (o NotificationsManager) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationsManager) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OauthOnKeychangeUrl) {
		toSerialize["oauth_on_keychange_url"] = o.OauthOnKeychangeUrl
	}
	if !IsNil(o.SharedSecret) {
		toSerialize["shared_secret"] = o.SharedSecret
	}
	return toSerialize, nil
}

type NullableNotificationsManager struct {
	value *NotificationsManager
	isSet bool
}

func (v NullableNotificationsManager) Get() *NotificationsManager {
	return v.value
}

func (v *NullableNotificationsManager) Set(val *NotificationsManager) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationsManager) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationsManager) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationsManager(val *NotificationsManager) *NullableNotificationsManager {
	return &NullableNotificationsManager{value: val, isSet: true}
}

func (v NullableNotificationsManager) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationsManager) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


