/*
Tyk Gateway API

The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.  **Warning: Under no circumstances should outside parties be granted access to this API.**  The Tyk Gateway API is capable of:  * Managing session objects (key generation). * Managing and listing policies. * Managing and listing API Definitions (only when not using the Tyk Dashboard). * Hot reloads / reloading a cluster configuration. * OAuth client creation (only when not using the Tyk Dashboard).  In order to use the Gateway API, you'll need to set the **secret** parameter in your tyk.conf file.  The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:  **x-tyk-authorization: <your-secret>*** <br/>  <b>The Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.</b>

API version: 5.7.1
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the EndpointMethodMeta type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EndpointMethodMeta{}

// EndpointMethodMeta struct for EndpointMethodMeta
type EndpointMethodMeta struct {
	Action  *string           `json:"action,omitempty"`
	Code    *int32            `json:"code,omitempty"`
	Data    *string           `json:"data,omitempty"`
	Headers map[string]string `json:"headers,omitempty"`
}

// NewEndpointMethodMeta instantiates a new EndpointMethodMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEndpointMethodMeta() *EndpointMethodMeta {
	this := EndpointMethodMeta{}
	return &this
}

// NewEndpointMethodMetaWithDefaults instantiates a new EndpointMethodMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEndpointMethodMetaWithDefaults() *EndpointMethodMeta {
	this := EndpointMethodMeta{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *EndpointMethodMeta) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointMethodMeta) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *EndpointMethodMeta) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *EndpointMethodMeta) SetAction(v string) {
	o.Action = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *EndpointMethodMeta) GetCode() int32 {
	if o == nil || IsNil(o.Code) {
		var ret int32
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointMethodMeta) GetCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *EndpointMethodMeta) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given int32 and assigns it to the Code field.
func (o *EndpointMethodMeta) SetCode(v int32) {
	o.Code = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *EndpointMethodMeta) GetData() string {
	if o == nil || IsNil(o.Data) {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointMethodMeta) GetDataOk() (*string, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *EndpointMethodMeta) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *EndpointMethodMeta) SetData(v string) {
	o.Data = &v
}

// GetHeaders returns the Headers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EndpointMethodMeta) GetHeaders() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EndpointMethodMeta) GetHeadersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Headers) {
		return nil, false
	}
	return &o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *EndpointMethodMeta) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given map[string]string and assigns it to the Headers field.
func (o *EndpointMethodMeta) SetHeaders(v map[string]string) {
	o.Headers = v
}

func (o EndpointMethodMeta) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EndpointMethodMeta) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if o.Headers != nil {
		toSerialize["headers"] = o.Headers
	}
	return toSerialize, nil
}

type NullableEndpointMethodMeta struct {
	value *EndpointMethodMeta
	isSet bool
}

func (v NullableEndpointMethodMeta) Get() *EndpointMethodMeta {
	return v.value
}

func (v *NullableEndpointMethodMeta) Set(val *EndpointMethodMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointMethodMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointMethodMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointMethodMeta(val *EndpointMethodMeta) *NullableEndpointMethodMeta {
	return &NullableEndpointMethodMeta{value: val, isSet: true}
}

func (v NullableEndpointMethodMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointMethodMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
