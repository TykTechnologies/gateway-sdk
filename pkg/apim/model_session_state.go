/*
Tyk Gateway API

 The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway

API version: 5.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
	"time"
)

// checks if the SessionState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SessionState{}

// SessionState struct for SessionState
type SessionState struct {
	AccessRights map[string]AccessDefinition `json:"access_rights,omitempty"`
	Alias *string `json:"alias,omitempty"`
	Allowance *float64 `json:"allowance,omitempty"`
	ApplyPolicies []string `json:"apply_policies,omitempty"`
	ApplyPolicyId *string `json:"apply_policy_id,omitempty"`
	BasicAuthData *BasicAuthData `json:"basic_auth_data,omitempty"`
	Certificate *string `json:"certificate,omitempty"`
	DataExpires *int64 `json:"data_expires,omitempty"`
	DateCreated *time.Time `json:"date_created,omitempty"`
	// deprecated use enable_detailed_recording going forward instead
	// Deprecated
	EnableDetailRecording *bool `json:"enable_detail_recording,omitempty"`
	EnableDetailedRecording *bool `json:"enable_detailed_recording,omitempty"`
	EnableHttpSignatureValidation *bool `json:"enable_http_signature_validation,omitempty"`
	Expires *int64 `json:"expires,omitempty"`
	HmacEnabled *bool `json:"hmac_enabled,omitempty"`
	HmacString *string `json:"hmac_string,omitempty"`
	IdExtractorDeadline *int64 `json:"id_extractor_deadline,omitempty"`
	IsInactive *bool `json:"is_inactive,omitempty"`
	JwtData *JWTData `json:"jwt_data,omitempty"`
	LastCheck *int64 `json:"last_check,omitempty"`
	LastUpdated *string `json:"last_updated,omitempty"`
	MaxQueryDepth *int32 `json:"max_query_depth,omitempty"`
	MetaData map[string]interface{} `json:"meta_data,omitempty"`
	Monitor *Monitor `json:"monitor,omitempty"`
	OauthClientId *string `json:"oauth_client_id,omitempty"`
	OauthKeys map[string]string `json:"oauth_keys,omitempty"`
	OrgId *string `json:"org_id,omitempty"`
	Per *float64 `json:"per,omitempty"`
	QuotaMax *int64 `json:"quota_max,omitempty"`
	QuotaRemaining *int64 `json:"quota_remaining,omitempty"`
	QuotaRenewalRate *int64 `json:"quota_renewal_rate,omitempty"`
	QuotaRenews *int64 `json:"quota_renews,omitempty"`
	Rate *float64 `json:"rate,omitempty"`
	RsaCertificateId *string `json:"rsa_certificate_id,omitempty"`
	SessionLifetime *int64 `json:"session_lifetime,omitempty"`
	Tags []string `json:"tags,omitempty"`
	ThrottleInterval *float64 `json:"throttle_interval,omitempty"`
	ThrottleRetryLimit *int32 `json:"throttle_retry_limit,omitempty"`
}

// NewSessionState instantiates a new SessionState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSessionState() *SessionState {
	this := SessionState{}
	return &this
}

// NewSessionStateWithDefaults instantiates a new SessionState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSessionStateWithDefaults() *SessionState {
	this := SessionState{}
	return &this
}

// GetAccessRights returns the AccessRights field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SessionState) GetAccessRights() map[string]AccessDefinition {
	if o == nil {
		var ret map[string]AccessDefinition
		return ret
	}
	return o.AccessRights
}

// GetAccessRightsOk returns a tuple with the AccessRights field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SessionState) GetAccessRightsOk() (*map[string]AccessDefinition, bool) {
	if o == nil || IsNil(o.AccessRights) {
		return nil, false
	}
	return &o.AccessRights, true
}

// HasAccessRights returns a boolean if a field has been set.
func (o *SessionState) HasAccessRights() bool {
	if o != nil && !IsNil(o.AccessRights) {
		return true
	}

	return false
}

// SetAccessRights gets a reference to the given map[string]AccessDefinition and assigns it to the AccessRights field.
func (o *SessionState) SetAccessRights(v map[string]AccessDefinition) {
	o.AccessRights = v
}

// GetAlias returns the Alias field value if set, zero value otherwise.
func (o *SessionState) GetAlias() string {
	if o == nil || IsNil(o.Alias) {
		var ret string
		return ret
	}
	return *o.Alias
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetAliasOk() (*string, bool) {
	if o == nil || IsNil(o.Alias) {
		return nil, false
	}
	return o.Alias, true
}

// HasAlias returns a boolean if a field has been set.
func (o *SessionState) HasAlias() bool {
	if o != nil && !IsNil(o.Alias) {
		return true
	}

	return false
}

// SetAlias gets a reference to the given string and assigns it to the Alias field.
func (o *SessionState) SetAlias(v string) {
	o.Alias = &v
}

// GetAllowance returns the Allowance field value if set, zero value otherwise.
func (o *SessionState) GetAllowance() float64 {
	if o == nil || IsNil(o.Allowance) {
		var ret float64
		return ret
	}
	return *o.Allowance
}

// GetAllowanceOk returns a tuple with the Allowance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetAllowanceOk() (*float64, bool) {
	if o == nil || IsNil(o.Allowance) {
		return nil, false
	}
	return o.Allowance, true
}

// HasAllowance returns a boolean if a field has been set.
func (o *SessionState) HasAllowance() bool {
	if o != nil && !IsNil(o.Allowance) {
		return true
	}

	return false
}

// SetAllowance gets a reference to the given float64 and assigns it to the Allowance field.
func (o *SessionState) SetAllowance(v float64) {
	o.Allowance = &v
}

// GetApplyPolicies returns the ApplyPolicies field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SessionState) GetApplyPolicies() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ApplyPolicies
}

// GetApplyPoliciesOk returns a tuple with the ApplyPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SessionState) GetApplyPoliciesOk() ([]string, bool) {
	if o == nil || IsNil(o.ApplyPolicies) {
		return nil, false
	}
	return o.ApplyPolicies, true
}

// HasApplyPolicies returns a boolean if a field has been set.
func (o *SessionState) HasApplyPolicies() bool {
	if o != nil && !IsNil(o.ApplyPolicies) {
		return true
	}

	return false
}

// SetApplyPolicies gets a reference to the given []string and assigns it to the ApplyPolicies field.
func (o *SessionState) SetApplyPolicies(v []string) {
	o.ApplyPolicies = v
}

// GetApplyPolicyId returns the ApplyPolicyId field value if set, zero value otherwise.
func (o *SessionState) GetApplyPolicyId() string {
	if o == nil || IsNil(o.ApplyPolicyId) {
		var ret string
		return ret
	}
	return *o.ApplyPolicyId
}

// GetApplyPolicyIdOk returns a tuple with the ApplyPolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetApplyPolicyIdOk() (*string, bool) {
	if o == nil || IsNil(o.ApplyPolicyId) {
		return nil, false
	}
	return o.ApplyPolicyId, true
}

// HasApplyPolicyId returns a boolean if a field has been set.
func (o *SessionState) HasApplyPolicyId() bool {
	if o != nil && !IsNil(o.ApplyPolicyId) {
		return true
	}

	return false
}

// SetApplyPolicyId gets a reference to the given string and assigns it to the ApplyPolicyId field.
func (o *SessionState) SetApplyPolicyId(v string) {
	o.ApplyPolicyId = &v
}

// GetBasicAuthData returns the BasicAuthData field value if set, zero value otherwise.
func (o *SessionState) GetBasicAuthData() BasicAuthData {
	if o == nil || IsNil(o.BasicAuthData) {
		var ret BasicAuthData
		return ret
	}
	return *o.BasicAuthData
}

// GetBasicAuthDataOk returns a tuple with the BasicAuthData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetBasicAuthDataOk() (*BasicAuthData, bool) {
	if o == nil || IsNil(o.BasicAuthData) {
		return nil, false
	}
	return o.BasicAuthData, true
}

// HasBasicAuthData returns a boolean if a field has been set.
func (o *SessionState) HasBasicAuthData() bool {
	if o != nil && !IsNil(o.BasicAuthData) {
		return true
	}

	return false
}

// SetBasicAuthData gets a reference to the given BasicAuthData and assigns it to the BasicAuthData field.
func (o *SessionState) SetBasicAuthData(v BasicAuthData) {
	o.BasicAuthData = &v
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *SessionState) GetCertificate() string {
	if o == nil || IsNil(o.Certificate) {
		var ret string
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *SessionState) HasCertificate() bool {
	if o != nil && !IsNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given string and assigns it to the Certificate field.
func (o *SessionState) SetCertificate(v string) {
	o.Certificate = &v
}

// GetDataExpires returns the DataExpires field value if set, zero value otherwise.
func (o *SessionState) GetDataExpires() int64 {
	if o == nil || IsNil(o.DataExpires) {
		var ret int64
		return ret
	}
	return *o.DataExpires
}

// GetDataExpiresOk returns a tuple with the DataExpires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetDataExpiresOk() (*int64, bool) {
	if o == nil || IsNil(o.DataExpires) {
		return nil, false
	}
	return o.DataExpires, true
}

// HasDataExpires returns a boolean if a field has been set.
func (o *SessionState) HasDataExpires() bool {
	if o != nil && !IsNil(o.DataExpires) {
		return true
	}

	return false
}

// SetDataExpires gets a reference to the given int64 and assigns it to the DataExpires field.
func (o *SessionState) SetDataExpires(v int64) {
	o.DataExpires = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *SessionState) GetDateCreated() time.Time {
	if o == nil || IsNil(o.DateCreated) {
		var ret time.Time
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *SessionState) HasDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given time.Time and assigns it to the DateCreated field.
func (o *SessionState) SetDateCreated(v time.Time) {
	o.DateCreated = &v
}

// GetEnableDetailRecording returns the EnableDetailRecording field value if set, zero value otherwise.
// Deprecated
func (o *SessionState) GetEnableDetailRecording() bool {
	if o == nil || IsNil(o.EnableDetailRecording) {
		var ret bool
		return ret
	}
	return *o.EnableDetailRecording
}

// GetEnableDetailRecordingOk returns a tuple with the EnableDetailRecording field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *SessionState) GetEnableDetailRecordingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDetailRecording) {
		return nil, false
	}
	return o.EnableDetailRecording, true
}

// HasEnableDetailRecording returns a boolean if a field has been set.
func (o *SessionState) HasEnableDetailRecording() bool {
	if o != nil && !IsNil(o.EnableDetailRecording) {
		return true
	}

	return false
}

// SetEnableDetailRecording gets a reference to the given bool and assigns it to the EnableDetailRecording field.
// Deprecated
func (o *SessionState) SetEnableDetailRecording(v bool) {
	o.EnableDetailRecording = &v
}

// GetEnableDetailedRecording returns the EnableDetailedRecording field value if set, zero value otherwise.
func (o *SessionState) GetEnableDetailedRecording() bool {
	if o == nil || IsNil(o.EnableDetailedRecording) {
		var ret bool
		return ret
	}
	return *o.EnableDetailedRecording
}

// GetEnableDetailedRecordingOk returns a tuple with the EnableDetailedRecording field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetEnableDetailedRecordingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDetailedRecording) {
		return nil, false
	}
	return o.EnableDetailedRecording, true
}

// HasEnableDetailedRecording returns a boolean if a field has been set.
func (o *SessionState) HasEnableDetailedRecording() bool {
	if o != nil && !IsNil(o.EnableDetailedRecording) {
		return true
	}

	return false
}

// SetEnableDetailedRecording gets a reference to the given bool and assigns it to the EnableDetailedRecording field.
func (o *SessionState) SetEnableDetailedRecording(v bool) {
	o.EnableDetailedRecording = &v
}

// GetEnableHttpSignatureValidation returns the EnableHttpSignatureValidation field value if set, zero value otherwise.
func (o *SessionState) GetEnableHttpSignatureValidation() bool {
	if o == nil || IsNil(o.EnableHttpSignatureValidation) {
		var ret bool
		return ret
	}
	return *o.EnableHttpSignatureValidation
}

// GetEnableHttpSignatureValidationOk returns a tuple with the EnableHttpSignatureValidation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetEnableHttpSignatureValidationOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableHttpSignatureValidation) {
		return nil, false
	}
	return o.EnableHttpSignatureValidation, true
}

// HasEnableHttpSignatureValidation returns a boolean if a field has been set.
func (o *SessionState) HasEnableHttpSignatureValidation() bool {
	if o != nil && !IsNil(o.EnableHttpSignatureValidation) {
		return true
	}

	return false
}

// SetEnableHttpSignatureValidation gets a reference to the given bool and assigns it to the EnableHttpSignatureValidation field.
func (o *SessionState) SetEnableHttpSignatureValidation(v bool) {
	o.EnableHttpSignatureValidation = &v
}

// GetExpires returns the Expires field value if set, zero value otherwise.
func (o *SessionState) GetExpires() int64 {
	if o == nil || IsNil(o.Expires) {
		var ret int64
		return ret
	}
	return *o.Expires
}

// GetExpiresOk returns a tuple with the Expires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetExpiresOk() (*int64, bool) {
	if o == nil || IsNil(o.Expires) {
		return nil, false
	}
	return o.Expires, true
}

// HasExpires returns a boolean if a field has been set.
func (o *SessionState) HasExpires() bool {
	if o != nil && !IsNil(o.Expires) {
		return true
	}

	return false
}

// SetExpires gets a reference to the given int64 and assigns it to the Expires field.
func (o *SessionState) SetExpires(v int64) {
	o.Expires = &v
}

// GetHmacEnabled returns the HmacEnabled field value if set, zero value otherwise.
func (o *SessionState) GetHmacEnabled() bool {
	if o == nil || IsNil(o.HmacEnabled) {
		var ret bool
		return ret
	}
	return *o.HmacEnabled
}

// GetHmacEnabledOk returns a tuple with the HmacEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetHmacEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.HmacEnabled) {
		return nil, false
	}
	return o.HmacEnabled, true
}

// HasHmacEnabled returns a boolean if a field has been set.
func (o *SessionState) HasHmacEnabled() bool {
	if o != nil && !IsNil(o.HmacEnabled) {
		return true
	}

	return false
}

// SetHmacEnabled gets a reference to the given bool and assigns it to the HmacEnabled field.
func (o *SessionState) SetHmacEnabled(v bool) {
	o.HmacEnabled = &v
}

// GetHmacString returns the HmacString field value if set, zero value otherwise.
func (o *SessionState) GetHmacString() string {
	if o == nil || IsNil(o.HmacString) {
		var ret string
		return ret
	}
	return *o.HmacString
}

// GetHmacStringOk returns a tuple with the HmacString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetHmacStringOk() (*string, bool) {
	if o == nil || IsNil(o.HmacString) {
		return nil, false
	}
	return o.HmacString, true
}

// HasHmacString returns a boolean if a field has been set.
func (o *SessionState) HasHmacString() bool {
	if o != nil && !IsNil(o.HmacString) {
		return true
	}

	return false
}

// SetHmacString gets a reference to the given string and assigns it to the HmacString field.
func (o *SessionState) SetHmacString(v string) {
	o.HmacString = &v
}

// GetIdExtractorDeadline returns the IdExtractorDeadline field value if set, zero value otherwise.
func (o *SessionState) GetIdExtractorDeadline() int64 {
	if o == nil || IsNil(o.IdExtractorDeadline) {
		var ret int64
		return ret
	}
	return *o.IdExtractorDeadline
}

// GetIdExtractorDeadlineOk returns a tuple with the IdExtractorDeadline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetIdExtractorDeadlineOk() (*int64, bool) {
	if o == nil || IsNil(o.IdExtractorDeadline) {
		return nil, false
	}
	return o.IdExtractorDeadline, true
}

// HasIdExtractorDeadline returns a boolean if a field has been set.
func (o *SessionState) HasIdExtractorDeadline() bool {
	if o != nil && !IsNil(o.IdExtractorDeadline) {
		return true
	}

	return false
}

// SetIdExtractorDeadline gets a reference to the given int64 and assigns it to the IdExtractorDeadline field.
func (o *SessionState) SetIdExtractorDeadline(v int64) {
	o.IdExtractorDeadline = &v
}

// GetIsInactive returns the IsInactive field value if set, zero value otherwise.
func (o *SessionState) GetIsInactive() bool {
	if o == nil || IsNil(o.IsInactive) {
		var ret bool
		return ret
	}
	return *o.IsInactive
}

// GetIsInactiveOk returns a tuple with the IsInactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetIsInactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsInactive) {
		return nil, false
	}
	return o.IsInactive, true
}

// HasIsInactive returns a boolean if a field has been set.
func (o *SessionState) HasIsInactive() bool {
	if o != nil && !IsNil(o.IsInactive) {
		return true
	}

	return false
}

// SetIsInactive gets a reference to the given bool and assigns it to the IsInactive field.
func (o *SessionState) SetIsInactive(v bool) {
	o.IsInactive = &v
}

// GetJwtData returns the JwtData field value if set, zero value otherwise.
func (o *SessionState) GetJwtData() JWTData {
	if o == nil || IsNil(o.JwtData) {
		var ret JWTData
		return ret
	}
	return *o.JwtData
}

// GetJwtDataOk returns a tuple with the JwtData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetJwtDataOk() (*JWTData, bool) {
	if o == nil || IsNil(o.JwtData) {
		return nil, false
	}
	return o.JwtData, true
}

// HasJwtData returns a boolean if a field has been set.
func (o *SessionState) HasJwtData() bool {
	if o != nil && !IsNil(o.JwtData) {
		return true
	}

	return false
}

// SetJwtData gets a reference to the given JWTData and assigns it to the JwtData field.
func (o *SessionState) SetJwtData(v JWTData) {
	o.JwtData = &v
}

// GetLastCheck returns the LastCheck field value if set, zero value otherwise.
func (o *SessionState) GetLastCheck() int64 {
	if o == nil || IsNil(o.LastCheck) {
		var ret int64
		return ret
	}
	return *o.LastCheck
}

// GetLastCheckOk returns a tuple with the LastCheck field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetLastCheckOk() (*int64, bool) {
	if o == nil || IsNil(o.LastCheck) {
		return nil, false
	}
	return o.LastCheck, true
}

// HasLastCheck returns a boolean if a field has been set.
func (o *SessionState) HasLastCheck() bool {
	if o != nil && !IsNil(o.LastCheck) {
		return true
	}

	return false
}

// SetLastCheck gets a reference to the given int64 and assigns it to the LastCheck field.
func (o *SessionState) SetLastCheck(v int64) {
	o.LastCheck = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *SessionState) GetLastUpdated() string {
	if o == nil || IsNil(o.LastUpdated) {
		var ret string
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetLastUpdatedOk() (*string, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *SessionState) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given string and assigns it to the LastUpdated field.
func (o *SessionState) SetLastUpdated(v string) {
	o.LastUpdated = &v
}

// GetMaxQueryDepth returns the MaxQueryDepth field value if set, zero value otherwise.
func (o *SessionState) GetMaxQueryDepth() int32 {
	if o == nil || IsNil(o.MaxQueryDepth) {
		var ret int32
		return ret
	}
	return *o.MaxQueryDepth
}

// GetMaxQueryDepthOk returns a tuple with the MaxQueryDepth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetMaxQueryDepthOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxQueryDepth) {
		return nil, false
	}
	return o.MaxQueryDepth, true
}

// HasMaxQueryDepth returns a boolean if a field has been set.
func (o *SessionState) HasMaxQueryDepth() bool {
	if o != nil && !IsNil(o.MaxQueryDepth) {
		return true
	}

	return false
}

// SetMaxQueryDepth gets a reference to the given int32 and assigns it to the MaxQueryDepth field.
func (o *SessionState) SetMaxQueryDepth(v int32) {
	o.MaxQueryDepth = &v
}

// GetMetaData returns the MetaData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SessionState) GetMetaData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.MetaData
}

// GetMetaDataOk returns a tuple with the MetaData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SessionState) GetMetaDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.MetaData) {
		return map[string]interface{}{}, false
	}
	return o.MetaData, true
}

// HasMetaData returns a boolean if a field has been set.
func (o *SessionState) HasMetaData() bool {
	if o != nil && !IsNil(o.MetaData) {
		return true
	}

	return false
}

// SetMetaData gets a reference to the given map[string]interface{} and assigns it to the MetaData field.
func (o *SessionState) SetMetaData(v map[string]interface{}) {
	o.MetaData = v
}

// GetMonitor returns the Monitor field value if set, zero value otherwise.
func (o *SessionState) GetMonitor() Monitor {
	if o == nil || IsNil(o.Monitor) {
		var ret Monitor
		return ret
	}
	return *o.Monitor
}

// GetMonitorOk returns a tuple with the Monitor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetMonitorOk() (*Monitor, bool) {
	if o == nil || IsNil(o.Monitor) {
		return nil, false
	}
	return o.Monitor, true
}

// HasMonitor returns a boolean if a field has been set.
func (o *SessionState) HasMonitor() bool {
	if o != nil && !IsNil(o.Monitor) {
		return true
	}

	return false
}

// SetMonitor gets a reference to the given Monitor and assigns it to the Monitor field.
func (o *SessionState) SetMonitor(v Monitor) {
	o.Monitor = &v
}

// GetOauthClientId returns the OauthClientId field value if set, zero value otherwise.
func (o *SessionState) GetOauthClientId() string {
	if o == nil || IsNil(o.OauthClientId) {
		var ret string
		return ret
	}
	return *o.OauthClientId
}

// GetOauthClientIdOk returns a tuple with the OauthClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetOauthClientIdOk() (*string, bool) {
	if o == nil || IsNil(o.OauthClientId) {
		return nil, false
	}
	return o.OauthClientId, true
}

// HasOauthClientId returns a boolean if a field has been set.
func (o *SessionState) HasOauthClientId() bool {
	if o != nil && !IsNil(o.OauthClientId) {
		return true
	}

	return false
}

// SetOauthClientId gets a reference to the given string and assigns it to the OauthClientId field.
func (o *SessionState) SetOauthClientId(v string) {
	o.OauthClientId = &v
}

// GetOauthKeys returns the OauthKeys field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SessionState) GetOauthKeys() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.OauthKeys
}

// GetOauthKeysOk returns a tuple with the OauthKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SessionState) GetOauthKeysOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.OauthKeys) {
		return nil, false
	}
	return &o.OauthKeys, true
}

// HasOauthKeys returns a boolean if a field has been set.
func (o *SessionState) HasOauthKeys() bool {
	if o != nil && !IsNil(o.OauthKeys) {
		return true
	}

	return false
}

// SetOauthKeys gets a reference to the given map[string]string and assigns it to the OauthKeys field.
func (o *SessionState) SetOauthKeys(v map[string]string) {
	o.OauthKeys = v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *SessionState) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *SessionState) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *SessionState) SetOrgId(v string) {
	o.OrgId = &v
}

// GetPer returns the Per field value if set, zero value otherwise.
func (o *SessionState) GetPer() float64 {
	if o == nil || IsNil(o.Per) {
		var ret float64
		return ret
	}
	return *o.Per
}

// GetPerOk returns a tuple with the Per field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetPerOk() (*float64, bool) {
	if o == nil || IsNil(o.Per) {
		return nil, false
	}
	return o.Per, true
}

// HasPer returns a boolean if a field has been set.
func (o *SessionState) HasPer() bool {
	if o != nil && !IsNil(o.Per) {
		return true
	}

	return false
}

// SetPer gets a reference to the given float64 and assigns it to the Per field.
func (o *SessionState) SetPer(v float64) {
	o.Per = &v
}

// GetQuotaMax returns the QuotaMax field value if set, zero value otherwise.
func (o *SessionState) GetQuotaMax() int64 {
	if o == nil || IsNil(o.QuotaMax) {
		var ret int64
		return ret
	}
	return *o.QuotaMax
}

// GetQuotaMaxOk returns a tuple with the QuotaMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetQuotaMaxOk() (*int64, bool) {
	if o == nil || IsNil(o.QuotaMax) {
		return nil, false
	}
	return o.QuotaMax, true
}

// HasQuotaMax returns a boolean if a field has been set.
func (o *SessionState) HasQuotaMax() bool {
	if o != nil && !IsNil(o.QuotaMax) {
		return true
	}

	return false
}

// SetQuotaMax gets a reference to the given int64 and assigns it to the QuotaMax field.
func (o *SessionState) SetQuotaMax(v int64) {
	o.QuotaMax = &v
}

// GetQuotaRemaining returns the QuotaRemaining field value if set, zero value otherwise.
func (o *SessionState) GetQuotaRemaining() int64 {
	if o == nil || IsNil(o.QuotaRemaining) {
		var ret int64
		return ret
	}
	return *o.QuotaRemaining
}

// GetQuotaRemainingOk returns a tuple with the QuotaRemaining field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetQuotaRemainingOk() (*int64, bool) {
	if o == nil || IsNil(o.QuotaRemaining) {
		return nil, false
	}
	return o.QuotaRemaining, true
}

// HasQuotaRemaining returns a boolean if a field has been set.
func (o *SessionState) HasQuotaRemaining() bool {
	if o != nil && !IsNil(o.QuotaRemaining) {
		return true
	}

	return false
}

// SetQuotaRemaining gets a reference to the given int64 and assigns it to the QuotaRemaining field.
func (o *SessionState) SetQuotaRemaining(v int64) {
	o.QuotaRemaining = &v
}

// GetQuotaRenewalRate returns the QuotaRenewalRate field value if set, zero value otherwise.
func (o *SessionState) GetQuotaRenewalRate() int64 {
	if o == nil || IsNil(o.QuotaRenewalRate) {
		var ret int64
		return ret
	}
	return *o.QuotaRenewalRate
}

// GetQuotaRenewalRateOk returns a tuple with the QuotaRenewalRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetQuotaRenewalRateOk() (*int64, bool) {
	if o == nil || IsNil(o.QuotaRenewalRate) {
		return nil, false
	}
	return o.QuotaRenewalRate, true
}

// HasQuotaRenewalRate returns a boolean if a field has been set.
func (o *SessionState) HasQuotaRenewalRate() bool {
	if o != nil && !IsNil(o.QuotaRenewalRate) {
		return true
	}

	return false
}

// SetQuotaRenewalRate gets a reference to the given int64 and assigns it to the QuotaRenewalRate field.
func (o *SessionState) SetQuotaRenewalRate(v int64) {
	o.QuotaRenewalRate = &v
}

// GetQuotaRenews returns the QuotaRenews field value if set, zero value otherwise.
func (o *SessionState) GetQuotaRenews() int64 {
	if o == nil || IsNil(o.QuotaRenews) {
		var ret int64
		return ret
	}
	return *o.QuotaRenews
}

// GetQuotaRenewsOk returns a tuple with the QuotaRenews field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetQuotaRenewsOk() (*int64, bool) {
	if o == nil || IsNil(o.QuotaRenews) {
		return nil, false
	}
	return o.QuotaRenews, true
}

// HasQuotaRenews returns a boolean if a field has been set.
func (o *SessionState) HasQuotaRenews() bool {
	if o != nil && !IsNil(o.QuotaRenews) {
		return true
	}

	return false
}

// SetQuotaRenews gets a reference to the given int64 and assigns it to the QuotaRenews field.
func (o *SessionState) SetQuotaRenews(v int64) {
	o.QuotaRenews = &v
}

// GetRate returns the Rate field value if set, zero value otherwise.
func (o *SessionState) GetRate() float64 {
	if o == nil || IsNil(o.Rate) {
		var ret float64
		return ret
	}
	return *o.Rate
}

// GetRateOk returns a tuple with the Rate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetRateOk() (*float64, bool) {
	if o == nil || IsNil(o.Rate) {
		return nil, false
	}
	return o.Rate, true
}

// HasRate returns a boolean if a field has been set.
func (o *SessionState) HasRate() bool {
	if o != nil && !IsNil(o.Rate) {
		return true
	}

	return false
}

// SetRate gets a reference to the given float64 and assigns it to the Rate field.
func (o *SessionState) SetRate(v float64) {
	o.Rate = &v
}

// GetRsaCertificateId returns the RsaCertificateId field value if set, zero value otherwise.
func (o *SessionState) GetRsaCertificateId() string {
	if o == nil || IsNil(o.RsaCertificateId) {
		var ret string
		return ret
	}
	return *o.RsaCertificateId
}

// GetRsaCertificateIdOk returns a tuple with the RsaCertificateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetRsaCertificateIdOk() (*string, bool) {
	if o == nil || IsNil(o.RsaCertificateId) {
		return nil, false
	}
	return o.RsaCertificateId, true
}

// HasRsaCertificateId returns a boolean if a field has been set.
func (o *SessionState) HasRsaCertificateId() bool {
	if o != nil && !IsNil(o.RsaCertificateId) {
		return true
	}

	return false
}

// SetRsaCertificateId gets a reference to the given string and assigns it to the RsaCertificateId field.
func (o *SessionState) SetRsaCertificateId(v string) {
	o.RsaCertificateId = &v
}

// GetSessionLifetime returns the SessionLifetime field value if set, zero value otherwise.
func (o *SessionState) GetSessionLifetime() int64 {
	if o == nil || IsNil(o.SessionLifetime) {
		var ret int64
		return ret
	}
	return *o.SessionLifetime
}

// GetSessionLifetimeOk returns a tuple with the SessionLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetSessionLifetimeOk() (*int64, bool) {
	if o == nil || IsNil(o.SessionLifetime) {
		return nil, false
	}
	return o.SessionLifetime, true
}

// HasSessionLifetime returns a boolean if a field has been set.
func (o *SessionState) HasSessionLifetime() bool {
	if o != nil && !IsNil(o.SessionLifetime) {
		return true
	}

	return false
}

// SetSessionLifetime gets a reference to the given int64 and assigns it to the SessionLifetime field.
func (o *SessionState) SetSessionLifetime(v int64) {
	o.SessionLifetime = &v
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SessionState) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SessionState) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *SessionState) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *SessionState) SetTags(v []string) {
	o.Tags = v
}

// GetThrottleInterval returns the ThrottleInterval field value if set, zero value otherwise.
func (o *SessionState) GetThrottleInterval() float64 {
	if o == nil || IsNil(o.ThrottleInterval) {
		var ret float64
		return ret
	}
	return *o.ThrottleInterval
}

// GetThrottleIntervalOk returns a tuple with the ThrottleInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetThrottleIntervalOk() (*float64, bool) {
	if o == nil || IsNil(o.ThrottleInterval) {
		return nil, false
	}
	return o.ThrottleInterval, true
}

// HasThrottleInterval returns a boolean if a field has been set.
func (o *SessionState) HasThrottleInterval() bool {
	if o != nil && !IsNil(o.ThrottleInterval) {
		return true
	}

	return false
}

// SetThrottleInterval gets a reference to the given float64 and assigns it to the ThrottleInterval field.
func (o *SessionState) SetThrottleInterval(v float64) {
	o.ThrottleInterval = &v
}

// GetThrottleRetryLimit returns the ThrottleRetryLimit field value if set, zero value otherwise.
func (o *SessionState) GetThrottleRetryLimit() int32 {
	if o == nil || IsNil(o.ThrottleRetryLimit) {
		var ret int32
		return ret
	}
	return *o.ThrottleRetryLimit
}

// GetThrottleRetryLimitOk returns a tuple with the ThrottleRetryLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetThrottleRetryLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.ThrottleRetryLimit) {
		return nil, false
	}
	return o.ThrottleRetryLimit, true
}

// HasThrottleRetryLimit returns a boolean if a field has been set.
func (o *SessionState) HasThrottleRetryLimit() bool {
	if o != nil && !IsNil(o.ThrottleRetryLimit) {
		return true
	}

	return false
}

// SetThrottleRetryLimit gets a reference to the given int32 and assigns it to the ThrottleRetryLimit field.
func (o *SessionState) SetThrottleRetryLimit(v int32) {
	o.ThrottleRetryLimit = &v
}

func (o SessionState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SessionState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessRights != nil {
		toSerialize["access_rights"] = o.AccessRights
	}
	if !IsNil(o.Alias) {
		toSerialize["alias"] = o.Alias
	}
	if !IsNil(o.Allowance) {
		toSerialize["allowance"] = o.Allowance
	}
	if o.ApplyPolicies != nil {
		toSerialize["apply_policies"] = o.ApplyPolicies
	}
	if !IsNil(o.ApplyPolicyId) {
		toSerialize["apply_policy_id"] = o.ApplyPolicyId
	}
	if !IsNil(o.BasicAuthData) {
		toSerialize["basic_auth_data"] = o.BasicAuthData
	}
	if !IsNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}
	if !IsNil(o.DataExpires) {
		toSerialize["data_expires"] = o.DataExpires
	}
	if !IsNil(o.DateCreated) {
		toSerialize["date_created"] = o.DateCreated
	}
	if !IsNil(o.EnableDetailRecording) {
		toSerialize["enable_detail_recording"] = o.EnableDetailRecording
	}
	if !IsNil(o.EnableDetailedRecording) {
		toSerialize["enable_detailed_recording"] = o.EnableDetailedRecording
	}
	if !IsNil(o.EnableHttpSignatureValidation) {
		toSerialize["enable_http_signature_validation"] = o.EnableHttpSignatureValidation
	}
	if !IsNil(o.Expires) {
		toSerialize["expires"] = o.Expires
	}
	if !IsNil(o.HmacEnabled) {
		toSerialize["hmac_enabled"] = o.HmacEnabled
	}
	if !IsNil(o.HmacString) {
		toSerialize["hmac_string"] = o.HmacString
	}
	if !IsNil(o.IdExtractorDeadline) {
		toSerialize["id_extractor_deadline"] = o.IdExtractorDeadline
	}
	if !IsNil(o.IsInactive) {
		toSerialize["is_inactive"] = o.IsInactive
	}
	if !IsNil(o.JwtData) {
		toSerialize["jwt_data"] = o.JwtData
	}
	if !IsNil(o.LastCheck) {
		toSerialize["last_check"] = o.LastCheck
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["last_updated"] = o.LastUpdated
	}
	if !IsNil(o.MaxQueryDepth) {
		toSerialize["max_query_depth"] = o.MaxQueryDepth
	}
	if o.MetaData != nil {
		toSerialize["meta_data"] = o.MetaData
	}
	if !IsNil(o.Monitor) {
		toSerialize["monitor"] = o.Monitor
	}
	if !IsNil(o.OauthClientId) {
		toSerialize["oauth_client_id"] = o.OauthClientId
	}
	if o.OauthKeys != nil {
		toSerialize["oauth_keys"] = o.OauthKeys
	}
	if !IsNil(o.OrgId) {
		toSerialize["org_id"] = o.OrgId
	}
	if !IsNil(o.Per) {
		toSerialize["per"] = o.Per
	}
	if !IsNil(o.QuotaMax) {
		toSerialize["quota_max"] = o.QuotaMax
	}
	if !IsNil(o.QuotaRemaining) {
		toSerialize["quota_remaining"] = o.QuotaRemaining
	}
	if !IsNil(o.QuotaRenewalRate) {
		toSerialize["quota_renewal_rate"] = o.QuotaRenewalRate
	}
	if !IsNil(o.QuotaRenews) {
		toSerialize["quota_renews"] = o.QuotaRenews
	}
	if !IsNil(o.Rate) {
		toSerialize["rate"] = o.Rate
	}
	if !IsNil(o.RsaCertificateId) {
		toSerialize["rsa_certificate_id"] = o.RsaCertificateId
	}
	if !IsNil(o.SessionLifetime) {
		toSerialize["session_lifetime"] = o.SessionLifetime
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.ThrottleInterval) {
		toSerialize["throttle_interval"] = o.ThrottleInterval
	}
	if !IsNil(o.ThrottleRetryLimit) {
		toSerialize["throttle_retry_limit"] = o.ThrottleRetryLimit
	}
	return toSerialize, nil
}

type NullableSessionState struct {
	value *SessionState
	isSet bool
}

func (v NullableSessionState) Get() *SessionState {
	return v.value
}

func (v *NullableSessionState) Set(val *SessionState) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionState) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionState(val *SessionState) *NullableSessionState {
	return &NullableSessionState{value: val, isSet: true}
}

func (v NullableSessionState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


