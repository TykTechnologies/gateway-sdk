/*
Tyk Gateway API

The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.  **Warning: Under no circumstances should outside parties be granted access to this API.**  The Tyk Gateway API is capable of:  * Managing session objects (key generation). * Managing and listing policies. * Managing and listing API Definitions (only when not using the Tyk Dashboard). * Hot reloads / reloading a cluster configuration. * OAuth client creation (only when not using the Tyk Dashboard).  In order to use the Gateway API, you'll need to set the **secret** parameter in your tyk.conf file.  The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:  **x-tyk-authorization: <your-secret>*** <br/>  <b>The Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.</b>

API version: 5.7.1
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the Middleware type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Middleware{}

// Middleware struct for Middleware
type Middleware struct {
	Global     *Global               `json:"global,omitempty"`
	Operations *map[string]Operation `json:"operations,omitempty"`
}

// NewMiddleware instantiates a new Middleware object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMiddleware() *Middleware {
	this := Middleware{}
	return &this
}

// NewMiddlewareWithDefaults instantiates a new Middleware object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMiddlewareWithDefaults() *Middleware {
	this := Middleware{}
	return &this
}

// GetGlobal returns the Global field value if set, zero value otherwise.
func (o *Middleware) GetGlobal() Global {
	if o == nil || IsNil(o.Global) {
		var ret Global
		return ret
	}
	return *o.Global
}

// GetGlobalOk returns a tuple with the Global field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Middleware) GetGlobalOk() (*Global, bool) {
	if o == nil || IsNil(o.Global) {
		return nil, false
	}
	return o.Global, true
}

// HasGlobal returns a boolean if a field has been set.
func (o *Middleware) HasGlobal() bool {
	if o != nil && !IsNil(o.Global) {
		return true
	}

	return false
}

// SetGlobal gets a reference to the given Global and assigns it to the Global field.
func (o *Middleware) SetGlobal(v Global) {
	o.Global = &v
}

// GetOperations returns the Operations field value if set, zero value otherwise.
func (o *Middleware) GetOperations() map[string]Operation {
	if o == nil || IsNil(o.Operations) {
		var ret map[string]Operation
		return ret
	}
	return *o.Operations
}

// GetOperationsOk returns a tuple with the Operations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Middleware) GetOperationsOk() (*map[string]Operation, bool) {
	if o == nil || IsNil(o.Operations) {
		return nil, false
	}
	return o.Operations, true
}

// HasOperations returns a boolean if a field has been set.
func (o *Middleware) HasOperations() bool {
	if o != nil && !IsNil(o.Operations) {
		return true
	}

	return false
}

// SetOperations gets a reference to the given map[string]Operation and assigns it to the Operations field.
func (o *Middleware) SetOperations(v map[string]Operation) {
	o.Operations = &v
}

func (o Middleware) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Middleware) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Global) {
		toSerialize["global"] = o.Global
	}
	if !IsNil(o.Operations) {
		toSerialize["operations"] = o.Operations
	}
	return toSerialize, nil
}

type NullableMiddleware struct {
	value *Middleware
	isSet bool
}

func (v NullableMiddleware) Get() *Middleware {
	return v.value
}

func (v *NullableMiddleware) Set(val *Middleware) {
	v.value = val
	v.isSet = true
}

func (v NullableMiddleware) IsSet() bool {
	return v.isSet
}

func (v *NullableMiddleware) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMiddleware(val *Middleware) *NullableMiddleware {
	return &NullableMiddleware{value: val, isSet: true}
}

func (v NullableMiddleware) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMiddleware) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
