/*
Tyk Gateway API

 The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway

API version: 5.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the Openapi3ServerVariable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Openapi3ServerVariable{}

// Openapi3ServerVariable struct for Openapi3ServerVariable
type Openapi3ServerVariable struct {
	Default *string `json:"default,omitempty"`
	Description *string `json:"description,omitempty"`
	Enum []string `json:"enum,omitempty"`
}

// NewOpenapi3ServerVariable instantiates a new Openapi3ServerVariable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenapi3ServerVariable() *Openapi3ServerVariable {
	this := Openapi3ServerVariable{}
	return &this
}

// NewOpenapi3ServerVariableWithDefaults instantiates a new Openapi3ServerVariable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenapi3ServerVariableWithDefaults() *Openapi3ServerVariable {
	this := Openapi3ServerVariable{}
	return &this
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *Openapi3ServerVariable) GetDefault() string {
	if o == nil || IsNil(o.Default) {
		var ret string
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Openapi3ServerVariable) GetDefaultOk() (*string, bool) {
	if o == nil || IsNil(o.Default) {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *Openapi3ServerVariable) HasDefault() bool {
	if o != nil && !IsNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given string and assigns it to the Default field.
func (o *Openapi3ServerVariable) SetDefault(v string) {
	o.Default = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Openapi3ServerVariable) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Openapi3ServerVariable) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Openapi3ServerVariable) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Openapi3ServerVariable) SetDescription(v string) {
	o.Description = &v
}

// GetEnum returns the Enum field value if set, zero value otherwise.
func (o *Openapi3ServerVariable) GetEnum() []string {
	if o == nil || IsNil(o.Enum) {
		var ret []string
		return ret
	}
	return o.Enum
}

// GetEnumOk returns a tuple with the Enum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Openapi3ServerVariable) GetEnumOk() ([]string, bool) {
	if o == nil || IsNil(o.Enum) {
		return nil, false
	}
	return o.Enum, true
}

// HasEnum returns a boolean if a field has been set.
func (o *Openapi3ServerVariable) HasEnum() bool {
	if o != nil && !IsNil(o.Enum) {
		return true
	}

	return false
}

// SetEnum gets a reference to the given []string and assigns it to the Enum field.
func (o *Openapi3ServerVariable) SetEnum(v []string) {
	o.Enum = v
}

func (o Openapi3ServerVariable) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Openapi3ServerVariable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Default) {
		toSerialize["default"] = o.Default
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Enum) {
		toSerialize["enum"] = o.Enum
	}
	return toSerialize, nil
}

type NullableOpenapi3ServerVariable struct {
	value *Openapi3ServerVariable
	isSet bool
}

func (v NullableOpenapi3ServerVariable) Get() *Openapi3ServerVariable {
	return v.value
}

func (v *NullableOpenapi3ServerVariable) Set(val *Openapi3ServerVariable) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenapi3ServerVariable) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenapi3ServerVariable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenapi3ServerVariable(val *Openapi3ServerVariable) *NullableOpenapi3ServerVariable {
	return &NullableOpenapi3ServerVariable{value: val, isSet: true}
}

func (v NullableOpenapi3ServerVariable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenapi3ServerVariable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


