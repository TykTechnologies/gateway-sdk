/*
Tyk Gateway API

 The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway

API version: 5.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the GraphQLSubgraphEntity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GraphQLSubgraphEntity{}

// GraphQLSubgraphEntity struct for GraphQLSubgraphEntity
type GraphQLSubgraphEntity struct {
	ApiId *string `json:"api_id,omitempty"`
	Headers map[string]string `json:"headers,omitempty"`
	Name *string `json:"name,omitempty"`
	Sdl *string `json:"sdl,omitempty"`
	SubscriptionType *string `json:"subscription_type,omitempty"`
	Url *string `json:"url,omitempty"`
}

// NewGraphQLSubgraphEntity instantiates a new GraphQLSubgraphEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGraphQLSubgraphEntity() *GraphQLSubgraphEntity {
	this := GraphQLSubgraphEntity{}
	return &this
}

// NewGraphQLSubgraphEntityWithDefaults instantiates a new GraphQLSubgraphEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGraphQLSubgraphEntityWithDefaults() *GraphQLSubgraphEntity {
	this := GraphQLSubgraphEntity{}
	return &this
}

// GetApiId returns the ApiId field value if set, zero value otherwise.
func (o *GraphQLSubgraphEntity) GetApiId() string {
	if o == nil || IsNil(o.ApiId) {
		var ret string
		return ret
	}
	return *o.ApiId
}

// GetApiIdOk returns a tuple with the ApiId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphQLSubgraphEntity) GetApiIdOk() (*string, bool) {
	if o == nil || IsNil(o.ApiId) {
		return nil, false
	}
	return o.ApiId, true
}

// HasApiId returns a boolean if a field has been set.
func (o *GraphQLSubgraphEntity) HasApiId() bool {
	if o != nil && !IsNil(o.ApiId) {
		return true
	}

	return false
}

// SetApiId gets a reference to the given string and assigns it to the ApiId field.
func (o *GraphQLSubgraphEntity) SetApiId(v string) {
	o.ApiId = &v
}

// GetHeaders returns the Headers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GraphQLSubgraphEntity) GetHeaders() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GraphQLSubgraphEntity) GetHeadersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Headers) {
		return nil, false
	}
	return &o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *GraphQLSubgraphEntity) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given map[string]string and assigns it to the Headers field.
func (o *GraphQLSubgraphEntity) SetHeaders(v map[string]string) {
	o.Headers = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GraphQLSubgraphEntity) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphQLSubgraphEntity) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GraphQLSubgraphEntity) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GraphQLSubgraphEntity) SetName(v string) {
	o.Name = &v
}

// GetSdl returns the Sdl field value if set, zero value otherwise.
func (o *GraphQLSubgraphEntity) GetSdl() string {
	if o == nil || IsNil(o.Sdl) {
		var ret string
		return ret
	}
	return *o.Sdl
}

// GetSdlOk returns a tuple with the Sdl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphQLSubgraphEntity) GetSdlOk() (*string, bool) {
	if o == nil || IsNil(o.Sdl) {
		return nil, false
	}
	return o.Sdl, true
}

// HasSdl returns a boolean if a field has been set.
func (o *GraphQLSubgraphEntity) HasSdl() bool {
	if o != nil && !IsNil(o.Sdl) {
		return true
	}

	return false
}

// SetSdl gets a reference to the given string and assigns it to the Sdl field.
func (o *GraphQLSubgraphEntity) SetSdl(v string) {
	o.Sdl = &v
}

// GetSubscriptionType returns the SubscriptionType field value if set, zero value otherwise.
func (o *GraphQLSubgraphEntity) GetSubscriptionType() string {
	if o == nil || IsNil(o.SubscriptionType) {
		var ret string
		return ret
	}
	return *o.SubscriptionType
}

// GetSubscriptionTypeOk returns a tuple with the SubscriptionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphQLSubgraphEntity) GetSubscriptionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SubscriptionType) {
		return nil, false
	}
	return o.SubscriptionType, true
}

// HasSubscriptionType returns a boolean if a field has been set.
func (o *GraphQLSubgraphEntity) HasSubscriptionType() bool {
	if o != nil && !IsNil(o.SubscriptionType) {
		return true
	}

	return false
}

// SetSubscriptionType gets a reference to the given string and assigns it to the SubscriptionType field.
func (o *GraphQLSubgraphEntity) SetSubscriptionType(v string) {
	o.SubscriptionType = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *GraphQLSubgraphEntity) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphQLSubgraphEntity) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *GraphQLSubgraphEntity) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *GraphQLSubgraphEntity) SetUrl(v string) {
	o.Url = &v
}

func (o GraphQLSubgraphEntity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GraphQLSubgraphEntity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiId) {
		toSerialize["api_id"] = o.ApiId
	}
	if o.Headers != nil {
		toSerialize["headers"] = o.Headers
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Sdl) {
		toSerialize["sdl"] = o.Sdl
	}
	if !IsNil(o.SubscriptionType) {
		toSerialize["subscription_type"] = o.SubscriptionType
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableGraphQLSubgraphEntity struct {
	value *GraphQLSubgraphEntity
	isSet bool
}

func (v NullableGraphQLSubgraphEntity) Get() *GraphQLSubgraphEntity {
	return v.value
}

func (v *NullableGraphQLSubgraphEntity) Set(val *GraphQLSubgraphEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableGraphQLSubgraphEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableGraphQLSubgraphEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGraphQLSubgraphEntity(val *GraphQLSubgraphEntity) *NullableGraphQLSubgraphEntity {
	return &NullableGraphQLSubgraphEntity{value: val, isSet: true}
}

func (v NullableGraphQLSubgraphEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGraphQLSubgraphEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


