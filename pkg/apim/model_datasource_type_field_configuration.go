/*
Tyk Gateway API

 The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway

API version: 5.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the DatasourceTypeFieldConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatasourceTypeFieldConfiguration{}

// DatasourceTypeFieldConfiguration struct for DatasourceTypeFieldConfiguration
type DatasourceTypeFieldConfiguration struct {
	DataSource *DatasourceSourceConfig `json:"data_source,omitempty"`
	FieldName *string `json:"field_name,omitempty"`
	Mapping *DatasourceMappingConfiguration `json:"mapping,omitempty"`
	TypeName *string `json:"type_name,omitempty"`
}

// NewDatasourceTypeFieldConfiguration instantiates a new DatasourceTypeFieldConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatasourceTypeFieldConfiguration() *DatasourceTypeFieldConfiguration {
	this := DatasourceTypeFieldConfiguration{}
	return &this
}

// NewDatasourceTypeFieldConfigurationWithDefaults instantiates a new DatasourceTypeFieldConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatasourceTypeFieldConfigurationWithDefaults() *DatasourceTypeFieldConfiguration {
	this := DatasourceTypeFieldConfiguration{}
	return &this
}

// GetDataSource returns the DataSource field value if set, zero value otherwise.
func (o *DatasourceTypeFieldConfiguration) GetDataSource() DatasourceSourceConfig {
	if o == nil || IsNil(o.DataSource) {
		var ret DatasourceSourceConfig
		return ret
	}
	return *o.DataSource
}

// GetDataSourceOk returns a tuple with the DataSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceTypeFieldConfiguration) GetDataSourceOk() (*DatasourceSourceConfig, bool) {
	if o == nil || IsNil(o.DataSource) {
		return nil, false
	}
	return o.DataSource, true
}

// HasDataSource returns a boolean if a field has been set.
func (o *DatasourceTypeFieldConfiguration) HasDataSource() bool {
	if o != nil && !IsNil(o.DataSource) {
		return true
	}

	return false
}

// SetDataSource gets a reference to the given DatasourceSourceConfig and assigns it to the DataSource field.
func (o *DatasourceTypeFieldConfiguration) SetDataSource(v DatasourceSourceConfig) {
	o.DataSource = &v
}

// GetFieldName returns the FieldName field value if set, zero value otherwise.
func (o *DatasourceTypeFieldConfiguration) GetFieldName() string {
	if o == nil || IsNil(o.FieldName) {
		var ret string
		return ret
	}
	return *o.FieldName
}

// GetFieldNameOk returns a tuple with the FieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceTypeFieldConfiguration) GetFieldNameOk() (*string, bool) {
	if o == nil || IsNil(o.FieldName) {
		return nil, false
	}
	return o.FieldName, true
}

// HasFieldName returns a boolean if a field has been set.
func (o *DatasourceTypeFieldConfiguration) HasFieldName() bool {
	if o != nil && !IsNil(o.FieldName) {
		return true
	}

	return false
}

// SetFieldName gets a reference to the given string and assigns it to the FieldName field.
func (o *DatasourceTypeFieldConfiguration) SetFieldName(v string) {
	o.FieldName = &v
}

// GetMapping returns the Mapping field value if set, zero value otherwise.
func (o *DatasourceTypeFieldConfiguration) GetMapping() DatasourceMappingConfiguration {
	if o == nil || IsNil(o.Mapping) {
		var ret DatasourceMappingConfiguration
		return ret
	}
	return *o.Mapping
}

// GetMappingOk returns a tuple with the Mapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceTypeFieldConfiguration) GetMappingOk() (*DatasourceMappingConfiguration, bool) {
	if o == nil || IsNil(o.Mapping) {
		return nil, false
	}
	return o.Mapping, true
}

// HasMapping returns a boolean if a field has been set.
func (o *DatasourceTypeFieldConfiguration) HasMapping() bool {
	if o != nil && !IsNil(o.Mapping) {
		return true
	}

	return false
}

// SetMapping gets a reference to the given DatasourceMappingConfiguration and assigns it to the Mapping field.
func (o *DatasourceTypeFieldConfiguration) SetMapping(v DatasourceMappingConfiguration) {
	o.Mapping = &v
}

// GetTypeName returns the TypeName field value if set, zero value otherwise.
func (o *DatasourceTypeFieldConfiguration) GetTypeName() string {
	if o == nil || IsNil(o.TypeName) {
		var ret string
		return ret
	}
	return *o.TypeName
}

// GetTypeNameOk returns a tuple with the TypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceTypeFieldConfiguration) GetTypeNameOk() (*string, bool) {
	if o == nil || IsNil(o.TypeName) {
		return nil, false
	}
	return o.TypeName, true
}

// HasTypeName returns a boolean if a field has been set.
func (o *DatasourceTypeFieldConfiguration) HasTypeName() bool {
	if o != nil && !IsNil(o.TypeName) {
		return true
	}

	return false
}

// SetTypeName gets a reference to the given string and assigns it to the TypeName field.
func (o *DatasourceTypeFieldConfiguration) SetTypeName(v string) {
	o.TypeName = &v
}

func (o DatasourceTypeFieldConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatasourceTypeFieldConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DataSource) {
		toSerialize["data_source"] = o.DataSource
	}
	if !IsNil(o.FieldName) {
		toSerialize["field_name"] = o.FieldName
	}
	if !IsNil(o.Mapping) {
		toSerialize["mapping"] = o.Mapping
	}
	if !IsNil(o.TypeName) {
		toSerialize["type_name"] = o.TypeName
	}
	return toSerialize, nil
}

type NullableDatasourceTypeFieldConfiguration struct {
	value *DatasourceTypeFieldConfiguration
	isSet bool
}

func (v NullableDatasourceTypeFieldConfiguration) Get() *DatasourceTypeFieldConfiguration {
	return v.value
}

func (v *NullableDatasourceTypeFieldConfiguration) Set(val *DatasourceTypeFieldConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableDatasourceTypeFieldConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableDatasourceTypeFieldConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatasourceTypeFieldConfiguration(val *DatasourceTypeFieldConfiguration) *NullableDatasourceTypeFieldConfiguration {
	return &NullableDatasourceTypeFieldConfiguration{value: val, isSet: true}
}

func (v NullableDatasourceTypeFieldConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatasourceTypeFieldConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


