/*
Tyk Gateway API

The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.  **Warning: Under no circumstances should outside parties be granted access to this API.**  The Tyk Gateway API is capable of:  * Managing session objects (key generation). * Managing and listing policies. * Managing and listing API Definitions (only when not using the Tyk Dashboard). * Hot reloads / reloading a cluster configuration. * OAuth client creation (only when not using the Tyk Dashboard).  In order to use the Gateway API, you'll need to set the **secret** parameter in your tyk.conf file.  The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:  **x-tyk-authorization: <your-secret>*** <br/>  <b>The Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.</b>

API version: 5.7.1
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the Versioning type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Versioning{}

// Versioning struct for Versioning
type Versioning struct {
	Default              *string       `json:"default,omitempty"`
	Enabled              *bool         `json:"enabled,omitempty"`
	FallbackToDefault    *bool         `json:"fallbackToDefault,omitempty"`
	Key                  *string       `json:"key,omitempty"`
	Location             *string       `json:"location,omitempty"`
	Name                 *string       `json:"name,omitempty"`
	StripVersioningData  *bool         `json:"stripVersioningData,omitempty"`
	UrlVersioningPattern *string       `json:"urlVersioningPattern,omitempty"`
	Versions             []VersionToID `json:"versions,omitempty"`
}

// NewVersioning instantiates a new Versioning object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersioning() *Versioning {
	this := Versioning{}
	return &this
}

// NewVersioningWithDefaults instantiates a new Versioning object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersioningWithDefaults() *Versioning {
	this := Versioning{}
	return &this
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *Versioning) GetDefault() string {
	if o == nil || IsNil(o.Default) {
		var ret string
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Versioning) GetDefaultOk() (*string, bool) {
	if o == nil || IsNil(o.Default) {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *Versioning) HasDefault() bool {
	if o != nil && !IsNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given string and assigns it to the Default field.
func (o *Versioning) SetDefault(v string) {
	o.Default = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *Versioning) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Versioning) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *Versioning) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *Versioning) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetFallbackToDefault returns the FallbackToDefault field value if set, zero value otherwise.
func (o *Versioning) GetFallbackToDefault() bool {
	if o == nil || IsNil(o.FallbackToDefault) {
		var ret bool
		return ret
	}
	return *o.FallbackToDefault
}

// GetFallbackToDefaultOk returns a tuple with the FallbackToDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Versioning) GetFallbackToDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.FallbackToDefault) {
		return nil, false
	}
	return o.FallbackToDefault, true
}

// HasFallbackToDefault returns a boolean if a field has been set.
func (o *Versioning) HasFallbackToDefault() bool {
	if o != nil && !IsNil(o.FallbackToDefault) {
		return true
	}

	return false
}

// SetFallbackToDefault gets a reference to the given bool and assigns it to the FallbackToDefault field.
func (o *Versioning) SetFallbackToDefault(v bool) {
	o.FallbackToDefault = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *Versioning) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Versioning) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *Versioning) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *Versioning) SetKey(v string) {
	o.Key = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *Versioning) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Versioning) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *Versioning) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *Versioning) SetLocation(v string) {
	o.Location = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Versioning) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Versioning) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Versioning) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Versioning) SetName(v string) {
	o.Name = &v
}

// GetStripVersioningData returns the StripVersioningData field value if set, zero value otherwise.
func (o *Versioning) GetStripVersioningData() bool {
	if o == nil || IsNil(o.StripVersioningData) {
		var ret bool
		return ret
	}
	return *o.StripVersioningData
}

// GetStripVersioningDataOk returns a tuple with the StripVersioningData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Versioning) GetStripVersioningDataOk() (*bool, bool) {
	if o == nil || IsNil(o.StripVersioningData) {
		return nil, false
	}
	return o.StripVersioningData, true
}

// HasStripVersioningData returns a boolean if a field has been set.
func (o *Versioning) HasStripVersioningData() bool {
	if o != nil && !IsNil(o.StripVersioningData) {
		return true
	}

	return false
}

// SetStripVersioningData gets a reference to the given bool and assigns it to the StripVersioningData field.
func (o *Versioning) SetStripVersioningData(v bool) {
	o.StripVersioningData = &v
}

// GetUrlVersioningPattern returns the UrlVersioningPattern field value if set, zero value otherwise.
func (o *Versioning) GetUrlVersioningPattern() string {
	if o == nil || IsNil(o.UrlVersioningPattern) {
		var ret string
		return ret
	}
	return *o.UrlVersioningPattern
}

// GetUrlVersioningPatternOk returns a tuple with the UrlVersioningPattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Versioning) GetUrlVersioningPatternOk() (*string, bool) {
	if o == nil || IsNil(o.UrlVersioningPattern) {
		return nil, false
	}
	return o.UrlVersioningPattern, true
}

// HasUrlVersioningPattern returns a boolean if a field has been set.
func (o *Versioning) HasUrlVersioningPattern() bool {
	if o != nil && !IsNil(o.UrlVersioningPattern) {
		return true
	}

	return false
}

// SetUrlVersioningPattern gets a reference to the given string and assigns it to the UrlVersioningPattern field.
func (o *Versioning) SetUrlVersioningPattern(v string) {
	o.UrlVersioningPattern = &v
}

// GetVersions returns the Versions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Versioning) GetVersions() []VersionToID {
	if o == nil {
		var ret []VersionToID
		return ret
	}
	return o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Versioning) GetVersionsOk() ([]VersionToID, bool) {
	if o == nil || IsNil(o.Versions) {
		return nil, false
	}
	return o.Versions, true
}

// HasVersions returns a boolean if a field has been set.
func (o *Versioning) HasVersions() bool {
	if o != nil && !IsNil(o.Versions) {
		return true
	}

	return false
}

// SetVersions gets a reference to the given []VersionToID and assigns it to the Versions field.
func (o *Versioning) SetVersions(v []VersionToID) {
	o.Versions = v
}

func (o Versioning) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Versioning) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Default) {
		toSerialize["default"] = o.Default
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.FallbackToDefault) {
		toSerialize["fallbackToDefault"] = o.FallbackToDefault
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.StripVersioningData) {
		toSerialize["stripVersioningData"] = o.StripVersioningData
	}
	if !IsNil(o.UrlVersioningPattern) {
		toSerialize["urlVersioningPattern"] = o.UrlVersioningPattern
	}
	if o.Versions != nil {
		toSerialize["versions"] = o.Versions
	}
	return toSerialize, nil
}

type NullableVersioning struct {
	value *Versioning
	isSet bool
}

func (v NullableVersioning) Get() *Versioning {
	return v.value
}

func (v *NullableVersioning) Set(val *Versioning) {
	v.value = val
	v.isSet = true
}

func (v NullableVersioning) IsSet() bool {
	return v.isSet
}

func (v *NullableVersioning) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersioning(val *Versioning) *NullableVersioning {
	return &NullableVersioning{value: val, isSet: true}
}

func (v NullableVersioning) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersioning) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
