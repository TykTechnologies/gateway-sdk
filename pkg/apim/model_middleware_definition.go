/*
Tyk Gateway API

 The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway

API version: 5.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the MiddlewareDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MiddlewareDefinition{}

// MiddlewareDefinition struct for MiddlewareDefinition
type MiddlewareDefinition struct {
	Disabled *bool `json:"disabled,omitempty"`
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
	RawBodyOnly *bool `json:"raw_body_only,omitempty"`
	RequireSession *bool `json:"require_session,omitempty"`
}

// NewMiddlewareDefinition instantiates a new MiddlewareDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMiddlewareDefinition() *MiddlewareDefinition {
	this := MiddlewareDefinition{}
	return &this
}

// NewMiddlewareDefinitionWithDefaults instantiates a new MiddlewareDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMiddlewareDefinitionWithDefaults() *MiddlewareDefinition {
	this := MiddlewareDefinition{}
	return &this
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *MiddlewareDefinition) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiddlewareDefinition) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *MiddlewareDefinition) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *MiddlewareDefinition) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MiddlewareDefinition) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiddlewareDefinition) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MiddlewareDefinition) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MiddlewareDefinition) SetName(v string) {
	o.Name = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *MiddlewareDefinition) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiddlewareDefinition) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *MiddlewareDefinition) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *MiddlewareDefinition) SetPath(v string) {
	o.Path = &v
}

// GetRawBodyOnly returns the RawBodyOnly field value if set, zero value otherwise.
func (o *MiddlewareDefinition) GetRawBodyOnly() bool {
	if o == nil || IsNil(o.RawBodyOnly) {
		var ret bool
		return ret
	}
	return *o.RawBodyOnly
}

// GetRawBodyOnlyOk returns a tuple with the RawBodyOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiddlewareDefinition) GetRawBodyOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.RawBodyOnly) {
		return nil, false
	}
	return o.RawBodyOnly, true
}

// HasRawBodyOnly returns a boolean if a field has been set.
func (o *MiddlewareDefinition) HasRawBodyOnly() bool {
	if o != nil && !IsNil(o.RawBodyOnly) {
		return true
	}

	return false
}

// SetRawBodyOnly gets a reference to the given bool and assigns it to the RawBodyOnly field.
func (o *MiddlewareDefinition) SetRawBodyOnly(v bool) {
	o.RawBodyOnly = &v
}

// GetRequireSession returns the RequireSession field value if set, zero value otherwise.
func (o *MiddlewareDefinition) GetRequireSession() bool {
	if o == nil || IsNil(o.RequireSession) {
		var ret bool
		return ret
	}
	return *o.RequireSession
}

// GetRequireSessionOk returns a tuple with the RequireSession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiddlewareDefinition) GetRequireSessionOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireSession) {
		return nil, false
	}
	return o.RequireSession, true
}

// HasRequireSession returns a boolean if a field has been set.
func (o *MiddlewareDefinition) HasRequireSession() bool {
	if o != nil && !IsNil(o.RequireSession) {
		return true
	}

	return false
}

// SetRequireSession gets a reference to the given bool and assigns it to the RequireSession field.
func (o *MiddlewareDefinition) SetRequireSession(v bool) {
	o.RequireSession = &v
}

func (o MiddlewareDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MiddlewareDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.RawBodyOnly) {
		toSerialize["raw_body_only"] = o.RawBodyOnly
	}
	if !IsNil(o.RequireSession) {
		toSerialize["require_session"] = o.RequireSession
	}
	return toSerialize, nil
}

type NullableMiddlewareDefinition struct {
	value *MiddlewareDefinition
	isSet bool
}

func (v NullableMiddlewareDefinition) Get() *MiddlewareDefinition {
	return v.value
}

func (v *NullableMiddlewareDefinition) Set(val *MiddlewareDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableMiddlewareDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableMiddlewareDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMiddlewareDefinition(val *MiddlewareDefinition) *NullableMiddlewareDefinition {
	return &NullableMiddlewareDefinition{value: val, isSet: true}
}

func (v NullableMiddlewareDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMiddlewareDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


