/*
Tyk Gateway API

 The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway

API version: 5.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the GlobalRateLimit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GlobalRateLimit{}

// GlobalRateLimit struct for GlobalRateLimit
type GlobalRateLimit struct {
	Disabled *bool `json:"disabled,omitempty"`
	Per *float32 `json:"per,omitempty"`
	Rate *float32 `json:"rate,omitempty"`
}

// NewGlobalRateLimit instantiates a new GlobalRateLimit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGlobalRateLimit() *GlobalRateLimit {
	this := GlobalRateLimit{}
	return &this
}

// NewGlobalRateLimitWithDefaults instantiates a new GlobalRateLimit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGlobalRateLimitWithDefaults() *GlobalRateLimit {
	this := GlobalRateLimit{}
	return &this
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *GlobalRateLimit) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalRateLimit) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *GlobalRateLimit) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *GlobalRateLimit) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetPer returns the Per field value if set, zero value otherwise.
func (o *GlobalRateLimit) GetPer() float32 {
	if o == nil || IsNil(o.Per) {
		var ret float32
		return ret
	}
	return *o.Per
}

// GetPerOk returns a tuple with the Per field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalRateLimit) GetPerOk() (*float32, bool) {
	if o == nil || IsNil(o.Per) {
		return nil, false
	}
	return o.Per, true
}

// HasPer returns a boolean if a field has been set.
func (o *GlobalRateLimit) HasPer() bool {
	if o != nil && !IsNil(o.Per) {
		return true
	}

	return false
}

// SetPer gets a reference to the given float32 and assigns it to the Per field.
func (o *GlobalRateLimit) SetPer(v float32) {
	o.Per = &v
}

// GetRate returns the Rate field value if set, zero value otherwise.
func (o *GlobalRateLimit) GetRate() float32 {
	if o == nil || IsNil(o.Rate) {
		var ret float32
		return ret
	}
	return *o.Rate
}

// GetRateOk returns a tuple with the Rate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalRateLimit) GetRateOk() (*float32, bool) {
	if o == nil || IsNil(o.Rate) {
		return nil, false
	}
	return o.Rate, true
}

// HasRate returns a boolean if a field has been set.
func (o *GlobalRateLimit) HasRate() bool {
	if o != nil && !IsNil(o.Rate) {
		return true
	}

	return false
}

// SetRate gets a reference to the given float32 and assigns it to the Rate field.
func (o *GlobalRateLimit) SetRate(v float32) {
	o.Rate = &v
}

func (o GlobalRateLimit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GlobalRateLimit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.Per) {
		toSerialize["per"] = o.Per
	}
	if !IsNil(o.Rate) {
		toSerialize["rate"] = o.Rate
	}
	return toSerialize, nil
}

type NullableGlobalRateLimit struct {
	value *GlobalRateLimit
	isSet bool
}

func (v NullableGlobalRateLimit) Get() *GlobalRateLimit {
	return v.value
}

func (v *NullableGlobalRateLimit) Set(val *GlobalRateLimit) {
	v.value = val
	v.isSet = true
}

func (v NullableGlobalRateLimit) IsSet() bool {
	return v.isSet
}

func (v *NullableGlobalRateLimit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlobalRateLimit(val *GlobalRateLimit) *NullableGlobalRateLimit {
	return &NullableGlobalRateLimit{value: val, isSet: true}
}

func (v NullableGlobalRateLimit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlobalRateLimit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


