/*
Tyk Gateway API

 The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway

API version: 5.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the ResponseProcessor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseProcessor{}

// ResponseProcessor struct for ResponseProcessor
type ResponseProcessor struct {
	Name *string `json:"name,omitempty"`
	Options interface{} `json:"options,omitempty"`
}

// NewResponseProcessor instantiates a new ResponseProcessor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseProcessor() *ResponseProcessor {
	this := ResponseProcessor{}
	return &this
}

// NewResponseProcessorWithDefaults instantiates a new ResponseProcessor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseProcessorWithDefaults() *ResponseProcessor {
	this := ResponseProcessor{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ResponseProcessor) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseProcessor) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ResponseProcessor) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ResponseProcessor) SetName(v string) {
	o.Name = &v
}

// GetOptions returns the Options field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResponseProcessor) GetOptions() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResponseProcessor) GetOptionsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return &o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *ResponseProcessor) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given interface{} and assigns it to the Options field.
func (o *ResponseProcessor) SetOptions(v interface{}) {
	o.Options = v
}

func (o ResponseProcessor) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseProcessor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.Options != nil {
		toSerialize["options"] = o.Options
	}
	return toSerialize, nil
}

type NullableResponseProcessor struct {
	value *ResponseProcessor
	isSet bool
}

func (v NullableResponseProcessor) Get() *ResponseProcessor {
	return v.value
}

func (v *NullableResponseProcessor) Set(val *ResponseProcessor) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseProcessor) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseProcessor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseProcessor(val *ResponseProcessor) *NullableResponseProcessor {
	return &NullableResponseProcessor{value: val, isSet: true}
}

func (v NullableResponseProcessor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseProcessor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


