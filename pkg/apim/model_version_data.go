/*
Tyk Gateway API

 The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway

API version: 5.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the VersionData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VersionData{}

// VersionData struct for VersionData
type VersionData struct {
	DefaultVersion *string `json:"default_version,omitempty"`
	NotVersioned *bool `json:"not_versioned,omitempty"`
	Versions map[string]VersionInfo `json:"versions,omitempty"`
}

// NewVersionData instantiates a new VersionData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionData() *VersionData {
	this := VersionData{}
	return &this
}

// NewVersionDataWithDefaults instantiates a new VersionData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionDataWithDefaults() *VersionData {
	this := VersionData{}
	return &this
}

// GetDefaultVersion returns the DefaultVersion field value if set, zero value otherwise.
func (o *VersionData) GetDefaultVersion() string {
	if o == nil || IsNil(o.DefaultVersion) {
		var ret string
		return ret
	}
	return *o.DefaultVersion
}

// GetDefaultVersionOk returns a tuple with the DefaultVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionData) GetDefaultVersionOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultVersion) {
		return nil, false
	}
	return o.DefaultVersion, true
}

// HasDefaultVersion returns a boolean if a field has been set.
func (o *VersionData) HasDefaultVersion() bool {
	if o != nil && !IsNil(o.DefaultVersion) {
		return true
	}

	return false
}

// SetDefaultVersion gets a reference to the given string and assigns it to the DefaultVersion field.
func (o *VersionData) SetDefaultVersion(v string) {
	o.DefaultVersion = &v
}

// GetNotVersioned returns the NotVersioned field value if set, zero value otherwise.
func (o *VersionData) GetNotVersioned() bool {
	if o == nil || IsNil(o.NotVersioned) {
		var ret bool
		return ret
	}
	return *o.NotVersioned
}

// GetNotVersionedOk returns a tuple with the NotVersioned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionData) GetNotVersionedOk() (*bool, bool) {
	if o == nil || IsNil(o.NotVersioned) {
		return nil, false
	}
	return o.NotVersioned, true
}

// HasNotVersioned returns a boolean if a field has been set.
func (o *VersionData) HasNotVersioned() bool {
	if o != nil && !IsNil(o.NotVersioned) {
		return true
	}

	return false
}

// SetNotVersioned gets a reference to the given bool and assigns it to the NotVersioned field.
func (o *VersionData) SetNotVersioned(v bool) {
	o.NotVersioned = &v
}

// GetVersions returns the Versions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VersionData) GetVersions() map[string]VersionInfo {
	if o == nil {
		var ret map[string]VersionInfo
		return ret
	}
	return o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VersionData) GetVersionsOk() (*map[string]VersionInfo, bool) {
	if o == nil || IsNil(o.Versions) {
		return nil, false
	}
	return &o.Versions, true
}

// HasVersions returns a boolean if a field has been set.
func (o *VersionData) HasVersions() bool {
	if o != nil && !IsNil(o.Versions) {
		return true
	}

	return false
}

// SetVersions gets a reference to the given map[string]VersionInfo and assigns it to the Versions field.
func (o *VersionData) SetVersions(v map[string]VersionInfo) {
	o.Versions = v
}

func (o VersionData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VersionData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DefaultVersion) {
		toSerialize["default_version"] = o.DefaultVersion
	}
	if !IsNil(o.NotVersioned) {
		toSerialize["not_versioned"] = o.NotVersioned
	}
	if o.Versions != nil {
		toSerialize["versions"] = o.Versions
	}
	return toSerialize, nil
}

type NullableVersionData struct {
	value *VersionData
	isSet bool
}

func (v NullableVersionData) Get() *VersionData {
	return v.value
}

func (v *NullableVersionData) Set(val *VersionData) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionData) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionData(val *VersionData) *NullableVersionData {
	return &NullableVersionData{value: val, isSet: true}
}

func (v NullableVersionData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


