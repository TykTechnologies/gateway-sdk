/*
Tyk Gateway API

 The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway

API version: 5.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the BasicAuthData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BasicAuthData{}

// BasicAuthData struct for BasicAuthData
type BasicAuthData struct {
	HashType *string `json:"hash_type,omitempty"`
	Password *string `json:"password,omitempty"`
}

// NewBasicAuthData instantiates a new BasicAuthData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBasicAuthData() *BasicAuthData {
	this := BasicAuthData{}
	return &this
}

// NewBasicAuthDataWithDefaults instantiates a new BasicAuthData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBasicAuthDataWithDefaults() *BasicAuthData {
	this := BasicAuthData{}
	return &this
}

// GetHashType returns the HashType field value if set, zero value otherwise.
func (o *BasicAuthData) GetHashType() string {
	if o == nil || IsNil(o.HashType) {
		var ret string
		return ret
	}
	return *o.HashType
}

// GetHashTypeOk returns a tuple with the HashType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicAuthData) GetHashTypeOk() (*string, bool) {
	if o == nil || IsNil(o.HashType) {
		return nil, false
	}
	return o.HashType, true
}

// HasHashType returns a boolean if a field has been set.
func (o *BasicAuthData) HasHashType() bool {
	if o != nil && !IsNil(o.HashType) {
		return true
	}

	return false
}

// SetHashType gets a reference to the given string and assigns it to the HashType field.
func (o *BasicAuthData) SetHashType(v string) {
	o.HashType = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *BasicAuthData) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicAuthData) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *BasicAuthData) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *BasicAuthData) SetPassword(v string) {
	o.Password = &v
}

func (o BasicAuthData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BasicAuthData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HashType) {
		toSerialize["hash_type"] = o.HashType
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	return toSerialize, nil
}

type NullableBasicAuthData struct {
	value *BasicAuthData
	isSet bool
}

func (v NullableBasicAuthData) Get() *BasicAuthData {
	return v.value
}

func (v *NullableBasicAuthData) Set(val *BasicAuthData) {
	v.value = val
	v.isSet = true
}

func (v NullableBasicAuthData) IsSet() bool {
	return v.isSet
}

func (v *NullableBasicAuthData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBasicAuthData(val *BasicAuthData) *NullableBasicAuthData {
	return &NullableBasicAuthData{value: val, isSet: true}
}

func (v NullableBasicAuthData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBasicAuthData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


