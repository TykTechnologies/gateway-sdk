/*
Tyk Gateway API

 The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway

API version: 5.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the SignatureConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SignatureConfig{}

// SignatureConfig struct for SignatureConfig
type SignatureConfig struct {
	Algorithm *string `json:"algorithm,omitempty"`
	AllowedClockSkew *int32 `json:"allowed_clock_skew,omitempty"`
	ErrorCode *int32 `json:"error_code,omitempty"`
	ErrorMessage *string `json:"error_message,omitempty"`
	Header *string `json:"header,omitempty"`
	ParamName *string `json:"param_name,omitempty"`
	Secret *string `json:"secret,omitempty"`
	UseParam *bool `json:"use_param,omitempty"`
}

// NewSignatureConfig instantiates a new SignatureConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignatureConfig() *SignatureConfig {
	this := SignatureConfig{}
	return &this
}

// NewSignatureConfigWithDefaults instantiates a new SignatureConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignatureConfigWithDefaults() *SignatureConfig {
	this := SignatureConfig{}
	return &this
}

// GetAlgorithm returns the Algorithm field value if set, zero value otherwise.
func (o *SignatureConfig) GetAlgorithm() string {
	if o == nil || IsNil(o.Algorithm) {
		var ret string
		return ret
	}
	return *o.Algorithm
}

// GetAlgorithmOk returns a tuple with the Algorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignatureConfig) GetAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.Algorithm) {
		return nil, false
	}
	return o.Algorithm, true
}

// HasAlgorithm returns a boolean if a field has been set.
func (o *SignatureConfig) HasAlgorithm() bool {
	if o != nil && !IsNil(o.Algorithm) {
		return true
	}

	return false
}

// SetAlgorithm gets a reference to the given string and assigns it to the Algorithm field.
func (o *SignatureConfig) SetAlgorithm(v string) {
	o.Algorithm = &v
}

// GetAllowedClockSkew returns the AllowedClockSkew field value if set, zero value otherwise.
func (o *SignatureConfig) GetAllowedClockSkew() int32 {
	if o == nil || IsNil(o.AllowedClockSkew) {
		var ret int32
		return ret
	}
	return *o.AllowedClockSkew
}

// GetAllowedClockSkewOk returns a tuple with the AllowedClockSkew field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignatureConfig) GetAllowedClockSkewOk() (*int32, bool) {
	if o == nil || IsNil(o.AllowedClockSkew) {
		return nil, false
	}
	return o.AllowedClockSkew, true
}

// HasAllowedClockSkew returns a boolean if a field has been set.
func (o *SignatureConfig) HasAllowedClockSkew() bool {
	if o != nil && !IsNil(o.AllowedClockSkew) {
		return true
	}

	return false
}

// SetAllowedClockSkew gets a reference to the given int32 and assigns it to the AllowedClockSkew field.
func (o *SignatureConfig) SetAllowedClockSkew(v int32) {
	o.AllowedClockSkew = &v
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *SignatureConfig) GetErrorCode() int32 {
	if o == nil || IsNil(o.ErrorCode) {
		var ret int32
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignatureConfig) GetErrorCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.ErrorCode) {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *SignatureConfig) HasErrorCode() bool {
	if o != nil && !IsNil(o.ErrorCode) {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given int32 and assigns it to the ErrorCode field.
func (o *SignatureConfig) SetErrorCode(v int32) {
	o.ErrorCode = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *SignatureConfig) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage) {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignatureConfig) GetErrorMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMessage) {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *SignatureConfig) HasErrorMessage() bool {
	if o != nil && !IsNil(o.ErrorMessage) {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *SignatureConfig) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

// GetHeader returns the Header field value if set, zero value otherwise.
func (o *SignatureConfig) GetHeader() string {
	if o == nil || IsNil(o.Header) {
		var ret string
		return ret
	}
	return *o.Header
}

// GetHeaderOk returns a tuple with the Header field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignatureConfig) GetHeaderOk() (*string, bool) {
	if o == nil || IsNil(o.Header) {
		return nil, false
	}
	return o.Header, true
}

// HasHeader returns a boolean if a field has been set.
func (o *SignatureConfig) HasHeader() bool {
	if o != nil && !IsNil(o.Header) {
		return true
	}

	return false
}

// SetHeader gets a reference to the given string and assigns it to the Header field.
func (o *SignatureConfig) SetHeader(v string) {
	o.Header = &v
}

// GetParamName returns the ParamName field value if set, zero value otherwise.
func (o *SignatureConfig) GetParamName() string {
	if o == nil || IsNil(o.ParamName) {
		var ret string
		return ret
	}
	return *o.ParamName
}

// GetParamNameOk returns a tuple with the ParamName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignatureConfig) GetParamNameOk() (*string, bool) {
	if o == nil || IsNil(o.ParamName) {
		return nil, false
	}
	return o.ParamName, true
}

// HasParamName returns a boolean if a field has been set.
func (o *SignatureConfig) HasParamName() bool {
	if o != nil && !IsNil(o.ParamName) {
		return true
	}

	return false
}

// SetParamName gets a reference to the given string and assigns it to the ParamName field.
func (o *SignatureConfig) SetParamName(v string) {
	o.ParamName = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *SignatureConfig) GetSecret() string {
	if o == nil || IsNil(o.Secret) {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignatureConfig) GetSecretOk() (*string, bool) {
	if o == nil || IsNil(o.Secret) {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *SignatureConfig) HasSecret() bool {
	if o != nil && !IsNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *SignatureConfig) SetSecret(v string) {
	o.Secret = &v
}

// GetUseParam returns the UseParam field value if set, zero value otherwise.
func (o *SignatureConfig) GetUseParam() bool {
	if o == nil || IsNil(o.UseParam) {
		var ret bool
		return ret
	}
	return *o.UseParam
}

// GetUseParamOk returns a tuple with the UseParam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignatureConfig) GetUseParamOk() (*bool, bool) {
	if o == nil || IsNil(o.UseParam) {
		return nil, false
	}
	return o.UseParam, true
}

// HasUseParam returns a boolean if a field has been set.
func (o *SignatureConfig) HasUseParam() bool {
	if o != nil && !IsNil(o.UseParam) {
		return true
	}

	return false
}

// SetUseParam gets a reference to the given bool and assigns it to the UseParam field.
func (o *SignatureConfig) SetUseParam(v bool) {
	o.UseParam = &v
}

func (o SignatureConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SignatureConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Algorithm) {
		toSerialize["algorithm"] = o.Algorithm
	}
	if !IsNil(o.AllowedClockSkew) {
		toSerialize["allowed_clock_skew"] = o.AllowedClockSkew
	}
	if !IsNil(o.ErrorCode) {
		toSerialize["error_code"] = o.ErrorCode
	}
	if !IsNil(o.ErrorMessage) {
		toSerialize["error_message"] = o.ErrorMessage
	}
	if !IsNil(o.Header) {
		toSerialize["header"] = o.Header
	}
	if !IsNil(o.ParamName) {
		toSerialize["param_name"] = o.ParamName
	}
	if !IsNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	if !IsNil(o.UseParam) {
		toSerialize["use_param"] = o.UseParam
	}
	return toSerialize, nil
}

type NullableSignatureConfig struct {
	value *SignatureConfig
	isSet bool
}

func (v NullableSignatureConfig) Get() *SignatureConfig {
	return v.value
}

func (v *NullableSignatureConfig) Set(val *SignatureConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSignatureConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSignatureConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignatureConfig(val *SignatureConfig) *NullableSignatureConfig {
	return &NullableSignatureConfig{value: val, isSet: true}
}

func (v NullableSignatureConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignatureConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


