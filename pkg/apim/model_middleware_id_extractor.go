/*
Tyk Gateway API

The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.  **Warning: Under no circumstances should outside parties be granted access to this API.**  The Tyk Gateway API is capable of:  * Managing session objects (key generation). * Managing and listing policies. * Managing and listing API Definitions (only when not using the Tyk Dashboard). * Hot reloads / reloading a cluster configuration. * OAuth client creation (only when not using the Tyk Dashboard).  In order to use the Gateway API, you'll need to set the **secret** parameter in your tyk.conf file.  The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:  **x-tyk-authorization: <your-secret>*** <br/>  <b>The Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.</b>

API version: 5.7.1
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the MiddlewareIdExtractor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MiddlewareIdExtractor{}

// MiddlewareIdExtractor struct for MiddlewareIdExtractor
type MiddlewareIdExtractor struct {
	Disabled        *bool                  `json:"disabled,omitempty"`
	ExtractFrom     *string                `json:"extract_from,omitempty"`
	ExtractWith     *string                `json:"extract_with,omitempty"`
	ExtractorConfig map[string]interface{} `json:"extractor_config,omitempty"`
}

// NewMiddlewareIdExtractor instantiates a new MiddlewareIdExtractor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMiddlewareIdExtractor() *MiddlewareIdExtractor {
	this := MiddlewareIdExtractor{}
	return &this
}

// NewMiddlewareIdExtractorWithDefaults instantiates a new MiddlewareIdExtractor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMiddlewareIdExtractorWithDefaults() *MiddlewareIdExtractor {
	this := MiddlewareIdExtractor{}
	return &this
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *MiddlewareIdExtractor) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiddlewareIdExtractor) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *MiddlewareIdExtractor) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *MiddlewareIdExtractor) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetExtractFrom returns the ExtractFrom field value if set, zero value otherwise.
func (o *MiddlewareIdExtractor) GetExtractFrom() string {
	if o == nil || IsNil(o.ExtractFrom) {
		var ret string
		return ret
	}
	return *o.ExtractFrom
}

// GetExtractFromOk returns a tuple with the ExtractFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiddlewareIdExtractor) GetExtractFromOk() (*string, bool) {
	if o == nil || IsNil(o.ExtractFrom) {
		return nil, false
	}
	return o.ExtractFrom, true
}

// HasExtractFrom returns a boolean if a field has been set.
func (o *MiddlewareIdExtractor) HasExtractFrom() bool {
	if o != nil && !IsNil(o.ExtractFrom) {
		return true
	}

	return false
}

// SetExtractFrom gets a reference to the given string and assigns it to the ExtractFrom field.
func (o *MiddlewareIdExtractor) SetExtractFrom(v string) {
	o.ExtractFrom = &v
}

// GetExtractWith returns the ExtractWith field value if set, zero value otherwise.
func (o *MiddlewareIdExtractor) GetExtractWith() string {
	if o == nil || IsNil(o.ExtractWith) {
		var ret string
		return ret
	}
	return *o.ExtractWith
}

// GetExtractWithOk returns a tuple with the ExtractWith field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiddlewareIdExtractor) GetExtractWithOk() (*string, bool) {
	if o == nil || IsNil(o.ExtractWith) {
		return nil, false
	}
	return o.ExtractWith, true
}

// HasExtractWith returns a boolean if a field has been set.
func (o *MiddlewareIdExtractor) HasExtractWith() bool {
	if o != nil && !IsNil(o.ExtractWith) {
		return true
	}

	return false
}

// SetExtractWith gets a reference to the given string and assigns it to the ExtractWith field.
func (o *MiddlewareIdExtractor) SetExtractWith(v string) {
	o.ExtractWith = &v
}

// GetExtractorConfig returns the ExtractorConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MiddlewareIdExtractor) GetExtractorConfig() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtractorConfig
}

// GetExtractorConfigOk returns a tuple with the ExtractorConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MiddlewareIdExtractor) GetExtractorConfigOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtractorConfig) {
		return map[string]interface{}{}, false
	}
	return o.ExtractorConfig, true
}

// HasExtractorConfig returns a boolean if a field has been set.
func (o *MiddlewareIdExtractor) HasExtractorConfig() bool {
	if o != nil && !IsNil(o.ExtractorConfig) {
		return true
	}

	return false
}

// SetExtractorConfig gets a reference to the given map[string]interface{} and assigns it to the ExtractorConfig field.
func (o *MiddlewareIdExtractor) SetExtractorConfig(v map[string]interface{}) {
	o.ExtractorConfig = v
}

func (o MiddlewareIdExtractor) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MiddlewareIdExtractor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.ExtractFrom) {
		toSerialize["extract_from"] = o.ExtractFrom
	}
	if !IsNil(o.ExtractWith) {
		toSerialize["extract_with"] = o.ExtractWith
	}
	if o.ExtractorConfig != nil {
		toSerialize["extractor_config"] = o.ExtractorConfig
	}
	return toSerialize, nil
}

type NullableMiddlewareIdExtractor struct {
	value *MiddlewareIdExtractor
	isSet bool
}

func (v NullableMiddlewareIdExtractor) Get() *MiddlewareIdExtractor {
	return v.value
}

func (v *NullableMiddlewareIdExtractor) Set(val *MiddlewareIdExtractor) {
	v.value = val
	v.isSet = true
}

func (v NullableMiddlewareIdExtractor) IsSet() bool {
	return v.isSet
}

func (v *NullableMiddlewareIdExtractor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMiddlewareIdExtractor(val *MiddlewareIdExtractor) *NullableMiddlewareIdExtractor {
	return &NullableMiddlewareIdExtractor{value: val, isSet: true}
}

func (v NullableMiddlewareIdExtractor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMiddlewareIdExtractor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
