/*
Tyk Gateway API

The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.  **Warning: Under no circumstances should outside parties be granted access to this API.**  The Tyk Gateway API is capable of:  * Managing session objects (key generation). * Managing and listing policies. * Managing and listing API Definitions (only when not using the Tyk Dashboard). * Hot reloads / reloading a cluster configuration. * OAuth client creation (only when not using the Tyk Dashboard).  In order to use the Gateway API, you'll need to set the **secret** parameter in your tyk.conf file.  The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:  **x-tyk-authorization: <your-secret>*** <br/>  <b>The Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.</b>

API version: 5.7.1
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the Operation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Operation{}

// Operation struct for Operation
type Operation struct {
	Allow                    *Allowance              `json:"allow,omitempty"`
	Block                    *Allowance              `json:"block,omitempty"`
	Cache                    *CachePlugin            `json:"cache,omitempty"`
	CircuitBreaker           *CircuitBreaker         `json:"circuitBreaker,omitempty"`
	DoNotTrackEndpoint       *TrackEndpoint          `json:"doNotTrackEndpoint,omitempty"`
	EnforceTimeout           *EnforceTimeout         `json:"enforceTimeout,omitempty"`
	IgnoreAuthentication     *Allowance              `json:"ignoreAuthentication,omitempty"`
	Internal                 *Internal               `json:"internal,omitempty"`
	MockResponse             *MockResponse           `json:"mockResponse,omitempty"`
	PostPlugins              []EndpointPostPlugin    `json:"postPlugins,omitempty"`
	RateLimit                *RateLimitEndpoint      `json:"rateLimit,omitempty"`
	RequestSizeLimit         *RequestSizeLimit       `json:"requestSizeLimit,omitempty"`
	TrackEndpoint            *TrackEndpoint          `json:"trackEndpoint,omitempty"`
	TransformRequestBody     *TransformBody          `json:"transformRequestBody,omitempty"`
	TransformRequestHeaders  *TransformHeaders       `json:"transformRequestHeaders,omitempty"`
	TransformRequestMethod   *TransformRequestMethod `json:"transformRequestMethod,omitempty"`
	TransformResponseBody    *TransformBody          `json:"transformResponseBody,omitempty"`
	TransformResponseHeaders *TransformHeaders       `json:"transformResponseHeaders,omitempty"`
	UrlRewrite               *URLRewrite             `json:"urlRewrite,omitempty"`
	ValidateRequest          *ValidateRequest        `json:"validateRequest,omitempty"`
	VirtualEndpoint          *VirtualEndpoint        `json:"virtualEndpoint,omitempty"`
}

// NewOperation instantiates a new Operation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOperation() *Operation {
	this := Operation{}
	return &this
}

// NewOperationWithDefaults instantiates a new Operation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOperationWithDefaults() *Operation {
	this := Operation{}
	return &this
}

// GetAllow returns the Allow field value if set, zero value otherwise.
func (o *Operation) GetAllow() Allowance {
	if o == nil || IsNil(o.Allow) {
		var ret Allowance
		return ret
	}
	return *o.Allow
}

// GetAllowOk returns a tuple with the Allow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Operation) GetAllowOk() (*Allowance, bool) {
	if o == nil || IsNil(o.Allow) {
		return nil, false
	}
	return o.Allow, true
}

// HasAllow returns a boolean if a field has been set.
func (o *Operation) HasAllow() bool {
	if o != nil && !IsNil(o.Allow) {
		return true
	}

	return false
}

// SetAllow gets a reference to the given Allowance and assigns it to the Allow field.
func (o *Operation) SetAllow(v Allowance) {
	o.Allow = &v
}

// GetBlock returns the Block field value if set, zero value otherwise.
func (o *Operation) GetBlock() Allowance {
	if o == nil || IsNil(o.Block) {
		var ret Allowance
		return ret
	}
	return *o.Block
}

// GetBlockOk returns a tuple with the Block field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Operation) GetBlockOk() (*Allowance, bool) {
	if o == nil || IsNil(o.Block) {
		return nil, false
	}
	return o.Block, true
}

// HasBlock returns a boolean if a field has been set.
func (o *Operation) HasBlock() bool {
	if o != nil && !IsNil(o.Block) {
		return true
	}

	return false
}

// SetBlock gets a reference to the given Allowance and assigns it to the Block field.
func (o *Operation) SetBlock(v Allowance) {
	o.Block = &v
}

// GetCache returns the Cache field value if set, zero value otherwise.
func (o *Operation) GetCache() CachePlugin {
	if o == nil || IsNil(o.Cache) {
		var ret CachePlugin
		return ret
	}
	return *o.Cache
}

// GetCacheOk returns a tuple with the Cache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Operation) GetCacheOk() (*CachePlugin, bool) {
	if o == nil || IsNil(o.Cache) {
		return nil, false
	}
	return o.Cache, true
}

// HasCache returns a boolean if a field has been set.
func (o *Operation) HasCache() bool {
	if o != nil && !IsNil(o.Cache) {
		return true
	}

	return false
}

// SetCache gets a reference to the given CachePlugin and assigns it to the Cache field.
func (o *Operation) SetCache(v CachePlugin) {
	o.Cache = &v
}

// GetCircuitBreaker returns the CircuitBreaker field value if set, zero value otherwise.
func (o *Operation) GetCircuitBreaker() CircuitBreaker {
	if o == nil || IsNil(o.CircuitBreaker) {
		var ret CircuitBreaker
		return ret
	}
	return *o.CircuitBreaker
}

// GetCircuitBreakerOk returns a tuple with the CircuitBreaker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Operation) GetCircuitBreakerOk() (*CircuitBreaker, bool) {
	if o == nil || IsNil(o.CircuitBreaker) {
		return nil, false
	}
	return o.CircuitBreaker, true
}

// HasCircuitBreaker returns a boolean if a field has been set.
func (o *Operation) HasCircuitBreaker() bool {
	if o != nil && !IsNil(o.CircuitBreaker) {
		return true
	}

	return false
}

// SetCircuitBreaker gets a reference to the given CircuitBreaker and assigns it to the CircuitBreaker field.
func (o *Operation) SetCircuitBreaker(v CircuitBreaker) {
	o.CircuitBreaker = &v
}

// GetDoNotTrackEndpoint returns the DoNotTrackEndpoint field value if set, zero value otherwise.
func (o *Operation) GetDoNotTrackEndpoint() TrackEndpoint {
	if o == nil || IsNil(o.DoNotTrackEndpoint) {
		var ret TrackEndpoint
		return ret
	}
	return *o.DoNotTrackEndpoint
}

// GetDoNotTrackEndpointOk returns a tuple with the DoNotTrackEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Operation) GetDoNotTrackEndpointOk() (*TrackEndpoint, bool) {
	if o == nil || IsNil(o.DoNotTrackEndpoint) {
		return nil, false
	}
	return o.DoNotTrackEndpoint, true
}

// HasDoNotTrackEndpoint returns a boolean if a field has been set.
func (o *Operation) HasDoNotTrackEndpoint() bool {
	if o != nil && !IsNil(o.DoNotTrackEndpoint) {
		return true
	}

	return false
}

// SetDoNotTrackEndpoint gets a reference to the given TrackEndpoint and assigns it to the DoNotTrackEndpoint field.
func (o *Operation) SetDoNotTrackEndpoint(v TrackEndpoint) {
	o.DoNotTrackEndpoint = &v
}

// GetEnforceTimeout returns the EnforceTimeout field value if set, zero value otherwise.
func (o *Operation) GetEnforceTimeout() EnforceTimeout {
	if o == nil || IsNil(o.EnforceTimeout) {
		var ret EnforceTimeout
		return ret
	}
	return *o.EnforceTimeout
}

// GetEnforceTimeoutOk returns a tuple with the EnforceTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Operation) GetEnforceTimeoutOk() (*EnforceTimeout, bool) {
	if o == nil || IsNil(o.EnforceTimeout) {
		return nil, false
	}
	return o.EnforceTimeout, true
}

// HasEnforceTimeout returns a boolean if a field has been set.
func (o *Operation) HasEnforceTimeout() bool {
	if o != nil && !IsNil(o.EnforceTimeout) {
		return true
	}

	return false
}

// SetEnforceTimeout gets a reference to the given EnforceTimeout and assigns it to the EnforceTimeout field.
func (o *Operation) SetEnforceTimeout(v EnforceTimeout) {
	o.EnforceTimeout = &v
}

// GetIgnoreAuthentication returns the IgnoreAuthentication field value if set, zero value otherwise.
func (o *Operation) GetIgnoreAuthentication() Allowance {
	if o == nil || IsNil(o.IgnoreAuthentication) {
		var ret Allowance
		return ret
	}
	return *o.IgnoreAuthentication
}

// GetIgnoreAuthenticationOk returns a tuple with the IgnoreAuthentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Operation) GetIgnoreAuthenticationOk() (*Allowance, bool) {
	if o == nil || IsNil(o.IgnoreAuthentication) {
		return nil, false
	}
	return o.IgnoreAuthentication, true
}

// HasIgnoreAuthentication returns a boolean if a field has been set.
func (o *Operation) HasIgnoreAuthentication() bool {
	if o != nil && !IsNil(o.IgnoreAuthentication) {
		return true
	}

	return false
}

// SetIgnoreAuthentication gets a reference to the given Allowance and assigns it to the IgnoreAuthentication field.
func (o *Operation) SetIgnoreAuthentication(v Allowance) {
	o.IgnoreAuthentication = &v
}

// GetInternal returns the Internal field value if set, zero value otherwise.
func (o *Operation) GetInternal() Internal {
	if o == nil || IsNil(o.Internal) {
		var ret Internal
		return ret
	}
	return *o.Internal
}

// GetInternalOk returns a tuple with the Internal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Operation) GetInternalOk() (*Internal, bool) {
	if o == nil || IsNil(o.Internal) {
		return nil, false
	}
	return o.Internal, true
}

// HasInternal returns a boolean if a field has been set.
func (o *Operation) HasInternal() bool {
	if o != nil && !IsNil(o.Internal) {
		return true
	}

	return false
}

// SetInternal gets a reference to the given Internal and assigns it to the Internal field.
func (o *Operation) SetInternal(v Internal) {
	o.Internal = &v
}

// GetMockResponse returns the MockResponse field value if set, zero value otherwise.
func (o *Operation) GetMockResponse() MockResponse {
	if o == nil || IsNil(o.MockResponse) {
		var ret MockResponse
		return ret
	}
	return *o.MockResponse
}

// GetMockResponseOk returns a tuple with the MockResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Operation) GetMockResponseOk() (*MockResponse, bool) {
	if o == nil || IsNil(o.MockResponse) {
		return nil, false
	}
	return o.MockResponse, true
}

// HasMockResponse returns a boolean if a field has been set.
func (o *Operation) HasMockResponse() bool {
	if o != nil && !IsNil(o.MockResponse) {
		return true
	}

	return false
}

// SetMockResponse gets a reference to the given MockResponse and assigns it to the MockResponse field.
func (o *Operation) SetMockResponse(v MockResponse) {
	o.MockResponse = &v
}

// GetPostPlugins returns the PostPlugins field value if set, zero value otherwise.
func (o *Operation) GetPostPlugins() []EndpointPostPlugin {
	if o == nil || IsNil(o.PostPlugins) {
		var ret []EndpointPostPlugin
		return ret
	}
	return o.PostPlugins
}

// GetPostPluginsOk returns a tuple with the PostPlugins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Operation) GetPostPluginsOk() ([]EndpointPostPlugin, bool) {
	if o == nil || IsNil(o.PostPlugins) {
		return nil, false
	}
	return o.PostPlugins, true
}

// HasPostPlugins returns a boolean if a field has been set.
func (o *Operation) HasPostPlugins() bool {
	if o != nil && !IsNil(o.PostPlugins) {
		return true
	}

	return false
}

// SetPostPlugins gets a reference to the given []EndpointPostPlugin and assigns it to the PostPlugins field.
func (o *Operation) SetPostPlugins(v []EndpointPostPlugin) {
	o.PostPlugins = v
}

// GetRateLimit returns the RateLimit field value if set, zero value otherwise.
func (o *Operation) GetRateLimit() RateLimitEndpoint {
	if o == nil || IsNil(o.RateLimit) {
		var ret RateLimitEndpoint
		return ret
	}
	return *o.RateLimit
}

// GetRateLimitOk returns a tuple with the RateLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Operation) GetRateLimitOk() (*RateLimitEndpoint, bool) {
	if o == nil || IsNil(o.RateLimit) {
		return nil, false
	}
	return o.RateLimit, true
}

// HasRateLimit returns a boolean if a field has been set.
func (o *Operation) HasRateLimit() bool {
	if o != nil && !IsNil(o.RateLimit) {
		return true
	}

	return false
}

// SetRateLimit gets a reference to the given RateLimitEndpoint and assigns it to the RateLimit field.
func (o *Operation) SetRateLimit(v RateLimitEndpoint) {
	o.RateLimit = &v
}

// GetRequestSizeLimit returns the RequestSizeLimit field value if set, zero value otherwise.
func (o *Operation) GetRequestSizeLimit() RequestSizeLimit {
	if o == nil || IsNil(o.RequestSizeLimit) {
		var ret RequestSizeLimit
		return ret
	}
	return *o.RequestSizeLimit
}

// GetRequestSizeLimitOk returns a tuple with the RequestSizeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Operation) GetRequestSizeLimitOk() (*RequestSizeLimit, bool) {
	if o == nil || IsNil(o.RequestSizeLimit) {
		return nil, false
	}
	return o.RequestSizeLimit, true
}

// HasRequestSizeLimit returns a boolean if a field has been set.
func (o *Operation) HasRequestSizeLimit() bool {
	if o != nil && !IsNil(o.RequestSizeLimit) {
		return true
	}

	return false
}

// SetRequestSizeLimit gets a reference to the given RequestSizeLimit and assigns it to the RequestSizeLimit field.
func (o *Operation) SetRequestSizeLimit(v RequestSizeLimit) {
	o.RequestSizeLimit = &v
}

// GetTrackEndpoint returns the TrackEndpoint field value if set, zero value otherwise.
func (o *Operation) GetTrackEndpoint() TrackEndpoint {
	if o == nil || IsNil(o.TrackEndpoint) {
		var ret TrackEndpoint
		return ret
	}
	return *o.TrackEndpoint
}

// GetTrackEndpointOk returns a tuple with the TrackEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Operation) GetTrackEndpointOk() (*TrackEndpoint, bool) {
	if o == nil || IsNil(o.TrackEndpoint) {
		return nil, false
	}
	return o.TrackEndpoint, true
}

// HasTrackEndpoint returns a boolean if a field has been set.
func (o *Operation) HasTrackEndpoint() bool {
	if o != nil && !IsNil(o.TrackEndpoint) {
		return true
	}

	return false
}

// SetTrackEndpoint gets a reference to the given TrackEndpoint and assigns it to the TrackEndpoint field.
func (o *Operation) SetTrackEndpoint(v TrackEndpoint) {
	o.TrackEndpoint = &v
}

// GetTransformRequestBody returns the TransformRequestBody field value if set, zero value otherwise.
func (o *Operation) GetTransformRequestBody() TransformBody {
	if o == nil || IsNil(o.TransformRequestBody) {
		var ret TransformBody
		return ret
	}
	return *o.TransformRequestBody
}

// GetTransformRequestBodyOk returns a tuple with the TransformRequestBody field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Operation) GetTransformRequestBodyOk() (*TransformBody, bool) {
	if o == nil || IsNil(o.TransformRequestBody) {
		return nil, false
	}
	return o.TransformRequestBody, true
}

// HasTransformRequestBody returns a boolean if a field has been set.
func (o *Operation) HasTransformRequestBody() bool {
	if o != nil && !IsNil(o.TransformRequestBody) {
		return true
	}

	return false
}

// SetTransformRequestBody gets a reference to the given TransformBody and assigns it to the TransformRequestBody field.
func (o *Operation) SetTransformRequestBody(v TransformBody) {
	o.TransformRequestBody = &v
}

// GetTransformRequestHeaders returns the TransformRequestHeaders field value if set, zero value otherwise.
func (o *Operation) GetTransformRequestHeaders() TransformHeaders {
	if o == nil || IsNil(o.TransformRequestHeaders) {
		var ret TransformHeaders
		return ret
	}
	return *o.TransformRequestHeaders
}

// GetTransformRequestHeadersOk returns a tuple with the TransformRequestHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Operation) GetTransformRequestHeadersOk() (*TransformHeaders, bool) {
	if o == nil || IsNil(o.TransformRequestHeaders) {
		return nil, false
	}
	return o.TransformRequestHeaders, true
}

// HasTransformRequestHeaders returns a boolean if a field has been set.
func (o *Operation) HasTransformRequestHeaders() bool {
	if o != nil && !IsNil(o.TransformRequestHeaders) {
		return true
	}

	return false
}

// SetTransformRequestHeaders gets a reference to the given TransformHeaders and assigns it to the TransformRequestHeaders field.
func (o *Operation) SetTransformRequestHeaders(v TransformHeaders) {
	o.TransformRequestHeaders = &v
}

// GetTransformRequestMethod returns the TransformRequestMethod field value if set, zero value otherwise.
func (o *Operation) GetTransformRequestMethod() TransformRequestMethod {
	if o == nil || IsNil(o.TransformRequestMethod) {
		var ret TransformRequestMethod
		return ret
	}
	return *o.TransformRequestMethod
}

// GetTransformRequestMethodOk returns a tuple with the TransformRequestMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Operation) GetTransformRequestMethodOk() (*TransformRequestMethod, bool) {
	if o == nil || IsNil(o.TransformRequestMethod) {
		return nil, false
	}
	return o.TransformRequestMethod, true
}

// HasTransformRequestMethod returns a boolean if a field has been set.
func (o *Operation) HasTransformRequestMethod() bool {
	if o != nil && !IsNil(o.TransformRequestMethod) {
		return true
	}

	return false
}

// SetTransformRequestMethod gets a reference to the given TransformRequestMethod and assigns it to the TransformRequestMethod field.
func (o *Operation) SetTransformRequestMethod(v TransformRequestMethod) {
	o.TransformRequestMethod = &v
}

// GetTransformResponseBody returns the TransformResponseBody field value if set, zero value otherwise.
func (o *Operation) GetTransformResponseBody() TransformBody {
	if o == nil || IsNil(o.TransformResponseBody) {
		var ret TransformBody
		return ret
	}
	return *o.TransformResponseBody
}

// GetTransformResponseBodyOk returns a tuple with the TransformResponseBody field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Operation) GetTransformResponseBodyOk() (*TransformBody, bool) {
	if o == nil || IsNil(o.TransformResponseBody) {
		return nil, false
	}
	return o.TransformResponseBody, true
}

// HasTransformResponseBody returns a boolean if a field has been set.
func (o *Operation) HasTransformResponseBody() bool {
	if o != nil && !IsNil(o.TransformResponseBody) {
		return true
	}

	return false
}

// SetTransformResponseBody gets a reference to the given TransformBody and assigns it to the TransformResponseBody field.
func (o *Operation) SetTransformResponseBody(v TransformBody) {
	o.TransformResponseBody = &v
}

// GetTransformResponseHeaders returns the TransformResponseHeaders field value if set, zero value otherwise.
func (o *Operation) GetTransformResponseHeaders() TransformHeaders {
	if o == nil || IsNil(o.TransformResponseHeaders) {
		var ret TransformHeaders
		return ret
	}
	return *o.TransformResponseHeaders
}

// GetTransformResponseHeadersOk returns a tuple with the TransformResponseHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Operation) GetTransformResponseHeadersOk() (*TransformHeaders, bool) {
	if o == nil || IsNil(o.TransformResponseHeaders) {
		return nil, false
	}
	return o.TransformResponseHeaders, true
}

// HasTransformResponseHeaders returns a boolean if a field has been set.
func (o *Operation) HasTransformResponseHeaders() bool {
	if o != nil && !IsNil(o.TransformResponseHeaders) {
		return true
	}

	return false
}

// SetTransformResponseHeaders gets a reference to the given TransformHeaders and assigns it to the TransformResponseHeaders field.
func (o *Operation) SetTransformResponseHeaders(v TransformHeaders) {
	o.TransformResponseHeaders = &v
}

// GetUrlRewrite returns the UrlRewrite field value if set, zero value otherwise.
func (o *Operation) GetUrlRewrite() URLRewrite {
	if o == nil || IsNil(o.UrlRewrite) {
		var ret URLRewrite
		return ret
	}
	return *o.UrlRewrite
}

// GetUrlRewriteOk returns a tuple with the UrlRewrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Operation) GetUrlRewriteOk() (*URLRewrite, bool) {
	if o == nil || IsNil(o.UrlRewrite) {
		return nil, false
	}
	return o.UrlRewrite, true
}

// HasUrlRewrite returns a boolean if a field has been set.
func (o *Operation) HasUrlRewrite() bool {
	if o != nil && !IsNil(o.UrlRewrite) {
		return true
	}

	return false
}

// SetUrlRewrite gets a reference to the given URLRewrite and assigns it to the UrlRewrite field.
func (o *Operation) SetUrlRewrite(v URLRewrite) {
	o.UrlRewrite = &v
}

// GetValidateRequest returns the ValidateRequest field value if set, zero value otherwise.
func (o *Operation) GetValidateRequest() ValidateRequest {
	if o == nil || IsNil(o.ValidateRequest) {
		var ret ValidateRequest
		return ret
	}
	return *o.ValidateRequest
}

// GetValidateRequestOk returns a tuple with the ValidateRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Operation) GetValidateRequestOk() (*ValidateRequest, bool) {
	if o == nil || IsNil(o.ValidateRequest) {
		return nil, false
	}
	return o.ValidateRequest, true
}

// HasValidateRequest returns a boolean if a field has been set.
func (o *Operation) HasValidateRequest() bool {
	if o != nil && !IsNil(o.ValidateRequest) {
		return true
	}

	return false
}

// SetValidateRequest gets a reference to the given ValidateRequest and assigns it to the ValidateRequest field.
func (o *Operation) SetValidateRequest(v ValidateRequest) {
	o.ValidateRequest = &v
}

// GetVirtualEndpoint returns the VirtualEndpoint field value if set, zero value otherwise.
func (o *Operation) GetVirtualEndpoint() VirtualEndpoint {
	if o == nil || IsNil(o.VirtualEndpoint) {
		var ret VirtualEndpoint
		return ret
	}
	return *o.VirtualEndpoint
}

// GetVirtualEndpointOk returns a tuple with the VirtualEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Operation) GetVirtualEndpointOk() (*VirtualEndpoint, bool) {
	if o == nil || IsNil(o.VirtualEndpoint) {
		return nil, false
	}
	return o.VirtualEndpoint, true
}

// HasVirtualEndpoint returns a boolean if a field has been set.
func (o *Operation) HasVirtualEndpoint() bool {
	if o != nil && !IsNil(o.VirtualEndpoint) {
		return true
	}

	return false
}

// SetVirtualEndpoint gets a reference to the given VirtualEndpoint and assigns it to the VirtualEndpoint field.
func (o *Operation) SetVirtualEndpoint(v VirtualEndpoint) {
	o.VirtualEndpoint = &v
}

func (o Operation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Operation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Allow) {
		toSerialize["allow"] = o.Allow
	}
	if !IsNil(o.Block) {
		toSerialize["block"] = o.Block
	}
	if !IsNil(o.Cache) {
		toSerialize["cache"] = o.Cache
	}
	if !IsNil(o.CircuitBreaker) {
		toSerialize["circuitBreaker"] = o.CircuitBreaker
	}
	if !IsNil(o.DoNotTrackEndpoint) {
		toSerialize["doNotTrackEndpoint"] = o.DoNotTrackEndpoint
	}
	if !IsNil(o.EnforceTimeout) {
		toSerialize["enforceTimeout"] = o.EnforceTimeout
	}
	if !IsNil(o.IgnoreAuthentication) {
		toSerialize["ignoreAuthentication"] = o.IgnoreAuthentication
	}
	if !IsNil(o.Internal) {
		toSerialize["internal"] = o.Internal
	}
	if !IsNil(o.MockResponse) {
		toSerialize["mockResponse"] = o.MockResponse
	}
	if !IsNil(o.PostPlugins) {
		toSerialize["postPlugins"] = o.PostPlugins
	}
	if !IsNil(o.RateLimit) {
		toSerialize["rateLimit"] = o.RateLimit
	}
	if !IsNil(o.RequestSizeLimit) {
		toSerialize["requestSizeLimit"] = o.RequestSizeLimit
	}
	if !IsNil(o.TrackEndpoint) {
		toSerialize["trackEndpoint"] = o.TrackEndpoint
	}
	if !IsNil(o.TransformRequestBody) {
		toSerialize["transformRequestBody"] = o.TransformRequestBody
	}
	if !IsNil(o.TransformRequestHeaders) {
		toSerialize["transformRequestHeaders"] = o.TransformRequestHeaders
	}
	if !IsNil(o.TransformRequestMethod) {
		toSerialize["transformRequestMethod"] = o.TransformRequestMethod
	}
	if !IsNil(o.TransformResponseBody) {
		toSerialize["transformResponseBody"] = o.TransformResponseBody
	}
	if !IsNil(o.TransformResponseHeaders) {
		toSerialize["transformResponseHeaders"] = o.TransformResponseHeaders
	}
	if !IsNil(o.UrlRewrite) {
		toSerialize["urlRewrite"] = o.UrlRewrite
	}
	if !IsNil(o.ValidateRequest) {
		toSerialize["validateRequest"] = o.ValidateRequest
	}
	if !IsNil(o.VirtualEndpoint) {
		toSerialize["virtualEndpoint"] = o.VirtualEndpoint
	}
	return toSerialize, nil
}

type NullableOperation struct {
	value *Operation
	isSet bool
}

func (v NullableOperation) Get() *Operation {
	return v.value
}

func (v *NullableOperation) Set(val *Operation) {
	v.value = val
	v.isSet = true
}

func (v NullableOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperation(val *Operation) *NullableOperation {
	return &NullableOperation{value: val, isSet: true}
}

func (v NullableOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
