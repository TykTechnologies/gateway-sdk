/*
Tyk Gateway API

The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.  **Warning: Under no circumstances should outside parties be granted access to this API.**  The Tyk Gateway API is capable of:  * Managing session objects (key generation). * Managing and listing policies. * Managing and listing API Definitions (only when not using the Tyk Dashboard). * Hot reloads / reloading a cluster configuration. * OAuth client creation (only when not using the Tyk Dashboard).  In order to use the Gateway API, you'll need to set the **secret** parameter in your tyk.conf file.  The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:  **x-tyk-authorization: <your-secret>*** <br/>  <b>The Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.</b>

API version: 5.7.1
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the TransformHeaders type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransformHeaders{}

// TransformHeaders struct for TransformHeaders
type TransformHeaders struct {
	Add     []Header `json:"add,omitempty"`
	Enabled *bool    `json:"enabled,omitempty"`
	Remove  []string `json:"remove,omitempty"`
}

// NewTransformHeaders instantiates a new TransformHeaders object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransformHeaders() *TransformHeaders {
	this := TransformHeaders{}
	return &this
}

// NewTransformHeadersWithDefaults instantiates a new TransformHeaders object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransformHeadersWithDefaults() *TransformHeaders {
	this := TransformHeaders{}
	return &this
}

// GetAdd returns the Add field value if set, zero value otherwise.
func (o *TransformHeaders) GetAdd() []Header {
	if o == nil || IsNil(o.Add) {
		var ret []Header
		return ret
	}
	return o.Add
}

// GetAddOk returns a tuple with the Add field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransformHeaders) GetAddOk() ([]Header, bool) {
	if o == nil || IsNil(o.Add) {
		return nil, false
	}
	return o.Add, true
}

// HasAdd returns a boolean if a field has been set.
func (o *TransformHeaders) HasAdd() bool {
	if o != nil && !IsNil(o.Add) {
		return true
	}

	return false
}

// SetAdd gets a reference to the given []Header and assigns it to the Add field.
func (o *TransformHeaders) SetAdd(v []Header) {
	o.Add = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *TransformHeaders) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransformHeaders) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *TransformHeaders) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *TransformHeaders) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetRemove returns the Remove field value if set, zero value otherwise.
func (o *TransformHeaders) GetRemove() []string {
	if o == nil || IsNil(o.Remove) {
		var ret []string
		return ret
	}
	return o.Remove
}

// GetRemoveOk returns a tuple with the Remove field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransformHeaders) GetRemoveOk() ([]string, bool) {
	if o == nil || IsNil(o.Remove) {
		return nil, false
	}
	return o.Remove, true
}

// HasRemove returns a boolean if a field has been set.
func (o *TransformHeaders) HasRemove() bool {
	if o != nil && !IsNil(o.Remove) {
		return true
	}

	return false
}

// SetRemove gets a reference to the given []string and assigns it to the Remove field.
func (o *TransformHeaders) SetRemove(v []string) {
	o.Remove = v
}

func (o TransformHeaders) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransformHeaders) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Add) {
		toSerialize["add"] = o.Add
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Remove) {
		toSerialize["remove"] = o.Remove
	}
	return toSerialize, nil
}

type NullableTransformHeaders struct {
	value *TransformHeaders
	isSet bool
}

func (v NullableTransformHeaders) Get() *TransformHeaders {
	return v.value
}

func (v *NullableTransformHeaders) Set(val *TransformHeaders) {
	v.value = val
	v.isSet = true
}

func (v NullableTransformHeaders) IsSet() bool {
	return v.isSet
}

func (v *NullableTransformHeaders) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransformHeaders(val *TransformHeaders) *NullableTransformHeaders {
	return &NullableTransformHeaders{value: val, isSet: true}
}

func (v NullableTransformHeaders) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransformHeaders) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
