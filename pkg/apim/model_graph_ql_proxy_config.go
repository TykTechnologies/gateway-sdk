/*
Tyk Gateway API

The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.  **Warning: Under no circumstances should outside parties be granted access to this API.**  The Tyk Gateway API is capable of:  * Managing session objects (key generation). * Managing and listing policies. * Managing and listing API Definitions (only when not using the Tyk Dashboard). * Hot reloads / reloading a cluster configuration. * OAuth client creation (only when not using the Tyk Dashboard).  In order to use the Gateway API, you'll need to set the **secret** parameter in your tyk.conf file.  The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:  **x-tyk-authorization: <your-secret>*** <br/>  <b>The Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.</b>

API version: 5.7.1
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the GraphQLProxyConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GraphQLProxyConfig{}

// GraphQLProxyConfig struct for GraphQLProxyConfig
type GraphQLProxyConfig struct {
	AuthHeaders           map[string]string                      `json:"auth_headers,omitempty"`
	Features              *GraphQLProxyFeaturesConfig            `json:"features,omitempty"`
	RequestHeaders        map[string]string                      `json:"request_headers,omitempty"`
	RequestHeadersRewrite map[string]RequestHeadersRewriteConfig `json:"request_headers_rewrite,omitempty"`
	SubscriptionType      *string                                `json:"subscription_type,omitempty"`
	UseResponseExtensions *GraphQLResponseExtensions             `json:"use_response_extensions,omitempty"`
}

// NewGraphQLProxyConfig instantiates a new GraphQLProxyConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGraphQLProxyConfig() *GraphQLProxyConfig {
	this := GraphQLProxyConfig{}
	return &this
}

// NewGraphQLProxyConfigWithDefaults instantiates a new GraphQLProxyConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGraphQLProxyConfigWithDefaults() *GraphQLProxyConfig {
	this := GraphQLProxyConfig{}
	return &this
}

// GetAuthHeaders returns the AuthHeaders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GraphQLProxyConfig) GetAuthHeaders() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.AuthHeaders
}

// GetAuthHeadersOk returns a tuple with the AuthHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GraphQLProxyConfig) GetAuthHeadersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.AuthHeaders) {
		return nil, false
	}
	return &o.AuthHeaders, true
}

// HasAuthHeaders returns a boolean if a field has been set.
func (o *GraphQLProxyConfig) HasAuthHeaders() bool {
	if o != nil && !IsNil(o.AuthHeaders) {
		return true
	}

	return false
}

// SetAuthHeaders gets a reference to the given map[string]string and assigns it to the AuthHeaders field.
func (o *GraphQLProxyConfig) SetAuthHeaders(v map[string]string) {
	o.AuthHeaders = v
}

// GetFeatures returns the Features field value if set, zero value otherwise.
func (o *GraphQLProxyConfig) GetFeatures() GraphQLProxyFeaturesConfig {
	if o == nil || IsNil(o.Features) {
		var ret GraphQLProxyFeaturesConfig
		return ret
	}
	return *o.Features
}

// GetFeaturesOk returns a tuple with the Features field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphQLProxyConfig) GetFeaturesOk() (*GraphQLProxyFeaturesConfig, bool) {
	if o == nil || IsNil(o.Features) {
		return nil, false
	}
	return o.Features, true
}

// HasFeatures returns a boolean if a field has been set.
func (o *GraphQLProxyConfig) HasFeatures() bool {
	if o != nil && !IsNil(o.Features) {
		return true
	}

	return false
}

// SetFeatures gets a reference to the given GraphQLProxyFeaturesConfig and assigns it to the Features field.
func (o *GraphQLProxyConfig) SetFeatures(v GraphQLProxyFeaturesConfig) {
	o.Features = &v
}

// GetRequestHeaders returns the RequestHeaders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GraphQLProxyConfig) GetRequestHeaders() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.RequestHeaders
}

// GetRequestHeadersOk returns a tuple with the RequestHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GraphQLProxyConfig) GetRequestHeadersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.RequestHeaders) {
		return nil, false
	}
	return &o.RequestHeaders, true
}

// HasRequestHeaders returns a boolean if a field has been set.
func (o *GraphQLProxyConfig) HasRequestHeaders() bool {
	if o != nil && !IsNil(o.RequestHeaders) {
		return true
	}

	return false
}

// SetRequestHeaders gets a reference to the given map[string]string and assigns it to the RequestHeaders field.
func (o *GraphQLProxyConfig) SetRequestHeaders(v map[string]string) {
	o.RequestHeaders = v
}

// GetRequestHeadersRewrite returns the RequestHeadersRewrite field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GraphQLProxyConfig) GetRequestHeadersRewrite() map[string]RequestHeadersRewriteConfig {
	if o == nil {
		var ret map[string]RequestHeadersRewriteConfig
		return ret
	}
	return o.RequestHeadersRewrite
}

// GetRequestHeadersRewriteOk returns a tuple with the RequestHeadersRewrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GraphQLProxyConfig) GetRequestHeadersRewriteOk() (*map[string]RequestHeadersRewriteConfig, bool) {
	if o == nil || IsNil(o.RequestHeadersRewrite) {
		return nil, false
	}
	return &o.RequestHeadersRewrite, true
}

// HasRequestHeadersRewrite returns a boolean if a field has been set.
func (o *GraphQLProxyConfig) HasRequestHeadersRewrite() bool {
	if o != nil && !IsNil(o.RequestHeadersRewrite) {
		return true
	}

	return false
}

// SetRequestHeadersRewrite gets a reference to the given map[string]RequestHeadersRewriteConfig and assigns it to the RequestHeadersRewrite field.
func (o *GraphQLProxyConfig) SetRequestHeadersRewrite(v map[string]RequestHeadersRewriteConfig) {
	o.RequestHeadersRewrite = v
}

// GetSubscriptionType returns the SubscriptionType field value if set, zero value otherwise.
func (o *GraphQLProxyConfig) GetSubscriptionType() string {
	if o == nil || IsNil(o.SubscriptionType) {
		var ret string
		return ret
	}
	return *o.SubscriptionType
}

// GetSubscriptionTypeOk returns a tuple with the SubscriptionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphQLProxyConfig) GetSubscriptionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SubscriptionType) {
		return nil, false
	}
	return o.SubscriptionType, true
}

// HasSubscriptionType returns a boolean if a field has been set.
func (o *GraphQLProxyConfig) HasSubscriptionType() bool {
	if o != nil && !IsNil(o.SubscriptionType) {
		return true
	}

	return false
}

// SetSubscriptionType gets a reference to the given string and assigns it to the SubscriptionType field.
func (o *GraphQLProxyConfig) SetSubscriptionType(v string) {
	o.SubscriptionType = &v
}

// GetUseResponseExtensions returns the UseResponseExtensions field value if set, zero value otherwise.
func (o *GraphQLProxyConfig) GetUseResponseExtensions() GraphQLResponseExtensions {
	if o == nil || IsNil(o.UseResponseExtensions) {
		var ret GraphQLResponseExtensions
		return ret
	}
	return *o.UseResponseExtensions
}

// GetUseResponseExtensionsOk returns a tuple with the UseResponseExtensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphQLProxyConfig) GetUseResponseExtensionsOk() (*GraphQLResponseExtensions, bool) {
	if o == nil || IsNil(o.UseResponseExtensions) {
		return nil, false
	}
	return o.UseResponseExtensions, true
}

// HasUseResponseExtensions returns a boolean if a field has been set.
func (o *GraphQLProxyConfig) HasUseResponseExtensions() bool {
	if o != nil && !IsNil(o.UseResponseExtensions) {
		return true
	}

	return false
}

// SetUseResponseExtensions gets a reference to the given GraphQLResponseExtensions and assigns it to the UseResponseExtensions field.
func (o *GraphQLProxyConfig) SetUseResponseExtensions(v GraphQLResponseExtensions) {
	o.UseResponseExtensions = &v
}

func (o GraphQLProxyConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GraphQLProxyConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AuthHeaders != nil {
		toSerialize["auth_headers"] = o.AuthHeaders
	}
	if !IsNil(o.Features) {
		toSerialize["features"] = o.Features
	}
	if o.RequestHeaders != nil {
		toSerialize["request_headers"] = o.RequestHeaders
	}
	if o.RequestHeadersRewrite != nil {
		toSerialize["request_headers_rewrite"] = o.RequestHeadersRewrite
	}
	if !IsNil(o.SubscriptionType) {
		toSerialize["subscription_type"] = o.SubscriptionType
	}
	if !IsNil(o.UseResponseExtensions) {
		toSerialize["use_response_extensions"] = o.UseResponseExtensions
	}
	return toSerialize, nil
}

type NullableGraphQLProxyConfig struct {
	value *GraphQLProxyConfig
	isSet bool
}

func (v NullableGraphQLProxyConfig) Get() *GraphQLProxyConfig {
	return v.value
}

func (v *NullableGraphQLProxyConfig) Set(val *GraphQLProxyConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableGraphQLProxyConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableGraphQLProxyConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGraphQLProxyConfig(val *GraphQLProxyConfig) *NullableGraphQLProxyConfig {
	return &NullableGraphQLProxyConfig{value: val, isSet: true}
}

func (v NullableGraphQLProxyConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGraphQLProxyConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
