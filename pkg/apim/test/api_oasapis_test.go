/*
Tyk Gateway API

Testing OASAPIsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package apim

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/TykTechnologies/gateway-sdk/pkg/apim"
)

func Test_apim_OASAPIsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OASAPIsAPIService CreateApiOAS", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OASAPIsAPI.CreateApiOAS(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OASAPIsAPIService DeleteOASApi", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiID string

		resp, httpRes, err := apiClient.OASAPIsAPI.DeleteOASApi(context.Background(), apiID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OASAPIsAPIService DownloadApiOASPublic", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiID string

		resp, httpRes, err := apiClient.OASAPIsAPI.DownloadApiOASPublic(context.Background(), apiID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OASAPIsAPIService DownloadApisOASPublic", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OASAPIsAPI.DownloadApisOASPublic(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OASAPIsAPIService ImportOAS", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OASAPIsAPI.ImportOAS(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OASAPIsAPIService ListApiOAS", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiID string

		resp, httpRes, err := apiClient.OASAPIsAPI.ListApiOAS(context.Background(), apiID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OASAPIsAPIService ListApisOAS", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OASAPIsAPI.ListApisOAS(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OASAPIsAPIService ListOASApiVersions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiID string

		resp, httpRes, err := apiClient.OASAPIsAPI.ListOASApiVersions(context.Background(), apiID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OASAPIsAPIService PatchApiOAS", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiID string

		resp, httpRes, err := apiClient.OASAPIsAPI.PatchApiOAS(context.Background(), apiID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OASAPIsAPIService UpdateApiOAS", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiID string

		resp, httpRes, err := apiClient.OASAPIsAPI.UpdateApiOAS(context.Background(), apiID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
