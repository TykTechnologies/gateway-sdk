/*
Tyk Gateway API

Testing OAuthAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package apim

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/TykTechnologies/gateway-sdk/pkg/apim"
)

func Test_apim_OAuthAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OAuthAPIService AuthorizeClient", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OAuthAPI.AuthorizeClient(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OAuthAPIService CreateOAuthClient", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OAuthAPI.CreateOAuthClient(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OAuthAPIService DeleteOAuthClient", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiID string
		var keyName string

		resp, httpRes, err := apiClient.OAuthAPI.DeleteOAuthClient(context.Background(), apiID, keyName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OAuthAPIService GetOAuthClient", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiID string
		var keyName string

		resp, httpRes, err := apiClient.OAuthAPI.GetOAuthClient(context.Background(), apiID, keyName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OAuthAPIService GetOAuthClientTokens", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiID string
		var keyName string

		resp, httpRes, err := apiClient.OAuthAPI.GetOAuthClientTokens(context.Background(), apiID, keyName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OAuthAPIService InvalidateOAuthRefresh", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var keyName string

		resp, httpRes, err := apiClient.OAuthAPI.InvalidateOAuthRefresh(context.Background(), keyName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OAuthAPIService ListOAuthClients", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiID string

		resp, httpRes, err := apiClient.OAuthAPI.ListOAuthClients(context.Background(), apiID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OAuthAPIService RevokeAllTokens", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.OAuthAPI.RevokeAllTokens(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OAuthAPIService RevokeSingleToken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.OAuthAPI.RevokeSingleToken(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OAuthAPIService UpdateoAuthClient", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiID string

		resp, httpRes, err := apiClient.OAuthAPI.UpdateoAuthClient(context.Background(), apiID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
