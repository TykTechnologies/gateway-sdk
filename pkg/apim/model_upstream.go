/*
Tyk Gateway API

The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.  **Warning: Under no circumstances should outside parties be granted access to this API.**  The Tyk Gateway API is capable of:  * Managing session objects (key generation). * Managing and listing policies. * Managing and listing API Definitions (only when not using the Tyk Dashboard). * Hot reloads / reloading a cluster configuration. * OAuth client creation (only when not using the Tyk Dashboard).  In order to use the Gateway API, you'll need to set the **secret** parameter in your tyk.conf file.  The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:  **x-tyk-authorization: <your-secret>*** <br/>  <b>The Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.</b>

API version: 5.7.1
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the Upstream type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Upstream{}

// Upstream struct for Upstream
type Upstream struct {
	CertificatePinning *CertificatePinning `json:"certificatePinning,omitempty"`
	MutualTLS          *MutualTLS          `json:"mutualTLS,omitempty"`
	RateLimit          *RateLimit          `json:"rateLimit,omitempty"`
	ServiceDiscovery   *ServiceDiscovery   `json:"serviceDiscovery,omitempty"`
	Test               *Test               `json:"test,omitempty"`
	Url                *string             `json:"url,omitempty"`
}

// NewUpstream instantiates a new Upstream object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpstream() *Upstream {
	this := Upstream{}
	return &this
}

// NewUpstreamWithDefaults instantiates a new Upstream object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpstreamWithDefaults() *Upstream {
	this := Upstream{}
	return &this
}

// GetCertificatePinning returns the CertificatePinning field value if set, zero value otherwise.
func (o *Upstream) GetCertificatePinning() CertificatePinning {
	if o == nil || IsNil(o.CertificatePinning) {
		var ret CertificatePinning
		return ret
	}
	return *o.CertificatePinning
}

// GetCertificatePinningOk returns a tuple with the CertificatePinning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upstream) GetCertificatePinningOk() (*CertificatePinning, bool) {
	if o == nil || IsNil(o.CertificatePinning) {
		return nil, false
	}
	return o.CertificatePinning, true
}

// HasCertificatePinning returns a boolean if a field has been set.
func (o *Upstream) HasCertificatePinning() bool {
	if o != nil && !IsNil(o.CertificatePinning) {
		return true
	}

	return false
}

// SetCertificatePinning gets a reference to the given CertificatePinning and assigns it to the CertificatePinning field.
func (o *Upstream) SetCertificatePinning(v CertificatePinning) {
	o.CertificatePinning = &v
}

// GetMutualTLS returns the MutualTLS field value if set, zero value otherwise.
func (o *Upstream) GetMutualTLS() MutualTLS {
	if o == nil || IsNil(o.MutualTLS) {
		var ret MutualTLS
		return ret
	}
	return *o.MutualTLS
}

// GetMutualTLSOk returns a tuple with the MutualTLS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upstream) GetMutualTLSOk() (*MutualTLS, bool) {
	if o == nil || IsNil(o.MutualTLS) {
		return nil, false
	}
	return o.MutualTLS, true
}

// HasMutualTLS returns a boolean if a field has been set.
func (o *Upstream) HasMutualTLS() bool {
	if o != nil && !IsNil(o.MutualTLS) {
		return true
	}

	return false
}

// SetMutualTLS gets a reference to the given MutualTLS and assigns it to the MutualTLS field.
func (o *Upstream) SetMutualTLS(v MutualTLS) {
	o.MutualTLS = &v
}

// GetRateLimit returns the RateLimit field value if set, zero value otherwise.
func (o *Upstream) GetRateLimit() RateLimit {
	if o == nil || IsNil(o.RateLimit) {
		var ret RateLimit
		return ret
	}
	return *o.RateLimit
}

// GetRateLimitOk returns a tuple with the RateLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upstream) GetRateLimitOk() (*RateLimit, bool) {
	if o == nil || IsNil(o.RateLimit) {
		return nil, false
	}
	return o.RateLimit, true
}

// HasRateLimit returns a boolean if a field has been set.
func (o *Upstream) HasRateLimit() bool {
	if o != nil && !IsNil(o.RateLimit) {
		return true
	}

	return false
}

// SetRateLimit gets a reference to the given RateLimit and assigns it to the RateLimit field.
func (o *Upstream) SetRateLimit(v RateLimit) {
	o.RateLimit = &v
}

// GetServiceDiscovery returns the ServiceDiscovery field value if set, zero value otherwise.
func (o *Upstream) GetServiceDiscovery() ServiceDiscovery {
	if o == nil || IsNil(o.ServiceDiscovery) {
		var ret ServiceDiscovery
		return ret
	}
	return *o.ServiceDiscovery
}

// GetServiceDiscoveryOk returns a tuple with the ServiceDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upstream) GetServiceDiscoveryOk() (*ServiceDiscovery, bool) {
	if o == nil || IsNil(o.ServiceDiscovery) {
		return nil, false
	}
	return o.ServiceDiscovery, true
}

// HasServiceDiscovery returns a boolean if a field has been set.
func (o *Upstream) HasServiceDiscovery() bool {
	if o != nil && !IsNil(o.ServiceDiscovery) {
		return true
	}

	return false
}

// SetServiceDiscovery gets a reference to the given ServiceDiscovery and assigns it to the ServiceDiscovery field.
func (o *Upstream) SetServiceDiscovery(v ServiceDiscovery) {
	o.ServiceDiscovery = &v
}

// GetTest returns the Test field value if set, zero value otherwise.
func (o *Upstream) GetTest() Test {
	if o == nil || IsNil(o.Test) {
		var ret Test
		return ret
	}
	return *o.Test
}

// GetTestOk returns a tuple with the Test field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upstream) GetTestOk() (*Test, bool) {
	if o == nil || IsNil(o.Test) {
		return nil, false
	}
	return o.Test, true
}

// HasTest returns a boolean if a field has been set.
func (o *Upstream) HasTest() bool {
	if o != nil && !IsNil(o.Test) {
		return true
	}

	return false
}

// SetTest gets a reference to the given Test and assigns it to the Test field.
func (o *Upstream) SetTest(v Test) {
	o.Test = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Upstream) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upstream) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Upstream) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Upstream) SetUrl(v string) {
	o.Url = &v
}

func (o Upstream) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Upstream) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CertificatePinning) {
		toSerialize["certificatePinning"] = o.CertificatePinning
	}
	if !IsNil(o.MutualTLS) {
		toSerialize["mutualTLS"] = o.MutualTLS
	}
	if !IsNil(o.RateLimit) {
		toSerialize["rateLimit"] = o.RateLimit
	}
	if !IsNil(o.ServiceDiscovery) {
		toSerialize["serviceDiscovery"] = o.ServiceDiscovery
	}
	if !IsNil(o.Test) {
		toSerialize["test"] = o.Test
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableUpstream struct {
	value *Upstream
	isSet bool
}

func (v NullableUpstream) Get() *Upstream {
	return v.value
}

func (v *NullableUpstream) Set(val *Upstream) {
	v.value = val
	v.isSet = true
}

func (v NullableUpstream) IsSet() bool {
	return v.isSet
}

func (v *NullableUpstream) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpstream(val *Upstream) *NullableUpstream {
	return &NullableUpstream{value: val, isSet: true}
}

func (v NullableUpstream) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpstream) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
