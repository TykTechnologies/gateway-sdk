/*
Tyk Gateway API

The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.  **Warning: Under no circumstances should outside parties be granted access to this API.**  The Tyk Gateway API is capable of:  * Managing session objects (key generation). * Managing and listing policies. * Managing and listing API Definitions (only when not using the Tyk Dashboard). * Hot reloads / reloading a cluster configuration. * OAuth client creation (only when not using the Tyk Dashboard).  In order to use the Gateway API, you'll need to set the **secret** parameter in your tyk.conf file.  The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:  **x-tyk-authorization: <your-secret>*** <br/>  <b>The Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.</b>

API version: 5.7.1
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the CORSConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CORSConfig{}

// CORSConfig struct for CORSConfig
type CORSConfig struct {
	AllowCredentials   *bool    `json:"allow_credentials,omitempty"`
	AllowedHeaders     []string `json:"allowed_headers,omitempty"`
	AllowedMethods     []string `json:"allowed_methods,omitempty"`
	AllowedOrigins     []string `json:"allowed_origins,omitempty"`
	Debug              *bool    `json:"debug,omitempty"`
	Enable             *bool    `json:"enable,omitempty"`
	ExposedHeaders     []string `json:"exposed_headers,omitempty"`
	MaxAge             *int32   `json:"max_age,omitempty"`
	OptionsPassthrough *bool    `json:"options_passthrough,omitempty"`
}

// NewCORSConfig instantiates a new CORSConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCORSConfig() *CORSConfig {
	this := CORSConfig{}
	return &this
}

// NewCORSConfigWithDefaults instantiates a new CORSConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCORSConfigWithDefaults() *CORSConfig {
	this := CORSConfig{}
	return &this
}

// GetAllowCredentials returns the AllowCredentials field value if set, zero value otherwise.
func (o *CORSConfig) GetAllowCredentials() bool {
	if o == nil || IsNil(o.AllowCredentials) {
		var ret bool
		return ret
	}
	return *o.AllowCredentials
}

// GetAllowCredentialsOk returns a tuple with the AllowCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CORSConfig) GetAllowCredentialsOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowCredentials) {
		return nil, false
	}
	return o.AllowCredentials, true
}

// HasAllowCredentials returns a boolean if a field has been set.
func (o *CORSConfig) HasAllowCredentials() bool {
	if o != nil && !IsNil(o.AllowCredentials) {
		return true
	}

	return false
}

// SetAllowCredentials gets a reference to the given bool and assigns it to the AllowCredentials field.
func (o *CORSConfig) SetAllowCredentials(v bool) {
	o.AllowCredentials = &v
}

// GetAllowedHeaders returns the AllowedHeaders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CORSConfig) GetAllowedHeaders() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.AllowedHeaders
}

// GetAllowedHeadersOk returns a tuple with the AllowedHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CORSConfig) GetAllowedHeadersOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedHeaders) {
		return nil, false
	}
	return o.AllowedHeaders, true
}

// HasAllowedHeaders returns a boolean if a field has been set.
func (o *CORSConfig) HasAllowedHeaders() bool {
	if o != nil && !IsNil(o.AllowedHeaders) {
		return true
	}

	return false
}

// SetAllowedHeaders gets a reference to the given []string and assigns it to the AllowedHeaders field.
func (o *CORSConfig) SetAllowedHeaders(v []string) {
	o.AllowedHeaders = v
}

// GetAllowedMethods returns the AllowedMethods field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CORSConfig) GetAllowedMethods() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.AllowedMethods
}

// GetAllowedMethodsOk returns a tuple with the AllowedMethods field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CORSConfig) GetAllowedMethodsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedMethods) {
		return nil, false
	}
	return o.AllowedMethods, true
}

// HasAllowedMethods returns a boolean if a field has been set.
func (o *CORSConfig) HasAllowedMethods() bool {
	if o != nil && !IsNil(o.AllowedMethods) {
		return true
	}

	return false
}

// SetAllowedMethods gets a reference to the given []string and assigns it to the AllowedMethods field.
func (o *CORSConfig) SetAllowedMethods(v []string) {
	o.AllowedMethods = v
}

// GetAllowedOrigins returns the AllowedOrigins field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CORSConfig) GetAllowedOrigins() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.AllowedOrigins
}

// GetAllowedOriginsOk returns a tuple with the AllowedOrigins field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CORSConfig) GetAllowedOriginsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedOrigins) {
		return nil, false
	}
	return o.AllowedOrigins, true
}

// HasAllowedOrigins returns a boolean if a field has been set.
func (o *CORSConfig) HasAllowedOrigins() bool {
	if o != nil && !IsNil(o.AllowedOrigins) {
		return true
	}

	return false
}

// SetAllowedOrigins gets a reference to the given []string and assigns it to the AllowedOrigins field.
func (o *CORSConfig) SetAllowedOrigins(v []string) {
	o.AllowedOrigins = v
}

// GetDebug returns the Debug field value if set, zero value otherwise.
func (o *CORSConfig) GetDebug() bool {
	if o == nil || IsNil(o.Debug) {
		var ret bool
		return ret
	}
	return *o.Debug
}

// GetDebugOk returns a tuple with the Debug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CORSConfig) GetDebugOk() (*bool, bool) {
	if o == nil || IsNil(o.Debug) {
		return nil, false
	}
	return o.Debug, true
}

// HasDebug returns a boolean if a field has been set.
func (o *CORSConfig) HasDebug() bool {
	if o != nil && !IsNil(o.Debug) {
		return true
	}

	return false
}

// SetDebug gets a reference to the given bool and assigns it to the Debug field.
func (o *CORSConfig) SetDebug(v bool) {
	o.Debug = &v
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *CORSConfig) GetEnable() bool {
	if o == nil || IsNil(o.Enable) {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CORSConfig) GetEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.Enable) {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *CORSConfig) HasEnable() bool {
	if o != nil && !IsNil(o.Enable) {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *CORSConfig) SetEnable(v bool) {
	o.Enable = &v
}

// GetExposedHeaders returns the ExposedHeaders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CORSConfig) GetExposedHeaders() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ExposedHeaders
}

// GetExposedHeadersOk returns a tuple with the ExposedHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CORSConfig) GetExposedHeadersOk() ([]string, bool) {
	if o == nil || IsNil(o.ExposedHeaders) {
		return nil, false
	}
	return o.ExposedHeaders, true
}

// HasExposedHeaders returns a boolean if a field has been set.
func (o *CORSConfig) HasExposedHeaders() bool {
	if o != nil && !IsNil(o.ExposedHeaders) {
		return true
	}

	return false
}

// SetExposedHeaders gets a reference to the given []string and assigns it to the ExposedHeaders field.
func (o *CORSConfig) SetExposedHeaders(v []string) {
	o.ExposedHeaders = v
}

// GetMaxAge returns the MaxAge field value if set, zero value otherwise.
func (o *CORSConfig) GetMaxAge() int32 {
	if o == nil || IsNil(o.MaxAge) {
		var ret int32
		return ret
	}
	return *o.MaxAge
}

// GetMaxAgeOk returns a tuple with the MaxAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CORSConfig) GetMaxAgeOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxAge) {
		return nil, false
	}
	return o.MaxAge, true
}

// HasMaxAge returns a boolean if a field has been set.
func (o *CORSConfig) HasMaxAge() bool {
	if o != nil && !IsNil(o.MaxAge) {
		return true
	}

	return false
}

// SetMaxAge gets a reference to the given int32 and assigns it to the MaxAge field.
func (o *CORSConfig) SetMaxAge(v int32) {
	o.MaxAge = &v
}

// GetOptionsPassthrough returns the OptionsPassthrough field value if set, zero value otherwise.
func (o *CORSConfig) GetOptionsPassthrough() bool {
	if o == nil || IsNil(o.OptionsPassthrough) {
		var ret bool
		return ret
	}
	return *o.OptionsPassthrough
}

// GetOptionsPassthroughOk returns a tuple with the OptionsPassthrough field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CORSConfig) GetOptionsPassthroughOk() (*bool, bool) {
	if o == nil || IsNil(o.OptionsPassthrough) {
		return nil, false
	}
	return o.OptionsPassthrough, true
}

// HasOptionsPassthrough returns a boolean if a field has been set.
func (o *CORSConfig) HasOptionsPassthrough() bool {
	if o != nil && !IsNil(o.OptionsPassthrough) {
		return true
	}

	return false
}

// SetOptionsPassthrough gets a reference to the given bool and assigns it to the OptionsPassthrough field.
func (o *CORSConfig) SetOptionsPassthrough(v bool) {
	o.OptionsPassthrough = &v
}

func (o CORSConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CORSConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowCredentials) {
		toSerialize["allow_credentials"] = o.AllowCredentials
	}
	if o.AllowedHeaders != nil {
		toSerialize["allowed_headers"] = o.AllowedHeaders
	}
	if o.AllowedMethods != nil {
		toSerialize["allowed_methods"] = o.AllowedMethods
	}
	if o.AllowedOrigins != nil {
		toSerialize["allowed_origins"] = o.AllowedOrigins
	}
	if !IsNil(o.Debug) {
		toSerialize["debug"] = o.Debug
	}
	if !IsNil(o.Enable) {
		toSerialize["enable"] = o.Enable
	}
	if o.ExposedHeaders != nil {
		toSerialize["exposed_headers"] = o.ExposedHeaders
	}
	if !IsNil(o.MaxAge) {
		toSerialize["max_age"] = o.MaxAge
	}
	if !IsNil(o.OptionsPassthrough) {
		toSerialize["options_passthrough"] = o.OptionsPassthrough
	}
	return toSerialize, nil
}

type NullableCORSConfig struct {
	value *CORSConfig
	isSet bool
}

func (v NullableCORSConfig) Get() *CORSConfig {
	return v.value
}

func (v *NullableCORSConfig) Set(val *CORSConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableCORSConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableCORSConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCORSConfig(val *CORSConfig) *NullableCORSConfig {
	return &NullableCORSConfig{value: val, isSet: true}
}

func (v NullableCORSConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCORSConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
