/*
Tyk Gateway API

 The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway

API version: 5.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the GraphQLSubgraphConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GraphQLSubgraphConfig{}

// GraphQLSubgraphConfig struct for GraphQLSubgraphConfig
type GraphQLSubgraphConfig struct {
	Sdl *string `json:"sdl,omitempty"`
}

// NewGraphQLSubgraphConfig instantiates a new GraphQLSubgraphConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGraphQLSubgraphConfig() *GraphQLSubgraphConfig {
	this := GraphQLSubgraphConfig{}
	return &this
}

// NewGraphQLSubgraphConfigWithDefaults instantiates a new GraphQLSubgraphConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGraphQLSubgraphConfigWithDefaults() *GraphQLSubgraphConfig {
	this := GraphQLSubgraphConfig{}
	return &this
}

// GetSdl returns the Sdl field value if set, zero value otherwise.
func (o *GraphQLSubgraphConfig) GetSdl() string {
	if o == nil || IsNil(o.Sdl) {
		var ret string
		return ret
	}
	return *o.Sdl
}

// GetSdlOk returns a tuple with the Sdl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphQLSubgraphConfig) GetSdlOk() (*string, bool) {
	if o == nil || IsNil(o.Sdl) {
		return nil, false
	}
	return o.Sdl, true
}

// HasSdl returns a boolean if a field has been set.
func (o *GraphQLSubgraphConfig) HasSdl() bool {
	if o != nil && !IsNil(o.Sdl) {
		return true
	}

	return false
}

// SetSdl gets a reference to the given string and assigns it to the Sdl field.
func (o *GraphQLSubgraphConfig) SetSdl(v string) {
	o.Sdl = &v
}

func (o GraphQLSubgraphConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GraphQLSubgraphConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Sdl) {
		toSerialize["sdl"] = o.Sdl
	}
	return toSerialize, nil
}

type NullableGraphQLSubgraphConfig struct {
	value *GraphQLSubgraphConfig
	isSet bool
}

func (v NullableGraphQLSubgraphConfig) Get() *GraphQLSubgraphConfig {
	return v.value
}

func (v *NullableGraphQLSubgraphConfig) Set(val *GraphQLSubgraphConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableGraphQLSubgraphConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableGraphQLSubgraphConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGraphQLSubgraphConfig(val *GraphQLSubgraphConfig) *NullableGraphQLSubgraphConfig {
	return &NullableGraphQLSubgraphConfig{value: val, isSet: true}
}

func (v NullableGraphQLSubgraphConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGraphQLSubgraphConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


