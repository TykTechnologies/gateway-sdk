/*
Tyk Gateway API

 The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway

API version: 5.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the ExternalOAuth type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExternalOAuth{}

// ExternalOAuth struct for ExternalOAuth
type ExternalOAuth struct {
	Enabled *bool `json:"enabled,omitempty"`
	Providers []Provider `json:"providers,omitempty"`
}

// NewExternalOAuth instantiates a new ExternalOAuth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExternalOAuth() *ExternalOAuth {
	this := ExternalOAuth{}
	return &this
}

// NewExternalOAuthWithDefaults instantiates a new ExternalOAuth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternalOAuthWithDefaults() *ExternalOAuth {
	this := ExternalOAuth{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ExternalOAuth) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalOAuth) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ExternalOAuth) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ExternalOAuth) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetProviders returns the Providers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExternalOAuth) GetProviders() []Provider {
	if o == nil {
		var ret []Provider
		return ret
	}
	return o.Providers
}

// GetProvidersOk returns a tuple with the Providers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExternalOAuth) GetProvidersOk() ([]Provider, bool) {
	if o == nil || IsNil(o.Providers) {
		return nil, false
	}
	return o.Providers, true
}

// HasProviders returns a boolean if a field has been set.
func (o *ExternalOAuth) HasProviders() bool {
	if o != nil && !IsNil(o.Providers) {
		return true
	}

	return false
}

// SetProviders gets a reference to the given []Provider and assigns it to the Providers field.
func (o *ExternalOAuth) SetProviders(v []Provider) {
	o.Providers = v
}

func (o ExternalOAuth) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExternalOAuth) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Providers != nil {
		toSerialize["providers"] = o.Providers
	}
	return toSerialize, nil
}

type NullableExternalOAuth struct {
	value *ExternalOAuth
	isSet bool
}

func (v NullableExternalOAuth) Get() *ExternalOAuth {
	return v.value
}

func (v *NullableExternalOAuth) Set(val *ExternalOAuth) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalOAuth) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalOAuth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalOAuth(val *ExternalOAuth) *NullableExternalOAuth {
	return &NullableExternalOAuth{value: val, isSet: true}
}

func (v NullableExternalOAuth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalOAuth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


