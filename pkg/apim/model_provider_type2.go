/*
Tyk Gateway API

The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.  **Warning: Under no circumstances should outside parties be granted access to this API.**  The Tyk Gateway API is capable of:  * Managing session objects (key generation). * Managing and listing policies. * Managing and listing API Definitions (only when not using the Tyk Dashboard). * Hot reloads / reloading a cluster configuration. * OAuth client creation (only when not using the Tyk Dashboard).  In order to use the Gateway API, you'll need to set the **secret** parameter in your tyk.conf file.  The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:  **x-tyk-authorization: <your-secret>*** <br/>  <b>The Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.</b>

API version: 5.7.1
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the ProviderType2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProviderType2{}

// ProviderType2 struct for ProviderType2
type ProviderType2 struct {
	ClientToPolicyMapping []ClientToPolicy `json:"clientToPolicyMapping,omitempty"`
	Issuer                *string          `json:"issuer,omitempty"`
}

// NewProviderType2 instantiates a new ProviderType2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProviderType2() *ProviderType2 {
	this := ProviderType2{}
	return &this
}

// NewProviderType2WithDefaults instantiates a new ProviderType2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProviderType2WithDefaults() *ProviderType2 {
	this := ProviderType2{}
	return &this
}

// GetClientToPolicyMapping returns the ClientToPolicyMapping field value if set, zero value otherwise.
func (o *ProviderType2) GetClientToPolicyMapping() []ClientToPolicy {
	if o == nil || IsNil(o.ClientToPolicyMapping) {
		var ret []ClientToPolicy
		return ret
	}
	return o.ClientToPolicyMapping
}

// GetClientToPolicyMappingOk returns a tuple with the ClientToPolicyMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProviderType2) GetClientToPolicyMappingOk() ([]ClientToPolicy, bool) {
	if o == nil || IsNil(o.ClientToPolicyMapping) {
		return nil, false
	}
	return o.ClientToPolicyMapping, true
}

// HasClientToPolicyMapping returns a boolean if a field has been set.
func (o *ProviderType2) HasClientToPolicyMapping() bool {
	if o != nil && !IsNil(o.ClientToPolicyMapping) {
		return true
	}

	return false
}

// SetClientToPolicyMapping gets a reference to the given []ClientToPolicy and assigns it to the ClientToPolicyMapping field.
func (o *ProviderType2) SetClientToPolicyMapping(v []ClientToPolicy) {
	o.ClientToPolicyMapping = v
}

// GetIssuer returns the Issuer field value if set, zero value otherwise.
func (o *ProviderType2) GetIssuer() string {
	if o == nil || IsNil(o.Issuer) {
		var ret string
		return ret
	}
	return *o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProviderType2) GetIssuerOk() (*string, bool) {
	if o == nil || IsNil(o.Issuer) {
		return nil, false
	}
	return o.Issuer, true
}

// HasIssuer returns a boolean if a field has been set.
func (o *ProviderType2) HasIssuer() bool {
	if o != nil && !IsNil(o.Issuer) {
		return true
	}

	return false
}

// SetIssuer gets a reference to the given string and assigns it to the Issuer field.
func (o *ProviderType2) SetIssuer(v string) {
	o.Issuer = &v
}

func (o ProviderType2) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProviderType2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClientToPolicyMapping) {
		toSerialize["clientToPolicyMapping"] = o.ClientToPolicyMapping
	}
	if !IsNil(o.Issuer) {
		toSerialize["issuer"] = o.Issuer
	}
	return toSerialize, nil
}

type NullableProviderType2 struct {
	value *ProviderType2
	isSet bool
}

func (v NullableProviderType2) Get() *ProviderType2 {
	return v.value
}

func (v *NullableProviderType2) Set(val *ProviderType2) {
	v.value = val
	v.isSet = true
}

func (v NullableProviderType2) IsSet() bool {
	return v.isSet
}

func (v *NullableProviderType2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProviderType2(val *ProviderType2) *NullableProviderType2 {
	return &NullableProviderType2{value: val, isSet: true}
}

func (v NullableProviderType2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProviderType2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
