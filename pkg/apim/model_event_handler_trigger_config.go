/*
Tyk Gateway API

 The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway

API version: 5.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the EventHandlerTriggerConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventHandlerTriggerConfig{}

// EventHandlerTriggerConfig struct for EventHandlerTriggerConfig
type EventHandlerTriggerConfig struct {
	HandlerMeta map[string]interface{} `json:"handler_meta,omitempty"`
	HandlerName *string `json:"handler_name,omitempty"`
}

// NewEventHandlerTriggerConfig instantiates a new EventHandlerTriggerConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventHandlerTriggerConfig() *EventHandlerTriggerConfig {
	this := EventHandlerTriggerConfig{}
	return &this
}

// NewEventHandlerTriggerConfigWithDefaults instantiates a new EventHandlerTriggerConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventHandlerTriggerConfigWithDefaults() *EventHandlerTriggerConfig {
	this := EventHandlerTriggerConfig{}
	return &this
}

// GetHandlerMeta returns the HandlerMeta field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventHandlerTriggerConfig) GetHandlerMeta() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.HandlerMeta
}

// GetHandlerMetaOk returns a tuple with the HandlerMeta field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventHandlerTriggerConfig) GetHandlerMetaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.HandlerMeta) {
		return map[string]interface{}{}, false
	}
	return o.HandlerMeta, true
}

// HasHandlerMeta returns a boolean if a field has been set.
func (o *EventHandlerTriggerConfig) HasHandlerMeta() bool {
	if o != nil && !IsNil(o.HandlerMeta) {
		return true
	}

	return false
}

// SetHandlerMeta gets a reference to the given map[string]interface{} and assigns it to the HandlerMeta field.
func (o *EventHandlerTriggerConfig) SetHandlerMeta(v map[string]interface{}) {
	o.HandlerMeta = v
}

// GetHandlerName returns the HandlerName field value if set, zero value otherwise.
func (o *EventHandlerTriggerConfig) GetHandlerName() string {
	if o == nil || IsNil(o.HandlerName) {
		var ret string
		return ret
	}
	return *o.HandlerName
}

// GetHandlerNameOk returns a tuple with the HandlerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventHandlerTriggerConfig) GetHandlerNameOk() (*string, bool) {
	if o == nil || IsNil(o.HandlerName) {
		return nil, false
	}
	return o.HandlerName, true
}

// HasHandlerName returns a boolean if a field has been set.
func (o *EventHandlerTriggerConfig) HasHandlerName() bool {
	if o != nil && !IsNil(o.HandlerName) {
		return true
	}

	return false
}

// SetHandlerName gets a reference to the given string and assigns it to the HandlerName field.
func (o *EventHandlerTriggerConfig) SetHandlerName(v string) {
	o.HandlerName = &v
}

func (o EventHandlerTriggerConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventHandlerTriggerConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.HandlerMeta != nil {
		toSerialize["handler_meta"] = o.HandlerMeta
	}
	if !IsNil(o.HandlerName) {
		toSerialize["handler_name"] = o.HandlerName
	}
	return toSerialize, nil
}

type NullableEventHandlerTriggerConfig struct {
	value *EventHandlerTriggerConfig
	isSet bool
}

func (v NullableEventHandlerTriggerConfig) Get() *EventHandlerTriggerConfig {
	return v.value
}

func (v *NullableEventHandlerTriggerConfig) Set(val *EventHandlerTriggerConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableEventHandlerTriggerConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableEventHandlerTriggerConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventHandlerTriggerConfig(val *EventHandlerTriggerConfig) *NullableEventHandlerTriggerConfig {
	return &NullableEventHandlerTriggerConfig{value: val, isSet: true}
}

func (v NullableEventHandlerTriggerConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventHandlerTriggerConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


