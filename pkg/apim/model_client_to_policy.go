/*
Tyk Gateway API

The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.  **Warning: Under no circumstances should outside parties be granted access to this API.**  The Tyk Gateway API is capable of:  * Managing session objects (key generation). * Managing and listing policies. * Managing and listing API Definitions (only when not using the Tyk Dashboard). * Hot reloads / reloading a cluster configuration. * OAuth client creation (only when not using the Tyk Dashboard).  In order to use the Gateway API, you'll need to set the **secret** parameter in your tyk.conf file.  The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:  **x-tyk-authorization: <your-secret>*** <br/>  <b>The Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.</b>

API version: 5.7.1
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the ClientToPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClientToPolicy{}

// ClientToPolicy struct for ClientToPolicy
type ClientToPolicy struct {
	ClientId *string `json:"clientId,omitempty"`
	PolicyId *string `json:"policyId,omitempty"`
}

// NewClientToPolicy instantiates a new ClientToPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClientToPolicy() *ClientToPolicy {
	this := ClientToPolicy{}
	return &this
}

// NewClientToPolicyWithDefaults instantiates a new ClientToPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClientToPolicyWithDefaults() *ClientToPolicy {
	this := ClientToPolicy{}
	return &this
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *ClientToPolicy) GetClientId() string {
	if o == nil || IsNil(o.ClientId) {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientToPolicy) GetClientIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClientId) {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *ClientToPolicy) HasClientId() bool {
	if o != nil && !IsNil(o.ClientId) {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *ClientToPolicy) SetClientId(v string) {
	o.ClientId = &v
}

// GetPolicyId returns the PolicyId field value if set, zero value otherwise.
func (o *ClientToPolicy) GetPolicyId() string {
	if o == nil || IsNil(o.PolicyId) {
		var ret string
		return ret
	}
	return *o.PolicyId
}

// GetPolicyIdOk returns a tuple with the PolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientToPolicy) GetPolicyIdOk() (*string, bool) {
	if o == nil || IsNil(o.PolicyId) {
		return nil, false
	}
	return o.PolicyId, true
}

// HasPolicyId returns a boolean if a field has been set.
func (o *ClientToPolicy) HasPolicyId() bool {
	if o != nil && !IsNil(o.PolicyId) {
		return true
	}

	return false
}

// SetPolicyId gets a reference to the given string and assigns it to the PolicyId field.
func (o *ClientToPolicy) SetPolicyId(v string) {
	o.PolicyId = &v
}

func (o ClientToPolicy) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClientToPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClientId) {
		toSerialize["clientId"] = o.ClientId
	}
	if !IsNil(o.PolicyId) {
		toSerialize["policyId"] = o.PolicyId
	}
	return toSerialize, nil
}

type NullableClientToPolicy struct {
	value *ClientToPolicy
	isSet bool
}

func (v NullableClientToPolicy) Get() *ClientToPolicy {
	return v.value
}

func (v *NullableClientToPolicy) Set(val *ClientToPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableClientToPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableClientToPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientToPolicy(val *ClientToPolicy) *NullableClientToPolicy {
	return &NullableClientToPolicy{value: val, isSet: true}
}

func (v NullableClientToPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientToPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
