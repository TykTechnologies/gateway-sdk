/*
Tyk Gateway API

The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.  **Warning: Under no circumstances should outside parties be granted access to this API.**  The Tyk Gateway API is capable of:  * Managing session objects (key generation). * Managing and listing policies. * Managing and listing API Definitions (only when not using the Tyk Dashboard). * Hot reloads / reloading a cluster configuration. * OAuth client creation (only when not using the Tyk Dashboard).  In order to use the Gateway API, you'll need to set the **secret** parameter in your tyk.conf file.  The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:  **x-tyk-authorization: <your-secret>*** <br/>  <b>The Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.</b>

API version: 5.7.1
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the HMAC type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HMAC{}

// HMAC struct for HMAC
type HMAC struct {
	AuthSources       *AuthSources `json:"AuthSources,omitempty"`
	AllowedAlgorithms []string     `json:"allowedAlgorithms,omitempty"`
	AllowedClockSkew  *float32     `json:"allowedClockSkew,omitempty"`
	Enabled           *bool        `json:"enabled,omitempty"`
}

// NewHMAC instantiates a new HMAC object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHMAC() *HMAC {
	this := HMAC{}
	return &this
}

// NewHMACWithDefaults instantiates a new HMAC object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHMACWithDefaults() *HMAC {
	this := HMAC{}
	return &this
}

// GetAuthSources returns the AuthSources field value if set, zero value otherwise.
func (o *HMAC) GetAuthSources() AuthSources {
	if o == nil || IsNil(o.AuthSources) {
		var ret AuthSources
		return ret
	}
	return *o.AuthSources
}

// GetAuthSourcesOk returns a tuple with the AuthSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HMAC) GetAuthSourcesOk() (*AuthSources, bool) {
	if o == nil || IsNil(o.AuthSources) {
		return nil, false
	}
	return o.AuthSources, true
}

// HasAuthSources returns a boolean if a field has been set.
func (o *HMAC) HasAuthSources() bool {
	if o != nil && !IsNil(o.AuthSources) {
		return true
	}

	return false
}

// SetAuthSources gets a reference to the given AuthSources and assigns it to the AuthSources field.
func (o *HMAC) SetAuthSources(v AuthSources) {
	o.AuthSources = &v
}

// GetAllowedAlgorithms returns the AllowedAlgorithms field value if set, zero value otherwise.
func (o *HMAC) GetAllowedAlgorithms() []string {
	if o == nil || IsNil(o.AllowedAlgorithms) {
		var ret []string
		return ret
	}
	return o.AllowedAlgorithms
}

// GetAllowedAlgorithmsOk returns a tuple with the AllowedAlgorithms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HMAC) GetAllowedAlgorithmsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedAlgorithms) {
		return nil, false
	}
	return o.AllowedAlgorithms, true
}

// HasAllowedAlgorithms returns a boolean if a field has been set.
func (o *HMAC) HasAllowedAlgorithms() bool {
	if o != nil && !IsNil(o.AllowedAlgorithms) {
		return true
	}

	return false
}

// SetAllowedAlgorithms gets a reference to the given []string and assigns it to the AllowedAlgorithms field.
func (o *HMAC) SetAllowedAlgorithms(v []string) {
	o.AllowedAlgorithms = v
}

// GetAllowedClockSkew returns the AllowedClockSkew field value if set, zero value otherwise.
func (o *HMAC) GetAllowedClockSkew() float32 {
	if o == nil || IsNil(o.AllowedClockSkew) {
		var ret float32
		return ret
	}
	return *o.AllowedClockSkew
}

// GetAllowedClockSkewOk returns a tuple with the AllowedClockSkew field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HMAC) GetAllowedClockSkewOk() (*float32, bool) {
	if o == nil || IsNil(o.AllowedClockSkew) {
		return nil, false
	}
	return o.AllowedClockSkew, true
}

// HasAllowedClockSkew returns a boolean if a field has been set.
func (o *HMAC) HasAllowedClockSkew() bool {
	if o != nil && !IsNil(o.AllowedClockSkew) {
		return true
	}

	return false
}

// SetAllowedClockSkew gets a reference to the given float32 and assigns it to the AllowedClockSkew field.
func (o *HMAC) SetAllowedClockSkew(v float32) {
	o.AllowedClockSkew = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *HMAC) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HMAC) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *HMAC) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *HMAC) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o HMAC) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HMAC) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthSources) {
		toSerialize["AuthSources"] = o.AuthSources
	}
	if !IsNil(o.AllowedAlgorithms) {
		toSerialize["allowedAlgorithms"] = o.AllowedAlgorithms
	}
	if !IsNil(o.AllowedClockSkew) {
		toSerialize["allowedClockSkew"] = o.AllowedClockSkew
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	return toSerialize, nil
}

type NullableHMAC struct {
	value *HMAC
	isSet bool
}

func (v NullableHMAC) Get() *HMAC {
	return v.value
}

func (v *NullableHMAC) Set(val *HMAC) {
	v.value = val
	v.isSet = true
}

func (v NullableHMAC) IsSet() bool {
	return v.isSet
}

func (v *NullableHMAC) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHMAC(val *HMAC) *NullableHMAC {
	return &NullableHMAC{value: val, isSet: true}
}

func (v NullableHMAC) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHMAC) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
