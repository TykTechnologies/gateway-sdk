/*
Tyk Gateway API

The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.  **Warning: Under no circumstances should outside parties be granted access to this API.**  The Tyk Gateway API is capable of:  * Managing session objects (key generation). * Managing and listing policies. * Managing and listing API Definitions (only when not using the Tyk Dashboard). * Hot reloads / reloading a cluster configuration. * OAuth client creation (only when not using the Tyk Dashboard).  In order to use the Gateway API, you'll need to set the **secret** parameter in your tyk.conf file.  The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:  **x-tyk-authorization: <your-secret>*** <br/>  <b>The Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.</b>

API version: 5.7.1
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the PrePlugin type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrePlugin{}

// PrePlugin struct for PrePlugin
type PrePlugin struct {
	Plugins []CustomPlugin `json:"plugins,omitempty"`
}

// NewPrePlugin instantiates a new PrePlugin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrePlugin() *PrePlugin {
	this := PrePlugin{}
	return &this
}

// NewPrePluginWithDefaults instantiates a new PrePlugin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrePluginWithDefaults() *PrePlugin {
	this := PrePlugin{}
	return &this
}

// GetPlugins returns the Plugins field value if set, zero value otherwise.
func (o *PrePlugin) GetPlugins() []CustomPlugin {
	if o == nil || IsNil(o.Plugins) {
		var ret []CustomPlugin
		return ret
	}
	return o.Plugins
}

// GetPluginsOk returns a tuple with the Plugins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrePlugin) GetPluginsOk() ([]CustomPlugin, bool) {
	if o == nil || IsNil(o.Plugins) {
		return nil, false
	}
	return o.Plugins, true
}

// HasPlugins returns a boolean if a field has been set.
func (o *PrePlugin) HasPlugins() bool {
	if o != nil && !IsNil(o.Plugins) {
		return true
	}

	return false
}

// SetPlugins gets a reference to the given []CustomPlugin and assigns it to the Plugins field.
func (o *PrePlugin) SetPlugins(v []CustomPlugin) {
	o.Plugins = v
}

func (o PrePlugin) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrePlugin) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Plugins) {
		toSerialize["plugins"] = o.Plugins
	}
	return toSerialize, nil
}

type NullablePrePlugin struct {
	value *PrePlugin
	isSet bool
}

func (v NullablePrePlugin) Get() *PrePlugin {
	return v.value
}

func (v *NullablePrePlugin) Set(val *PrePlugin) {
	v.value = val
	v.isSet = true
}

func (v NullablePrePlugin) IsSet() bool {
	return v.isSet
}

func (v *NullablePrePlugin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrePlugin(val *PrePlugin) *NullablePrePlugin {
	return &NullablePrePlugin{value: val, isSet: true}
}

func (v NullablePrePlugin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrePlugin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
