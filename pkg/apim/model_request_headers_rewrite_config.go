/*
Tyk Gateway API

The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.  **Warning: Under no circumstances should outside parties be granted access to this API.**  The Tyk Gateway API is capable of:  * Managing session objects (key generation). * Managing and listing policies. * Managing and listing API Definitions (only when not using the Tyk Dashboard). * Hot reloads / reloading a cluster configuration. * OAuth client creation (only when not using the Tyk Dashboard).  In order to use the Gateway API, you'll need to set the **secret** parameter in your tyk.conf file.  The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:  **x-tyk-authorization: <your-secret>*** <br/>  <b>The Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.</b>

API version: 5.7.1
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the RequestHeadersRewriteConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RequestHeadersRewriteConfig{}

// RequestHeadersRewriteConfig struct for RequestHeadersRewriteConfig
type RequestHeadersRewriteConfig struct {
	Remove *bool   `json:"remove,omitempty"`
	Value  *string `json:"value,omitempty"`
}

// NewRequestHeadersRewriteConfig instantiates a new RequestHeadersRewriteConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestHeadersRewriteConfig() *RequestHeadersRewriteConfig {
	this := RequestHeadersRewriteConfig{}
	return &this
}

// NewRequestHeadersRewriteConfigWithDefaults instantiates a new RequestHeadersRewriteConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestHeadersRewriteConfigWithDefaults() *RequestHeadersRewriteConfig {
	this := RequestHeadersRewriteConfig{}
	return &this
}

// GetRemove returns the Remove field value if set, zero value otherwise.
func (o *RequestHeadersRewriteConfig) GetRemove() bool {
	if o == nil || IsNil(o.Remove) {
		var ret bool
		return ret
	}
	return *o.Remove
}

// GetRemoveOk returns a tuple with the Remove field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestHeadersRewriteConfig) GetRemoveOk() (*bool, bool) {
	if o == nil || IsNil(o.Remove) {
		return nil, false
	}
	return o.Remove, true
}

// HasRemove returns a boolean if a field has been set.
func (o *RequestHeadersRewriteConfig) HasRemove() bool {
	if o != nil && !IsNil(o.Remove) {
		return true
	}

	return false
}

// SetRemove gets a reference to the given bool and assigns it to the Remove field.
func (o *RequestHeadersRewriteConfig) SetRemove(v bool) {
	o.Remove = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *RequestHeadersRewriteConfig) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestHeadersRewriteConfig) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *RequestHeadersRewriteConfig) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *RequestHeadersRewriteConfig) SetValue(v string) {
	o.Value = &v
}

func (o RequestHeadersRewriteConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RequestHeadersRewriteConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Remove) {
		toSerialize["remove"] = o.Remove
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableRequestHeadersRewriteConfig struct {
	value *RequestHeadersRewriteConfig
	isSet bool
}

func (v NullableRequestHeadersRewriteConfig) Get() *RequestHeadersRewriteConfig {
	return v.value
}

func (v *NullableRequestHeadersRewriteConfig) Set(val *RequestHeadersRewriteConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestHeadersRewriteConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestHeadersRewriteConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestHeadersRewriteConfig(val *RequestHeadersRewriteConfig) *NullableRequestHeadersRewriteConfig {
	return &NullableRequestHeadersRewriteConfig{value: val, isSet: true}
}

func (v NullableRequestHeadersRewriteConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestHeadersRewriteConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
