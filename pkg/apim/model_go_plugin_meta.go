/*
Tyk Gateway API

 The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway

API version: 5.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the GoPluginMeta type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GoPluginMeta{}

// GoPluginMeta struct for GoPluginMeta
type GoPluginMeta struct {
	Disabled *bool `json:"disabled,omitempty"`
	FuncName *string `json:"func_name,omitempty"`
	Method *string `json:"method,omitempty"`
	Path *string `json:"path,omitempty"`
	PluginPath *string `json:"plugin_path,omitempty"`
}

// NewGoPluginMeta instantiates a new GoPluginMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGoPluginMeta() *GoPluginMeta {
	this := GoPluginMeta{}
	return &this
}

// NewGoPluginMetaWithDefaults instantiates a new GoPluginMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGoPluginMetaWithDefaults() *GoPluginMeta {
	this := GoPluginMeta{}
	return &this
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *GoPluginMeta) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoPluginMeta) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *GoPluginMeta) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *GoPluginMeta) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetFuncName returns the FuncName field value if set, zero value otherwise.
func (o *GoPluginMeta) GetFuncName() string {
	if o == nil || IsNil(o.FuncName) {
		var ret string
		return ret
	}
	return *o.FuncName
}

// GetFuncNameOk returns a tuple with the FuncName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoPluginMeta) GetFuncNameOk() (*string, bool) {
	if o == nil || IsNil(o.FuncName) {
		return nil, false
	}
	return o.FuncName, true
}

// HasFuncName returns a boolean if a field has been set.
func (o *GoPluginMeta) HasFuncName() bool {
	if o != nil && !IsNil(o.FuncName) {
		return true
	}

	return false
}

// SetFuncName gets a reference to the given string and assigns it to the FuncName field.
func (o *GoPluginMeta) SetFuncName(v string) {
	o.FuncName = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *GoPluginMeta) GetMethod() string {
	if o == nil || IsNil(o.Method) {
		var ret string
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoPluginMeta) GetMethodOk() (*string, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *GoPluginMeta) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given string and assigns it to the Method field.
func (o *GoPluginMeta) SetMethod(v string) {
	o.Method = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *GoPluginMeta) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoPluginMeta) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *GoPluginMeta) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *GoPluginMeta) SetPath(v string) {
	o.Path = &v
}

// GetPluginPath returns the PluginPath field value if set, zero value otherwise.
func (o *GoPluginMeta) GetPluginPath() string {
	if o == nil || IsNil(o.PluginPath) {
		var ret string
		return ret
	}
	return *o.PluginPath
}

// GetPluginPathOk returns a tuple with the PluginPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoPluginMeta) GetPluginPathOk() (*string, bool) {
	if o == nil || IsNil(o.PluginPath) {
		return nil, false
	}
	return o.PluginPath, true
}

// HasPluginPath returns a boolean if a field has been set.
func (o *GoPluginMeta) HasPluginPath() bool {
	if o != nil && !IsNil(o.PluginPath) {
		return true
	}

	return false
}

// SetPluginPath gets a reference to the given string and assigns it to the PluginPath field.
func (o *GoPluginMeta) SetPluginPath(v string) {
	o.PluginPath = &v
}

func (o GoPluginMeta) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GoPluginMeta) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.FuncName) {
		toSerialize["func_name"] = o.FuncName
	}
	if !IsNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.PluginPath) {
		toSerialize["plugin_path"] = o.PluginPath
	}
	return toSerialize, nil
}

type NullableGoPluginMeta struct {
	value *GoPluginMeta
	isSet bool
}

func (v NullableGoPluginMeta) Get() *GoPluginMeta {
	return v.value
}

func (v *NullableGoPluginMeta) Set(val *GoPluginMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableGoPluginMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableGoPluginMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGoPluginMeta(val *GoPluginMeta) *NullableGoPluginMeta {
	return &NullableGoPluginMeta{value: val, isSet: true}
}

func (v NullableGoPluginMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGoPluginMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


