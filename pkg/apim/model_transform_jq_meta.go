/*
Tyk Gateway API

 The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway

API version: 5.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the TransformJQMeta type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransformJQMeta{}

// TransformJQMeta struct for TransformJQMeta
type TransformJQMeta struct {
	Filter *string `json:"filter,omitempty"`
	Method *string `json:"method,omitempty"`
	Path *string `json:"path,omitempty"`
}

// NewTransformJQMeta instantiates a new TransformJQMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransformJQMeta() *TransformJQMeta {
	this := TransformJQMeta{}
	return &this
}

// NewTransformJQMetaWithDefaults instantiates a new TransformJQMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransformJQMetaWithDefaults() *TransformJQMeta {
	this := TransformJQMeta{}
	return &this
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *TransformJQMeta) GetFilter() string {
	if o == nil || IsNil(o.Filter) {
		var ret string
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransformJQMeta) GetFilterOk() (*string, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *TransformJQMeta) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given string and assigns it to the Filter field.
func (o *TransformJQMeta) SetFilter(v string) {
	o.Filter = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *TransformJQMeta) GetMethod() string {
	if o == nil || IsNil(o.Method) {
		var ret string
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransformJQMeta) GetMethodOk() (*string, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *TransformJQMeta) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given string and assigns it to the Method field.
func (o *TransformJQMeta) SetMethod(v string) {
	o.Method = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *TransformJQMeta) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransformJQMeta) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *TransformJQMeta) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *TransformJQMeta) SetPath(v string) {
	o.Path = &v
}

func (o TransformJQMeta) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransformJQMeta) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	if !IsNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	return toSerialize, nil
}

type NullableTransformJQMeta struct {
	value *TransformJQMeta
	isSet bool
}

func (v NullableTransformJQMeta) Get() *TransformJQMeta {
	return v.value
}

func (v *NullableTransformJQMeta) Set(val *TransformJQMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableTransformJQMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableTransformJQMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransformJQMeta(val *TransformJQMeta) *NullableTransformJQMeta {
	return &NullableTransformJQMeta{value: val, isSet: true}
}

func (v NullableTransformJQMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransformJQMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


