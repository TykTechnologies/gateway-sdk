/*
Tyk Gateway API

The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.  **Warning: Under no circumstances should outside parties be granted access to this API.**  The Tyk Gateway API is capable of:  * Managing session objects (key generation) * Managing and listing policies * Managing and listing API Definitions (only when not using the Dashboard) * Hot reloads / reloading a cluster configuration * OAuth client creation (only when not using the Dashboard)   In order to use the Gateway API, you'll need to set the `secret` parameter in your tyk.conf file.  The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:  ``` x-tyk-authorization: <your-secret> ``` <br/> <b>The Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.</b>

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// checks if the PkixName type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PkixName{}

// PkixName Name represents an X.509 distinguished name
type PkixName struct {
	Country []string `json:"Country,omitempty"`
	Organization []string `json:"Organization,omitempty"`
	OrganizationalUnit []string `json:"OrganizationalUnit,omitempty"`
	Locality []string `json:"Locality,omitempty"`
	Province []string `json:"Province,omitempty"`
	StreetAddress []string `json:"StreetAddress,omitempty"`
	PostalCode []string `json:"PostalCode,omitempty"`
	SerialNumber *string `json:"SerialNumber,omitempty"`
	CommonName *string `json:"CommonName,omitempty"`
	Names []PkixAttributeTypeAndValue `json:"Names,omitempty"`
	ExtraNames []PkixAttributeTypeAndValueSET `json:"ExtraNames,omitempty"`
}

// NewPkixName instantiates a new PkixName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPkixName() *PkixName {
	this := PkixName{}
	return &this
}

// NewPkixNameWithDefaults instantiates a new PkixName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPkixNameWithDefaults() *PkixName {
	this := PkixName{}
	return &this
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *PkixName) GetCountry() []string {
	if o == nil || IsNil(o.Country) {
		var ret []string
		return ret
	}
	return o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkixName) GetCountryOk() ([]string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *PkixName) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given []string and assigns it to the Country field.
func (o *PkixName) SetCountry(v []string) {
	o.Country = v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *PkixName) GetOrganization() []string {
	if o == nil || IsNil(o.Organization) {
		var ret []string
		return ret
	}
	return o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkixName) GetOrganizationOk() ([]string, bool) {
	if o == nil || IsNil(o.Organization) {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *PkixName) HasOrganization() bool {
	if o != nil && !IsNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given []string and assigns it to the Organization field.
func (o *PkixName) SetOrganization(v []string) {
	o.Organization = v
}

// GetOrganizationalUnit returns the OrganizationalUnit field value if set, zero value otherwise.
func (o *PkixName) GetOrganizationalUnit() []string {
	if o == nil || IsNil(o.OrganizationalUnit) {
		var ret []string
		return ret
	}
	return o.OrganizationalUnit
}

// GetOrganizationalUnitOk returns a tuple with the OrganizationalUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkixName) GetOrganizationalUnitOk() ([]string, bool) {
	if o == nil || IsNil(o.OrganizationalUnit) {
		return nil, false
	}
	return o.OrganizationalUnit, true
}

// HasOrganizationalUnit returns a boolean if a field has been set.
func (o *PkixName) HasOrganizationalUnit() bool {
	if o != nil && !IsNil(o.OrganizationalUnit) {
		return true
	}

	return false
}

// SetOrganizationalUnit gets a reference to the given []string and assigns it to the OrganizationalUnit field.
func (o *PkixName) SetOrganizationalUnit(v []string) {
	o.OrganizationalUnit = v
}

// GetLocality returns the Locality field value if set, zero value otherwise.
func (o *PkixName) GetLocality() []string {
	if o == nil || IsNil(o.Locality) {
		var ret []string
		return ret
	}
	return o.Locality
}

// GetLocalityOk returns a tuple with the Locality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkixName) GetLocalityOk() ([]string, bool) {
	if o == nil || IsNil(o.Locality) {
		return nil, false
	}
	return o.Locality, true
}

// HasLocality returns a boolean if a field has been set.
func (o *PkixName) HasLocality() bool {
	if o != nil && !IsNil(o.Locality) {
		return true
	}

	return false
}

// SetLocality gets a reference to the given []string and assigns it to the Locality field.
func (o *PkixName) SetLocality(v []string) {
	o.Locality = v
}

// GetProvince returns the Province field value if set, zero value otherwise.
func (o *PkixName) GetProvince() []string {
	if o == nil || IsNil(o.Province) {
		var ret []string
		return ret
	}
	return o.Province
}

// GetProvinceOk returns a tuple with the Province field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkixName) GetProvinceOk() ([]string, bool) {
	if o == nil || IsNil(o.Province) {
		return nil, false
	}
	return o.Province, true
}

// HasProvince returns a boolean if a field has been set.
func (o *PkixName) HasProvince() bool {
	if o != nil && !IsNil(o.Province) {
		return true
	}

	return false
}

// SetProvince gets a reference to the given []string and assigns it to the Province field.
func (o *PkixName) SetProvince(v []string) {
	o.Province = v
}

// GetStreetAddress returns the StreetAddress field value if set, zero value otherwise.
func (o *PkixName) GetStreetAddress() []string {
	if o == nil || IsNil(o.StreetAddress) {
		var ret []string
		return ret
	}
	return o.StreetAddress
}

// GetStreetAddressOk returns a tuple with the StreetAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkixName) GetStreetAddressOk() ([]string, bool) {
	if o == nil || IsNil(o.StreetAddress) {
		return nil, false
	}
	return o.StreetAddress, true
}

// HasStreetAddress returns a boolean if a field has been set.
func (o *PkixName) HasStreetAddress() bool {
	if o != nil && !IsNil(o.StreetAddress) {
		return true
	}

	return false
}

// SetStreetAddress gets a reference to the given []string and assigns it to the StreetAddress field.
func (o *PkixName) SetStreetAddress(v []string) {
	o.StreetAddress = v
}

// GetPostalCode returns the PostalCode field value if set, zero value otherwise.
func (o *PkixName) GetPostalCode() []string {
	if o == nil || IsNil(o.PostalCode) {
		var ret []string
		return ret
	}
	return o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkixName) GetPostalCodeOk() ([]string, bool) {
	if o == nil || IsNil(o.PostalCode) {
		return nil, false
	}
	return o.PostalCode, true
}

// HasPostalCode returns a boolean if a field has been set.
func (o *PkixName) HasPostalCode() bool {
	if o != nil && !IsNil(o.PostalCode) {
		return true
	}

	return false
}

// SetPostalCode gets a reference to the given []string and assigns it to the PostalCode field.
func (o *PkixName) SetPostalCode(v []string) {
	o.PostalCode = v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *PkixName) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkixName) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *PkixName) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *PkixName) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetCommonName returns the CommonName field value if set, zero value otherwise.
func (o *PkixName) GetCommonName() string {
	if o == nil || IsNil(o.CommonName) {
		var ret string
		return ret
	}
	return *o.CommonName
}

// GetCommonNameOk returns a tuple with the CommonName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkixName) GetCommonNameOk() (*string, bool) {
	if o == nil || IsNil(o.CommonName) {
		return nil, false
	}
	return o.CommonName, true
}

// HasCommonName returns a boolean if a field has been set.
func (o *PkixName) HasCommonName() bool {
	if o != nil && !IsNil(o.CommonName) {
		return true
	}

	return false
}

// SetCommonName gets a reference to the given string and assigns it to the CommonName field.
func (o *PkixName) SetCommonName(v string) {
	o.CommonName = &v
}

// GetNames returns the Names field value if set, zero value otherwise.
func (o *PkixName) GetNames() []PkixAttributeTypeAndValue {
	if o == nil || IsNil(o.Names) {
		var ret []PkixAttributeTypeAndValue
		return ret
	}
	return o.Names
}

// GetNamesOk returns a tuple with the Names field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkixName) GetNamesOk() ([]PkixAttributeTypeAndValue, bool) {
	if o == nil || IsNil(o.Names) {
		return nil, false
	}
	return o.Names, true
}

// HasNames returns a boolean if a field has been set.
func (o *PkixName) HasNames() bool {
	if o != nil && !IsNil(o.Names) {
		return true
	}

	return false
}

// SetNames gets a reference to the given []PkixAttributeTypeAndValue and assigns it to the Names field.
func (o *PkixName) SetNames(v []PkixAttributeTypeAndValue) {
	o.Names = v
}

// GetExtraNames returns the ExtraNames field value if set, zero value otherwise.
func (o *PkixName) GetExtraNames() []PkixAttributeTypeAndValueSET {
	if o == nil || IsNil(o.ExtraNames) {
		var ret []PkixAttributeTypeAndValueSET
		return ret
	}
	return o.ExtraNames
}

// GetExtraNamesOk returns a tuple with the ExtraNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkixName) GetExtraNamesOk() ([]PkixAttributeTypeAndValueSET, bool) {
	if o == nil || IsNil(o.ExtraNames) {
		return nil, false
	}
	return o.ExtraNames, true
}

// HasExtraNames returns a boolean if a field has been set.
func (o *PkixName) HasExtraNames() bool {
	if o != nil && !IsNil(o.ExtraNames) {
		return true
	}

	return false
}

// SetExtraNames gets a reference to the given []PkixAttributeTypeAndValueSET and assigns it to the ExtraNames field.
func (o *PkixName) SetExtraNames(v []PkixAttributeTypeAndValueSET) {
	o.ExtraNames = v
}

func (o PkixName) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PkixName) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Country) {
		toSerialize["Country"] = o.Country
	}
	if !IsNil(o.Organization) {
		toSerialize["Organization"] = o.Organization
	}
	if !IsNil(o.OrganizationalUnit) {
		toSerialize["OrganizationalUnit"] = o.OrganizationalUnit
	}
	if !IsNil(o.Locality) {
		toSerialize["Locality"] = o.Locality
	}
	if !IsNil(o.Province) {
		toSerialize["Province"] = o.Province
	}
	if !IsNil(o.StreetAddress) {
		toSerialize["StreetAddress"] = o.StreetAddress
	}
	if !IsNil(o.PostalCode) {
		toSerialize["PostalCode"] = o.PostalCode
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["SerialNumber"] = o.SerialNumber
	}
	if !IsNil(o.CommonName) {
		toSerialize["CommonName"] = o.CommonName
	}
	if !IsNil(o.Names) {
		toSerialize["Names"] = o.Names
	}
	if !IsNil(o.ExtraNames) {
		toSerialize["ExtraNames"] = o.ExtraNames
	}
	return toSerialize, nil
}

type NullablePkixName struct {
	value *PkixName
	isSet bool
}

func (v NullablePkixName) Get() *PkixName {
	return v.value
}

func (v *NullablePkixName) Set(val *PkixName) {
	v.value = val
	v.isSet = true
}

func (v NullablePkixName) IsSet() bool {
	return v.isSet
}

func (v *NullablePkixName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePkixName(val *PkixName) *NullablePkixName {
	return &NullablePkixName{value: val, isSet: true}
}

func (v NullablePkixName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePkixName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


