/*
Tyk Gateway API

The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.  **Warning: Under no circumstances should outside parties be granted access to this API.**  The Tyk Gateway API is capable of:  * Managing session objects (key generation) * Managing and listing policies * Managing and listing API Definitions (only when not using the Dashboard) * Hot reloads / reloading a cluster configuration * OAuth client creation (only when not using the Dashboard)   In order to use the Gateway API, you'll need to set the `secret` parameter in your tyk.conf file.  The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:  ``` x-tyk-authorization: <your-secret> ``` <br/> <b>The Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.</b>

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// CertificateBasicsModel CertificateBasics represents basic details of a certificate
type CertificateBasicsModel struct {
	Id *string `json:"id,omitempty"`
	IssuerCn *string `json:"issuer_cn,omitempty"`
	SubjectCn *string `json:"subject_cn,omitempty"`
	DnsNames []string `json:"dns_names,omitempty"`
	HasPrivate *string `json:"has_private,omitempty"`
	NotBefore *string `json:"not_before,omitempty"`
	NotAfter *string `json:"not_after,omitempty"`
}

// NewCertificateBasicsModel instantiates a new CertificateBasicsModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateBasicsModel() *CertificateBasicsModel {
	this := CertificateBasicsModel{}
	return &this
}

// NewCertificateBasicsModelWithDefaults instantiates a new CertificateBasicsModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateBasicsModelWithDefaults() *CertificateBasicsModel {
	this := CertificateBasicsModel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CertificateBasicsModel) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateBasicsModel) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CertificateBasicsModel) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CertificateBasicsModel) SetId(v string) {
	o.Id = &v
}

// GetIssuerCn returns the IssuerCn field value if set, zero value otherwise.
func (o *CertificateBasicsModel) GetIssuerCn() string {
	if o == nil || o.IssuerCn == nil {
		var ret string
		return ret
	}
	return *o.IssuerCn
}

// GetIssuerCnOk returns a tuple with the IssuerCn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateBasicsModel) GetIssuerCnOk() (*string, bool) {
	if o == nil || o.IssuerCn == nil {
		return nil, false
	}
	return o.IssuerCn, true
}

// HasIssuerCn returns a boolean if a field has been set.
func (o *CertificateBasicsModel) HasIssuerCn() bool {
	if o != nil && o.IssuerCn != nil {
		return true
	}

	return false
}

// SetIssuerCn gets a reference to the given string and assigns it to the IssuerCn field.
func (o *CertificateBasicsModel) SetIssuerCn(v string) {
	o.IssuerCn = &v
}

// GetSubjectCn returns the SubjectCn field value if set, zero value otherwise.
func (o *CertificateBasicsModel) GetSubjectCn() string {
	if o == nil || o.SubjectCn == nil {
		var ret string
		return ret
	}
	return *o.SubjectCn
}

// GetSubjectCnOk returns a tuple with the SubjectCn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateBasicsModel) GetSubjectCnOk() (*string, bool) {
	if o == nil || o.SubjectCn == nil {
		return nil, false
	}
	return o.SubjectCn, true
}

// HasSubjectCn returns a boolean if a field has been set.
func (o *CertificateBasicsModel) HasSubjectCn() bool {
	if o != nil && o.SubjectCn != nil {
		return true
	}

	return false
}

// SetSubjectCn gets a reference to the given string and assigns it to the SubjectCn field.
func (o *CertificateBasicsModel) SetSubjectCn(v string) {
	o.SubjectCn = &v
}

// GetDnsNames returns the DnsNames field value if set, zero value otherwise.
func (o *CertificateBasicsModel) GetDnsNames() []string {
	if o == nil || o.DnsNames == nil {
		var ret []string
		return ret
	}
	return o.DnsNames
}

// GetDnsNamesOk returns a tuple with the DnsNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateBasicsModel) GetDnsNamesOk() ([]string, bool) {
	if o == nil || o.DnsNames == nil {
		return nil, false
	}
	return o.DnsNames, true
}

// HasDnsNames returns a boolean if a field has been set.
func (o *CertificateBasicsModel) HasDnsNames() bool {
	if o != nil && o.DnsNames != nil {
		return true
	}

	return false
}

// SetDnsNames gets a reference to the given []string and assigns it to the DnsNames field.
func (o *CertificateBasicsModel) SetDnsNames(v []string) {
	o.DnsNames = v
}

// GetHasPrivate returns the HasPrivate field value if set, zero value otherwise.
func (o *CertificateBasicsModel) GetHasPrivate() string {
	if o == nil || o.HasPrivate == nil {
		var ret string
		return ret
	}
	return *o.HasPrivate
}

// GetHasPrivateOk returns a tuple with the HasPrivate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateBasicsModel) GetHasPrivateOk() (*string, bool) {
	if o == nil || o.HasPrivate == nil {
		return nil, false
	}
	return o.HasPrivate, true
}

// HasHasPrivate returns a boolean if a field has been set.
func (o *CertificateBasicsModel) HasHasPrivate() bool {
	if o != nil && o.HasPrivate != nil {
		return true
	}

	return false
}

// SetHasPrivate gets a reference to the given string and assigns it to the HasPrivate field.
func (o *CertificateBasicsModel) SetHasPrivate(v string) {
	o.HasPrivate = &v
}

// GetNotBefore returns the NotBefore field value if set, zero value otherwise.
func (o *CertificateBasicsModel) GetNotBefore() string {
	if o == nil || o.NotBefore == nil {
		var ret string
		return ret
	}
	return *o.NotBefore
}

// GetNotBeforeOk returns a tuple with the NotBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateBasicsModel) GetNotBeforeOk() (*string, bool) {
	if o == nil || o.NotBefore == nil {
		return nil, false
	}
	return o.NotBefore, true
}

// HasNotBefore returns a boolean if a field has been set.
func (o *CertificateBasicsModel) HasNotBefore() bool {
	if o != nil && o.NotBefore != nil {
		return true
	}

	return false
}

// SetNotBefore gets a reference to the given string and assigns it to the NotBefore field.
func (o *CertificateBasicsModel) SetNotBefore(v string) {
	o.NotBefore = &v
}

// GetNotAfter returns the NotAfter field value if set, zero value otherwise.
func (o *CertificateBasicsModel) GetNotAfter() string {
	if o == nil || o.NotAfter == nil {
		var ret string
		return ret
	}
	return *o.NotAfter
}

// GetNotAfterOk returns a tuple with the NotAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateBasicsModel) GetNotAfterOk() (*string, bool) {
	if o == nil || o.NotAfter == nil {
		return nil, false
	}
	return o.NotAfter, true
}

// HasNotAfter returns a boolean if a field has been set.
func (o *CertificateBasicsModel) HasNotAfter() bool {
	if o != nil && o.NotAfter != nil {
		return true
	}

	return false
}

// SetNotAfter gets a reference to the given string and assigns it to the NotAfter field.
func (o *CertificateBasicsModel) SetNotAfter(v string) {
	o.NotAfter = &v
}

func (o CertificateBasicsModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.IssuerCn != nil {
		toSerialize["issuer_cn"] = o.IssuerCn
	}
	if o.SubjectCn != nil {
		toSerialize["subject_cn"] = o.SubjectCn
	}
	if o.DnsNames != nil {
		toSerialize["dns_names"] = o.DnsNames
	}
	if o.HasPrivate != nil {
		toSerialize["has_private"] = o.HasPrivate
	}
	if o.NotBefore != nil {
		toSerialize["not_before"] = o.NotBefore
	}
	if o.NotAfter != nil {
		toSerialize["not_after"] = o.NotAfter
	}
	return json.Marshal(toSerialize)
}

type NullableCertificateBasicsModel struct {
	value *CertificateBasicsModel
	isSet bool
}

func (v NullableCertificateBasicsModel) Get() *CertificateBasicsModel {
	return v.value
}

func (v *NullableCertificateBasicsModel) Set(val *CertificateBasicsModel) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateBasicsModel) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateBasicsModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateBasicsModel(val *CertificateBasicsModel) *NullableCertificateBasicsModel {
	return &NullableCertificateBasicsModel{value: val, isSet: true}
}

func (v NullableCertificateBasicsModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateBasicsModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


