/*
Tyk Gateway API

The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.  **Warning: Under no circumstances should outside parties be granted access to this API.**  The Tyk Gateway API is capable of:  * Managing session objects (key generation) * Managing and listing policies * Managing and listing API Definitions (only when not using the Dashboard) * Hot reloads / reloading a cluster configuration * OAuth client creation (only when not using the Dashboard)   In order to use the Gateway API, you'll need to set the `secret` parameter in your tyk.conf file.  The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:  ``` x-tyk-authorization: <your-secret> ``` <br/> <b>The Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.</b>

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
	"fmt"
)

// BooleanQueryParamModel the model 'BooleanQueryParamModel'
type BooleanQueryParamModel string

// List of BooleanQueryParam
const (
	TRUE BooleanQueryParamModel = "true"
	FALSE BooleanQueryParamModel = "false"
)

// All allowed values of BooleanQueryParamModel enum
var AllowedBooleanQueryParamModelEnumValues = []BooleanQueryParamModel{
	"true",
	"false",
}

func (v *BooleanQueryParamModel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BooleanQueryParamModel(value)
	for _, existing := range AllowedBooleanQueryParamModelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BooleanQueryParamModel", value)
}

// NewBooleanQueryParamModelFromValue returns a pointer to a valid BooleanQueryParamModel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBooleanQueryParamModelFromValue(v string) (*BooleanQueryParamModel, error) {
	ev := BooleanQueryParamModel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BooleanQueryParamModel: valid values are %v", v, AllowedBooleanQueryParamModelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BooleanQueryParamModel) IsValid() bool {
	for _, existing := range AllowedBooleanQueryParamModelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BooleanQueryParam value
func (v BooleanQueryParamModel) Ptr() *BooleanQueryParamModel {
	return &v
}

type NullableBooleanQueryParamModel struct {
	value *BooleanQueryParamModel
	isSet bool
}

func (v NullableBooleanQueryParamModel) Get() *BooleanQueryParamModel {
	return v.value
}

func (v *NullableBooleanQueryParamModel) Set(val *BooleanQueryParamModel) {
	v.value = val
	v.isSet = true
}

func (v NullableBooleanQueryParamModel) IsSet() bool {
	return v.isSet
}

func (v *NullableBooleanQueryParamModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBooleanQueryParamModel(val *BooleanQueryParamModel) *NullableBooleanQueryParamModel {
	return &NullableBooleanQueryParamModel{value: val, isSet: true}
}

func (v NullableBooleanQueryParamModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBooleanQueryParamModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

