/*
Tyk Gateway API

The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.  **Warning: Under no circumstances should outside parties be granted access to this API.**  The Tyk Gateway API is capable of:  * Managing session objects (key generation) * Managing and listing policies * Managing and listing API Definitions (only when not using the Dashboard) * Hot reloads / reloading a cluster configuration * OAuth client creation (only when not using the Dashboard)   In order to use the Gateway API, you'll need to set the `secret` parameter in your tyk.conf file.  The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:  ``` x-tyk-authorization: <your-secret> ``` <br/> <b>The Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.</b>

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// CacheOptionsModel struct for CacheOptionsModel
type CacheOptionsModel struct {
	CacheAllSafeRequests *bool `json:"cache_all_safe_requests,omitempty"`
	CacheControlTtlHeader *string `json:"cache_control_ttl_header,omitempty"`
	CacheResponseCodes []int64 `json:"cache_response_codes,omitempty"`
	CacheTimeout *int64 `json:"cache_timeout,omitempty"`
	EnableCache *bool `json:"enable_cache,omitempty"`
	EnableUpstreamCacheControl *bool `json:"enable_upstream_cache_control,omitempty"`
}

// NewCacheOptionsModel instantiates a new CacheOptionsModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCacheOptionsModel() *CacheOptionsModel {
	this := CacheOptionsModel{}
	return &this
}

// NewCacheOptionsModelWithDefaults instantiates a new CacheOptionsModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCacheOptionsModelWithDefaults() *CacheOptionsModel {
	this := CacheOptionsModel{}
	return &this
}

// GetCacheAllSafeRequests returns the CacheAllSafeRequests field value if set, zero value otherwise.
func (o *CacheOptionsModel) GetCacheAllSafeRequests() bool {
	if o == nil || o.CacheAllSafeRequests == nil {
		var ret bool
		return ret
	}
	return *o.CacheAllSafeRequests
}

// GetCacheAllSafeRequestsOk returns a tuple with the CacheAllSafeRequests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheOptionsModel) GetCacheAllSafeRequestsOk() (*bool, bool) {
	if o == nil || o.CacheAllSafeRequests == nil {
		return nil, false
	}
	return o.CacheAllSafeRequests, true
}

// HasCacheAllSafeRequests returns a boolean if a field has been set.
func (o *CacheOptionsModel) HasCacheAllSafeRequests() bool {
	if o != nil && o.CacheAllSafeRequests != nil {
		return true
	}

	return false
}

// SetCacheAllSafeRequests gets a reference to the given bool and assigns it to the CacheAllSafeRequests field.
func (o *CacheOptionsModel) SetCacheAllSafeRequests(v bool) {
	o.CacheAllSafeRequests = &v
}

// GetCacheControlTtlHeader returns the CacheControlTtlHeader field value if set, zero value otherwise.
func (o *CacheOptionsModel) GetCacheControlTtlHeader() string {
	if o == nil || o.CacheControlTtlHeader == nil {
		var ret string
		return ret
	}
	return *o.CacheControlTtlHeader
}

// GetCacheControlTtlHeaderOk returns a tuple with the CacheControlTtlHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheOptionsModel) GetCacheControlTtlHeaderOk() (*string, bool) {
	if o == nil || o.CacheControlTtlHeader == nil {
		return nil, false
	}
	return o.CacheControlTtlHeader, true
}

// HasCacheControlTtlHeader returns a boolean if a field has been set.
func (o *CacheOptionsModel) HasCacheControlTtlHeader() bool {
	if o != nil && o.CacheControlTtlHeader != nil {
		return true
	}

	return false
}

// SetCacheControlTtlHeader gets a reference to the given string and assigns it to the CacheControlTtlHeader field.
func (o *CacheOptionsModel) SetCacheControlTtlHeader(v string) {
	o.CacheControlTtlHeader = &v
}

// GetCacheResponseCodes returns the CacheResponseCodes field value if set, zero value otherwise.
func (o *CacheOptionsModel) GetCacheResponseCodes() []int64 {
	if o == nil || o.CacheResponseCodes == nil {
		var ret []int64
		return ret
	}
	return o.CacheResponseCodes
}

// GetCacheResponseCodesOk returns a tuple with the CacheResponseCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheOptionsModel) GetCacheResponseCodesOk() ([]int64, bool) {
	if o == nil || o.CacheResponseCodes == nil {
		return nil, false
	}
	return o.CacheResponseCodes, true
}

// HasCacheResponseCodes returns a boolean if a field has been set.
func (o *CacheOptionsModel) HasCacheResponseCodes() bool {
	if o != nil && o.CacheResponseCodes != nil {
		return true
	}

	return false
}

// SetCacheResponseCodes gets a reference to the given []int64 and assigns it to the CacheResponseCodes field.
func (o *CacheOptionsModel) SetCacheResponseCodes(v []int64) {
	o.CacheResponseCodes = v
}

// GetCacheTimeout returns the CacheTimeout field value if set, zero value otherwise.
func (o *CacheOptionsModel) GetCacheTimeout() int64 {
	if o == nil || o.CacheTimeout == nil {
		var ret int64
		return ret
	}
	return *o.CacheTimeout
}

// GetCacheTimeoutOk returns a tuple with the CacheTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheOptionsModel) GetCacheTimeoutOk() (*int64, bool) {
	if o == nil || o.CacheTimeout == nil {
		return nil, false
	}
	return o.CacheTimeout, true
}

// HasCacheTimeout returns a boolean if a field has been set.
func (o *CacheOptionsModel) HasCacheTimeout() bool {
	if o != nil && o.CacheTimeout != nil {
		return true
	}

	return false
}

// SetCacheTimeout gets a reference to the given int64 and assigns it to the CacheTimeout field.
func (o *CacheOptionsModel) SetCacheTimeout(v int64) {
	o.CacheTimeout = &v
}

// GetEnableCache returns the EnableCache field value if set, zero value otherwise.
func (o *CacheOptionsModel) GetEnableCache() bool {
	if o == nil || o.EnableCache == nil {
		var ret bool
		return ret
	}
	return *o.EnableCache
}

// GetEnableCacheOk returns a tuple with the EnableCache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheOptionsModel) GetEnableCacheOk() (*bool, bool) {
	if o == nil || o.EnableCache == nil {
		return nil, false
	}
	return o.EnableCache, true
}

// HasEnableCache returns a boolean if a field has been set.
func (o *CacheOptionsModel) HasEnableCache() bool {
	if o != nil && o.EnableCache != nil {
		return true
	}

	return false
}

// SetEnableCache gets a reference to the given bool and assigns it to the EnableCache field.
func (o *CacheOptionsModel) SetEnableCache(v bool) {
	o.EnableCache = &v
}

// GetEnableUpstreamCacheControl returns the EnableUpstreamCacheControl field value if set, zero value otherwise.
func (o *CacheOptionsModel) GetEnableUpstreamCacheControl() bool {
	if o == nil || o.EnableUpstreamCacheControl == nil {
		var ret bool
		return ret
	}
	return *o.EnableUpstreamCacheControl
}

// GetEnableUpstreamCacheControlOk returns a tuple with the EnableUpstreamCacheControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheOptionsModel) GetEnableUpstreamCacheControlOk() (*bool, bool) {
	if o == nil || o.EnableUpstreamCacheControl == nil {
		return nil, false
	}
	return o.EnableUpstreamCacheControl, true
}

// HasEnableUpstreamCacheControl returns a boolean if a field has been set.
func (o *CacheOptionsModel) HasEnableUpstreamCacheControl() bool {
	if o != nil && o.EnableUpstreamCacheControl != nil {
		return true
	}

	return false
}

// SetEnableUpstreamCacheControl gets a reference to the given bool and assigns it to the EnableUpstreamCacheControl field.
func (o *CacheOptionsModel) SetEnableUpstreamCacheControl(v bool) {
	o.EnableUpstreamCacheControl = &v
}

func (o CacheOptionsModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CacheAllSafeRequests != nil {
		toSerialize["cache_all_safe_requests"] = o.CacheAllSafeRequests
	}
	if o.CacheControlTtlHeader != nil {
		toSerialize["cache_control_ttl_header"] = o.CacheControlTtlHeader
	}
	if o.CacheResponseCodes != nil {
		toSerialize["cache_response_codes"] = o.CacheResponseCodes
	}
	if o.CacheTimeout != nil {
		toSerialize["cache_timeout"] = o.CacheTimeout
	}
	if o.EnableCache != nil {
		toSerialize["enable_cache"] = o.EnableCache
	}
	if o.EnableUpstreamCacheControl != nil {
		toSerialize["enable_upstream_cache_control"] = o.EnableUpstreamCacheControl
	}
	return json.Marshal(toSerialize)
}

type NullableCacheOptionsModel struct {
	value *CacheOptionsModel
	isSet bool
}

func (v NullableCacheOptionsModel) Get() *CacheOptionsModel {
	return v.value
}

func (v *NullableCacheOptionsModel) Set(val *CacheOptionsModel) {
	v.value = val
	v.isSet = true
}

func (v NullableCacheOptionsModel) IsSet() bool {
	return v.isSet
}

func (v *NullableCacheOptionsModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCacheOptionsModel(val *CacheOptionsModel) *NullableCacheOptionsModel {
	return &NullableCacheOptionsModel{value: val, isSet: true}
}

func (v NullableCacheOptionsModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCacheOptionsModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


