/*
Tyk Gateway API

The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.  **Warning: Under no circumstances should outside parties be granted access to this API.**  The Tyk Gateway API is capable of:  * Managing session objects (key generation) * Managing and listing policies * Managing and listing API Definitions (only when not using the Dashboard) * Hot reloads / reloading a cluster configuration * OAuth client creation (only when not using the Dashboard)   In order to use the Gateway API, you'll need to set the `secret` parameter in your tyk.conf file.  The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:  ``` x-tyk-authorization: <your-secret> ``` <br/> <b>The Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.</b>

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// ApiModifyKeySuccessModel apiModifyKeySuccess represents when a Key modification was successful
type ApiModifyKeySuccessModel struct {
	Action *string `json:"action,omitempty"`
	// in:body
	Key *string `json:"key,omitempty"`
	KeyHash *string `json:"key_hash,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewApiModifyKeySuccessModel instantiates a new ApiModifyKeySuccessModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiModifyKeySuccessModel() *ApiModifyKeySuccessModel {
	this := ApiModifyKeySuccessModel{}
	return &this
}

// NewApiModifyKeySuccessModelWithDefaults instantiates a new ApiModifyKeySuccessModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiModifyKeySuccessModelWithDefaults() *ApiModifyKeySuccessModel {
	this := ApiModifyKeySuccessModel{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *ApiModifyKeySuccessModel) GetAction() string {
	if o == nil || o.Action == nil {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiModifyKeySuccessModel) GetActionOk() (*string, bool) {
	if o == nil || o.Action == nil {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *ApiModifyKeySuccessModel) HasAction() bool {
	if o != nil && o.Action != nil {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *ApiModifyKeySuccessModel) SetAction(v string) {
	o.Action = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *ApiModifyKeySuccessModel) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiModifyKeySuccessModel) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *ApiModifyKeySuccessModel) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *ApiModifyKeySuccessModel) SetKey(v string) {
	o.Key = &v
}

// GetKeyHash returns the KeyHash field value if set, zero value otherwise.
func (o *ApiModifyKeySuccessModel) GetKeyHash() string {
	if o == nil || o.KeyHash == nil {
		var ret string
		return ret
	}
	return *o.KeyHash
}

// GetKeyHashOk returns a tuple with the KeyHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiModifyKeySuccessModel) GetKeyHashOk() (*string, bool) {
	if o == nil || o.KeyHash == nil {
		return nil, false
	}
	return o.KeyHash, true
}

// HasKeyHash returns a boolean if a field has been set.
func (o *ApiModifyKeySuccessModel) HasKeyHash() bool {
	if o != nil && o.KeyHash != nil {
		return true
	}

	return false
}

// SetKeyHash gets a reference to the given string and assigns it to the KeyHash field.
func (o *ApiModifyKeySuccessModel) SetKeyHash(v string) {
	o.KeyHash = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ApiModifyKeySuccessModel) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiModifyKeySuccessModel) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ApiModifyKeySuccessModel) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ApiModifyKeySuccessModel) SetStatus(v string) {
	o.Status = &v
}

func (o ApiModifyKeySuccessModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Action != nil {
		toSerialize["action"] = o.Action
	}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.KeyHash != nil {
		toSerialize["key_hash"] = o.KeyHash
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableApiModifyKeySuccessModel struct {
	value *ApiModifyKeySuccessModel
	isSet bool
}

func (v NullableApiModifyKeySuccessModel) Get() *ApiModifyKeySuccessModel {
	return v.value
}

func (v *NullableApiModifyKeySuccessModel) Set(val *ApiModifyKeySuccessModel) {
	v.value = val
	v.isSet = true
}

func (v NullableApiModifyKeySuccessModel) IsSet() bool {
	return v.isSet
}

func (v *NullableApiModifyKeySuccessModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiModifyKeySuccessModel(val *ApiModifyKeySuccessModel) *NullableApiModifyKeySuccessModel {
	return &NullableApiModifyKeySuccessModel{value: val, isSet: true}
}

func (v NullableApiModifyKeySuccessModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiModifyKeySuccessModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


